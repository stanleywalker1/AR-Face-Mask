{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LibraryLoader = void 0;\n/* eslint-disable class-methods-use-this */\n\nconst __1 = require(\"..\");\n\nconst three_1 = require(\"../three\");\n\nconst itemFilename = \"__zappar_threejs_library\";\n/**\n * Loader for library itself.\n * This library uses some additional resources (e.g web workers and WebAssembly) - this loader resolves once the library has fully loaded these resources.\n * If you're using the LoadingManager included in this library you don't need to explicitly use this yourself as one is automatically created.\n */\n\nclass LibraryLoader extends three_1.THREE.Loader {\n  /**\n   * Resolves once the library is loaded and ready to process data.\n   * @param onLoad - Callback which runs once the library is fully loaded.\n   * @param onError - Callback which is called if there's an error loading library.\n   */\n  load(onLoad, onProgress, onError) {\n    this.manager.itemStart(itemFilename);\n    (0, __1.loadedPromise)().then(() => {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      this.manager.itemEnd(itemFilename);\n    }).catch(err => {\n      onError === null || onError === void 0 ? void 0 : onError();\n      this.manager.itemError(itemFilename);\n      this.manager.itemEnd(itemFilename);\n    });\n  }\n  /**\n   * @ignore\n   */\n\n\n  parse() {}\n\n}\n\nexports.LibraryLoader = LibraryLoader;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/react-three-example-face-tracking-helmet-1/node_modules/@zappar/zappar-threejs/lib/loaders/libraryloader.js"],"names":["Object","defineProperty","exports","value","LibraryLoader","__1","require","three_1","itemFilename","THREE","Loader","load","onLoad","onProgress","onError","manager","itemStart","loadedPromise","then","itemEnd","catch","err","itemError","parse"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,IAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,YAAY,GAAG,0BAArB;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMJ,aAAN,SAA4BG,OAAO,CAACE,KAAR,CAAcC,MAA1C,CAAiD;AAC7C;AACJ;AACA;AACA;AACA;AACIC,EAAAA,IAAI,CAACC,MAAD,EAASC,UAAT,EAAqBC,OAArB,EAA8B;AAC9B,SAAKC,OAAL,CAAaC,SAAb,CAAuBR,YAAvB;AACA,KAAC,GAAGH,GAAG,CAACY,aAAR,IACKC,IADL,CACU,MAAM;AACZN,MAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,EAAtD;AACA,WAAKG,OAAL,CAAaI,OAAb,CAAqBX,YAArB;AACH,KAJD,EAKKY,KALL,CAKYC,GAAD,IAAS;AAChBP,MAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,EAAzD;AACA,WAAKC,OAAL,CAAaO,SAAb,CAAuBd,YAAvB;AACA,WAAKO,OAAL,CAAaI,OAAb,CAAqBX,YAArB;AACH,KATD;AAUH;AACD;AACJ;AACA;;;AACIe,EAAAA,KAAK,GAAG,CAAG;;AAtBkC;;AAwBjDrB,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LibraryLoader = void 0;\n/* eslint-disable class-methods-use-this */\nconst __1 = require(\"..\");\nconst three_1 = require(\"../three\");\nconst itemFilename = \"__zappar_threejs_library\";\n/**\n * Loader for library itself.\n * This library uses some additional resources (e.g web workers and WebAssembly) - this loader resolves once the library has fully loaded these resources.\n * If you're using the LoadingManager included in this library you don't need to explicitly use this yourself as one is automatically created.\n */\nclass LibraryLoader extends three_1.THREE.Loader {\n    /**\n     * Resolves once the library is loaded and ready to process data.\n     * @param onLoad - Callback which runs once the library is fully loaded.\n     * @param onError - Callback which is called if there's an error loading library.\n     */\n    load(onLoad, onProgress, onError) {\n        this.manager.itemStart(itemFilename);\n        (0, __1.loadedPromise)()\n            .then(() => {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n            this.manager.itemEnd(itemFilename);\n        })\n            .catch((err) => {\n            onError === null || onError === void 0 ? void 0 : onError();\n            this.manager.itemError(itemFilename);\n            this.manager.itemEnd(itemFilename);\n        });\n    }\n    /**\n     * @ignore\n     */\n    parse() { }\n}\nexports.LibraryLoader = LibraryLoader;\n"]},"metadata":{},"sourceType":"script"}
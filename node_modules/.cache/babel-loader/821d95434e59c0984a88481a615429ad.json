{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\n\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, keys_1.default)(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n}\n\nexports.defaultVisit = defaultVisit;\n\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, isArray_1.default)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if ((0, isUndefined_1.default)(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n\n      if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n        var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") + \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\n\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\n\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, forEach_1.default)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\n\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\n\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexports.validateVisitor = validateVisitor;\n\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n    return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n  });\n  var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n    return {\n      msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n      type: CstVisitorDefinitionError.MISSING_METHOD,\n      methodName: currRuleName\n    };\n  });\n  return (0, compact_1.default)(errors);\n}\n\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\n\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if ((0, isFunction_1.default)(visitorInstance[prop]) && !(0, includes_1.default)(VALID_PROP_NAMES, prop) && !(0, includes_1.default)(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\".concat(prop, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor\\n\") + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}\n\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,SAAgBA,YAAhB,CAAiCC,GAAjC,EAA2CC,KAA3C,EAAoD;AAClD,MAAMC,aAAa,GAAG,oBAAKF,GAAL,CAAtB;AACA,MAAMG,mBAAmB,GAAGD,aAAa,CAACE,MAA1C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,mBAApB,EAAyCE,CAAC,EAA1C,EAA8C;AAC5C,QAAMC,aAAa,GAAGJ,aAAa,CAACG,CAAD,CAAnC;AACA,QAAME,cAAc,GAAGP,GAAG,CAACM,aAAD,CAA1B;AACA,QAAME,oBAAoB,GAAGD,cAAc,CAACH,MAA5C;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,oBAApB,EAA0CC,CAAC,EAA3C,EAA+C;AAC7C,UAAMC,SAAS,GAAQH,cAAc,CAACE,CAAD,CAArC,CAD6C,CAE7C;;AACA,UAAIC,SAAS,CAACC,YAAV,KAA2BC,SAA/B,EAA0C;AACxC,aAAKF,SAAS,CAACG,IAAf,EAAqBH,SAAS,CAACI,QAA/B,EAAyCb,KAAzC;AACD;AACF;AACF,GAdiD,CAelD;;AACD;;AAhBDc;;AAkBA,SAAgBC,oCAAhB,CACEC,WADF,EAEEC,SAFF,EAEqB;AAInB,MAAMC,kBAAkB,GAAQ,aAAc,CAA9C,CAJmB,CAMnB;AACA;AACA;;;AACA,wCAAeA,kBAAf,EAAmCF,WAAW,GAAG,eAAjD;AAEA,MAAMG,aAAa,GAAG;AACpBC,SAAK,EAAE,UAAUC,OAAV,EAAwCrB,KAAxC,EAAkD;AACvD;AACA,UAAI,uBAAQqB,OAAR,CAAJ,EAAsB;AACpB;AACA;AACAA,eAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACD,OANsD,CAQvD;;;AACA,UAAI,2BAAYA,OAAZ,CAAJ,EAA0B;AACxB,eAAOV,SAAP;AACD;;AAED,aAAO,KAAKU,OAAO,CAACT,IAAb,EAAmBS,OAAO,CAACR,QAA3B,EAAqCb,KAArC,CAAP;AACD,KAfmB;AAiBpBsB,mBAAe,EAAE;AACf,UAAMC,wBAAwB,GAAGD,eAAe,CAAC,IAAD,EAAOL,SAAP,CAAhD;;AACA,UAAI,CAAC,uBAAQM,wBAAR,CAAL,EAAwC;AACtC,YAAMC,aAAa,GAAG,mBACpBD,wBADoB,EAEpB,UAACE,YAAD,EAAa;AAAK,6BAAY,CAACC,GAAb;AAAgB,SAFd,CAAtB;AAIA,cAAMC,KAAK,CACT,0CAAmC,KAAKC,WAAL,CAAiBhB,IAApD,EAAwD,QAAxD,IACE,UAAGY,aAAa,CAACK,IAAd,CAAmB,MAAnB,EAA2BC,OAA3B,CAAmC,KAAnC,EAA0C,MAA1C,CAAH,CAFO,CAAX;AAID;AACF;AA7BmB,GAAtB;AAgCAZ,oBAAkB,CAACa,SAAnB,GAA+BZ,aAA/B;AACAD,oBAAkB,CAACa,SAAnB,CAA6BH,WAA7B,GAA2CV,kBAA3C;AAEAA,oBAAkB,CAACc,WAAnB,GAAiCf,SAAjC;AAEA,SAAOC,kBAAP;AACD;;AAnDDJ;;AAqDA,SAAgBmB,wCAAhB,CACEjB,WADF,EAEEC,SAFF,EAGEiB,eAHF,EAG2B;AAIzB,MAAMhB,kBAAkB,GAAQ,aAAc,CAA9C,CAJyB,CAMzB;AACA;AACA;;;AACA,wCAAeA,kBAAf,EAAmCF,WAAW,GAAG,2BAAjD;AAEA,MAAMmB,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcH,eAAe,CAACH,SAA9B,CAA1B;AACA,yBAAQd,SAAR,EAAmB,UAACqB,QAAD,EAAS;AAC1BH,qBAAiB,CAACG,QAAD,CAAjB,GAA8BxC,YAA9B;AACD,GAFD;AAIAoB,oBAAkB,CAACa,SAAnB,GAA+BI,iBAA/B;AACAjB,oBAAkB,CAACa,SAAnB,CAA6BH,WAA7B,GAA2CV,kBAA3C;AAEA,SAAOA,kBAAP;AACD;;AAvBDJ;AAyBA,IAAYyB,yBAAZ;;AAAA,WAAYA,yBAAZ,EAAqC;AACnCA;AACAA;AACD,CAHD,EAAYA,yBAAyB,GAAzBzB,0EAAyB,EAAzB,CAAZ;;AAWA,SAAgBQ,eAAhB,CACEkB,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAMwB,aAAa,GAAGC,yBAAyB,CAACF,eAAD,EAAkBvB,SAAlB,CAA/C;AACA,MAAM0B,eAAe,GAAGC,wBAAwB,CAACJ,eAAD,EAAkBvB,SAAlB,CAAhD;AAEA,SAAOwB,aAAa,CAACI,MAAd,CAAqBF,eAArB,CAAP;AACD;;AARD7B;;AAUA,SAAgB4B,yBAAhB,CACEF,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAM6B,gBAAgB,GAAG,sBAAO7B,SAAP,EAAkB,UAAC8B,YAAD,EAAa;AACtD,WAAO,0BAAYP,eAAuB,CAACO,YAAD,CAAnC,MAAuD,KAA9D;AACD,GAFwB,CAAzB;AAIA,MAAMC,MAAM,GAA8B,mBACxCF,gBADwC,EAExC,UAACC,YAAD,EAAa;AACX,WAAO;AACLrB,SAAG,EAAE,mCAA4BqB,YAA5B,EAAwC,OAAxC,EAAwCF,MAAxC,CACHL,eAAe,CAACZ,WAAhB,CAA4BhB,IADzB,EAEJ,eAFI,CADA;AAILqC,UAAI,EAAEV,yBAAyB,CAACW,cAJ3B;AAKLC,gBAAU,EAAEJ;AALP,KAAP;AAOD,GAVuC,CAA1C;AAaA,SAAO,uBAAiCC,MAAjC,CAAP;AACD;;AAtBDlC;AAwBA,IAAMsC,gBAAgB,GAAG,CAAC,aAAD,EAAgB,OAAhB,EAAyB,iBAAzB,CAAzB;;AACA,SAAgBR,wBAAhB,CACEJ,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAM+B,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAMK,IAAX,IAAmBb,eAAnB,EAAoC;AAClC,QACE,0BAAYA,eAAuB,CAACa,IAAD,CAAnC,KACA,CAAC,wBAASD,gBAAT,EAA2BC,IAA3B,CADD,IAEA,CAAC,wBAASpC,SAAT,EAAoBoC,IAApB,CAHH,EAIE;AACAL,YAAM,CAACM,IAAP,CAAY;AACV5B,WAAG,EACD,qCAA8B2B,IAA9B,EAAkC,OAAlC,EAAkCR,MAAlC,CACEL,eAAe,CAACZ,WAAhB,CAA4BhB,IAD9B,EAEC,gBAFD,IAGA,iEALQ;AAMVqC,YAAI,EAAEV,yBAAyB,CAACgB,gBANtB;AAOVJ,kBAAU,EAAEE;AAPF,OAAZ;AASD;AACF;;AACD,SAAOL,MAAP;AACD;;AAxBDlC","names":["defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","exports","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","missingRuleNames","currRuleName","errors","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","push","REDUNDANT_METHOD"],"sourceRoot":"","sources":["../../../../src/parse/cst/cst_visitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
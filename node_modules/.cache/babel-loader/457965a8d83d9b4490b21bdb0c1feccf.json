{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceMeshLoader = void 0;\n/* eslint-disable class-methods-use-this */\n\nconst zappar_1 = require(\"@zappar/zappar\");\n\nconst three_1 = require(\"../three\");\n/**\n * Loader for adaptive face mesh data.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\n\n\nclass FaceMeshLoader extends three_1.THREE.Loader {\n  /**\n   * Loads the data for a face mesh.\n   * @param options - A URL or ArrayBuffer of the source mesh data or defines if some face features should be filled with polygons.\n   * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n   * @param onError - Callback which is called if there's an error loading the mesh.\n   * @returns The FaceMesh.\n   */\n  load(options, onLoad, onProgress, onError) {\n    const trk = new zappar_1.FaceMesh();\n    let p;\n    const itemFilename = `__zappar_threejs_face_mesh_${JSON.stringify(options || \"default\")}`;\n    this.manager.itemStart(itemFilename);\n\n    if (options) {\n      if (typeof options === \"string\") p = trk.load(options);else if (options.customModel) p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);else p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);\n    } else {\n      p = trk.loadDefaultFace();\n    }\n\n    p.then(() => {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n      this.manager.itemEnd(itemFilename);\n    }).catch(_ => {\n      onError === null || onError === void 0 ? void 0 : onError(_);\n      this.manager.itemError(itemFilename);\n      this.manager.itemEnd(itemFilename);\n    });\n    return trk;\n  }\n  /**\n   * Loads the default face mesh.\n   * @param options - Defines if some face features should be filled with polygons.\n   * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n   * @param onError - Callback which is called if there's an error loading the mesh.\n   * @returns The FaceMesh.\n   */\n\n\n  loadFace(options, onLoad, onProgress, onError) {\n    const trk = new zappar_1.FaceMesh();\n    let p;\n    const itemFilename = `__zappar_threejs_face_mesh_face_${JSON.stringify(options || \"default\")}`;\n\n    if (options) {\n      if (options.customModel) p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);else p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);\n    } else {\n      p = trk.loadDefaultFace();\n    }\n\n    p.then(() => {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n      this.manager.itemEnd(itemFilename);\n    }).catch(_ => {\n      onError === null || onError === void 0 ? void 0 : onError(_);\n      this.manager.itemError(itemFilename);\n      this.manager.itemEnd(itemFilename);\n    });\n    return trk;\n  }\n  /**\n   * Loads the full head simplified mesh which covers the whole of the user's head, including some neck.\n   * It's ideal for drawing into the depth buffer in order to mask out the back of 3D models placed on the user's head.\n   * @param options - Defines if some face features should be filled with polygons.\n   * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n   * @param onError - Callback which is called if there's an error loading the mesh.\n   * @returns The FaceMesh.\n   */\n\n\n  loadFullHeadSimplified(options, onLoad, onProgress, onError) {\n    const trk = new zappar_1.FaceMesh();\n    let p;\n    const itemFilename = `__zappar_threejs_face_mesh_full_head_${JSON.stringify(options || \"default\")}`;\n\n    if (options) {\n      if (options.customModel) p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);else p = trk.loadDefaultFullHeadSimplified(options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);\n    } else {\n      p = trk.loadDefaultFullHeadSimplified();\n    }\n\n    p.then(() => {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n      this.manager.itemEnd(itemFilename);\n    }).catch(_ => {\n      onError === null || onError === void 0 ? void 0 : onError(_);\n      this.manager.itemError(itemFilename);\n      this.manager.itemEnd(itemFilename);\n    });\n    return trk;\n  }\n  /**\n   * @ignore\n   */\n\n\n  parse() {}\n\n}\n\nexports.FaceMeshLoader = FaceMeshLoader;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/react-three-example-face-tracking-helmet-1/node_modules/@zappar/zappar-threejs/lib/loaders/facemeshloader.js"],"names":["Object","defineProperty","exports","value","FaceMeshLoader","zappar_1","require","three_1","THREE","Loader","load","options","onLoad","onProgress","onError","trk","FaceMesh","p","itemFilename","JSON","stringify","manager","itemStart","customModel","fillMouth","fillEyeLeft","fillEyeRight","fillNeck","loadDefaultFace","then","itemEnd","catch","_","itemError","loadFace","loadFullHeadSimplified","loadDefaultFullHeadSimplified","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FaceMeshLoader = void 0;\n/* eslint-disable class-methods-use-this */\nconst zappar_1 = require(\"@zappar/zappar\");\nconst three_1 = require(\"../three\");\n/**\n * Loader for adaptive face mesh data.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\nclass FaceMeshLoader extends three_1.THREE.Loader {\n    /**\n     * Loads the data for a face mesh.\n     * @param options - A URL or ArrayBuffer of the source mesh data or defines if some face features should be filled with polygons.\n     * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n     * @param onError - Callback which is called if there's an error loading the mesh.\n     * @returns The FaceMesh.\n     */\n    load(options, onLoad, onProgress, onError) {\n        const trk = new zappar_1.FaceMesh();\n        let p;\n        const itemFilename = `__zappar_threejs_face_mesh_${JSON.stringify(options || \"default\")}`;\n        this.manager.itemStart(itemFilename);\n        if (options) {\n            if (typeof options === \"string\")\n                p = trk.load(options);\n            else if (options.customModel)\n                p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);\n            else\n                p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);\n        }\n        else {\n            p = trk.loadDefaultFace();\n        }\n        p.then(() => {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n            this.manager.itemEnd(itemFilename);\n        }).catch((_) => {\n            onError === null || onError === void 0 ? void 0 : onError(_);\n            this.manager.itemError(itemFilename);\n            this.manager.itemEnd(itemFilename);\n        });\n        return trk;\n    }\n    /**\n     * Loads the default face mesh.\n     * @param options - Defines if some face features should be filled with polygons.\n     * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n     * @param onError - Callback which is called if there's an error loading the mesh.\n     * @returns The FaceMesh.\n     */\n    loadFace(options, onLoad, onProgress, onError) {\n        const trk = new zappar_1.FaceMesh();\n        let p;\n        const itemFilename = `__zappar_threejs_face_mesh_face_${JSON.stringify(options || \"default\")}`;\n        if (options) {\n            if (options.customModel)\n                p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);\n            else\n                p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);\n        }\n        else {\n            p = trk.loadDefaultFace();\n        }\n        p.then(() => {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n            this.manager.itemEnd(itemFilename);\n        }).catch((_) => {\n            onError === null || onError === void 0 ? void 0 : onError(_);\n            this.manager.itemError(itemFilename);\n            this.manager.itemEnd(itemFilename);\n        });\n        return trk;\n    }\n    /**\n     * Loads the full head simplified mesh which covers the whole of the user's head, including some neck.\n     * It's ideal for drawing into the depth buffer in order to mask out the back of 3D models placed on the user's head.\n     * @param options - Defines if some face features should be filled with polygons.\n     * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n     * @param onError - Callback which is called if there's an error loading the mesh.\n     * @returns The FaceMesh.\n     */\n    loadFullHeadSimplified(options, onLoad, onProgress, onError) {\n        const trk = new zappar_1.FaceMesh();\n        let p;\n        const itemFilename = `__zappar_threejs_face_mesh_full_head_${JSON.stringify(options || \"default\")}`;\n        if (options) {\n            if (options.customModel)\n                p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);\n            else\n                p = trk.loadDefaultFullHeadSimplified(options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);\n        }\n        else {\n            p = trk.loadDefaultFullHeadSimplified();\n        }\n        p.then(() => {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n            this.manager.itemEnd(itemFilename);\n        }).catch((_) => {\n            onError === null || onError === void 0 ? void 0 : onError(_);\n            this.manager.itemError(itemFilename);\n            this.manager.itemEnd(itemFilename);\n        });\n        return trk;\n    }\n    /**\n     * @ignore\n     */\n    parse() { }\n}\nexports.FaceMeshLoader = FaceMeshLoader;\n"]},"metadata":{},"sourceType":"script"}
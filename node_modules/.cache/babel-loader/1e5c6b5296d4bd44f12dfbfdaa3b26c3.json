{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber'; // ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\n\nfunction useFBO(width, height, settings) {\n  const {\n    gl,\n    size\n  } = useThree();\n  const dpr = React.useMemo(() => gl.getPixelRatio(), [gl]);\n\n  const _width = typeof width === 'number' ? width : size.width * dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@react-three/drei/core/useFBO.js"],"names":["React","THREE","useThree","useFBO","width","height","settings","gl","size","dpr","useMemo","getPixelRatio","_width","_height","_settings","samples","targetSettings","target","WebGLRenderTarget","minFilter","LinearFilter","magFilter","encoding","outputEncoding","type","HalfFloatType","useLayoutEffect","setSize","useEffect","dispose"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAEA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA;AAFI,MAGFN,QAAQ,EAHZ;AAIA,QAAMO,GAAG,GAAGT,KAAK,CAACU,OAAN,CAAc,MAAMH,EAAE,CAACI,aAAH,EAApB,EAAwC,CAACJ,EAAD,CAAxC,CAAZ;;AAEA,QAAMK,MAAM,GAAG,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCI,IAAI,CAACJ,KAAL,GAAaK,GAAhE;;AAEA,QAAMI,OAAO,GAAG,OAAOR,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCG,IAAI,CAACH,MAAL,GAAcI,GAApE;;AAEA,QAAMK,SAAS,GAAG,CAAC,OAAOV,KAAP,KAAiB,QAAjB,GAA4BE,QAA5B,GAAuCF,KAAxC,KAAkD,EAApE;;AAEA,QAAM;AACJW,IAAAA,OADI;AAEJ,OAAGC;AAFC,MAGFF,SAHJ;AAIA,QAAMG,MAAM,GAAGjB,KAAK,CAACU,OAAN,CAAc,MAAM;AACjC,QAAIO,MAAJ;AACAA,IAAAA,MAAM,GAAG,IAAIhB,KAAK,CAACiB,iBAAV,CAA4BN,MAA5B,EAAoCC,OAApC,EAA6C;AACpDM,MAAAA,SAAS,EAAElB,KAAK,CAACmB,YADmC;AAEpDC,MAAAA,SAAS,EAAEpB,KAAK,CAACmB,YAFmC;AAGpDE,MAAAA,QAAQ,EAAEf,EAAE,CAACgB,cAHuC;AAIpDC,MAAAA,IAAI,EAAEvB,KAAK,CAACwB,aAJwC;AAKpD,SAAGT;AALiD,KAA7C,CAAT;AAOAC,IAAAA,MAAM,CAACF,OAAP,GAAiBA,OAAjB;AACA,WAAOE,MAAP;AACD,GAXc,EAWZ,EAXY,CAAf;AAYAjB,EAAAA,KAAK,CAAC0B,eAAN,CAAsB,MAAM;AAC1BT,IAAAA,MAAM,CAACU,OAAP,CAAef,MAAf,EAAuBC,OAAvB;AACA,QAAIE,OAAJ,EAAaE,MAAM,CAACF,OAAP,GAAiBA,OAAjB;AACd,GAHD,EAGG,CAACA,OAAD,EAAUE,MAAV,EAAkBL,MAAlB,EAA0BC,OAA1B,CAHH;AAIAb,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAMX,MAAM,CAACY,OAAP,EAAb;AACD,GAFD,EAEG,EAFH;AAGA,SAAOZ,MAAP;AACD;;AAED,SAASd,MAAT","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(width, height, settings) {\n  const {\n    gl,\n    size\n  } = useThree();\n  const dpr = React.useMemo(() => gl.getPixelRatio(), [gl]);\n\n  const _width = typeof width === 'number' ? width : size.width * dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };\n"]},"metadata":{},"sourceType":"module"}
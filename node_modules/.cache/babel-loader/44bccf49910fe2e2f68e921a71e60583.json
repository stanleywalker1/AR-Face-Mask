{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CameraTexture = void 0;\n\nconst camera_1 = require(\"./camera\");\n\nconst three_1 = require(\"./three\");\n/**\n * Creates a texture to be used internally by `ZapparThree.Camera`.\n */\n\n\nclass CameraTexture extends three_1.THREE.Texture {\n  constructor() {\n    super(...arguments);\n    this.MirrorMode = camera_1.CameraMirrorMode.None;\n    this.isVideoTexture = true;\n  }\n  /**\n   * Override three.js update function since we update the camera texture ourselves.\n   */\n\n\n  update() {} // eslint-disable-line class-methods-use-this\n\n  /**\n   * Processes camera frames and updates the texture.\n   * @param renderer - The Three.js WebGL renderer.\n   * @param pipeline - A ZapparThree Pipeline.\n   */\n\n\n  updateFromPipeline(renderer, pipeline) {\n    this.encoding = renderer.outputEncoding;\n    pipeline.cameraFrameUploadGL();\n    const texture = pipeline.cameraFrameTextureGL();\n    if (!texture) return; // Update the underlying WebGL texture of the ThreeJS texture object\n    // to the one provided by the Zappar library\n\n    const properties = renderer.properties.get(this); // eslint-disable-next-line no-underscore-dangle\n\n    properties.__webglTexture = texture; // eslint-disable-next-line no-underscore-dangle\n\n    properties.__webglInit = true; // The Zappar library provides a 4x4 UV matrix to display the camera\n    // texture on a fullscreen quad with 0,0 -> 1,1 UV coordinates\n\n    const view = new three_1.THREE.Matrix4();\n    view.fromArray(pipeline.cameraFrameTextureMatrix(renderer.domElement.width, renderer.domElement.height, this.MirrorMode === camera_1.CameraMirrorMode.Poses)); // ThreeJS's Texture object uses a 3x3 matrix, so convert from our 4x4 matrix\n\n    const textureMatrix3 = new three_1.THREE.Matrix3();\n    textureMatrix3.setFromMatrix4(view); // eslint-disable-next-line prefer-destructuring\n\n    textureMatrix3.elements[6] = view.elements[12]; // eslint-disable-next-line prefer-destructuring\n\n    textureMatrix3.elements[7] = view.elements[13];\n    textureMatrix3.elements[8] = 1; // The typings for ThreeJS's Texture object does not include the matrix properties\n    // so we have a custom type here\n\n    this.matrixAutoUpdate = false;\n    this.matrix = textureMatrix3;\n  }\n\n}\n\nexports.CameraTexture = CameraTexture;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/cameraTexture.js"],"names":["Object","defineProperty","exports","value","CameraTexture","camera_1","require","three_1","THREE","Texture","constructor","arguments","MirrorMode","CameraMirrorMode","None","isVideoTexture","update","updateFromPipeline","renderer","pipeline","encoding","outputEncoding","cameraFrameUploadGL","texture","cameraFrameTextureGL","properties","get","__webglTexture","__webglInit","view","Matrix4","fromArray","cameraFrameTextureMatrix","domElement","width","height","Poses","textureMatrix3","Matrix3","setFromMatrix4","elements","matrixAutoUpdate","matrix"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;AACA;AACA;AACA;;;AACA,MAAMF,aAAN,SAA4BG,OAAO,CAACC,KAAR,CAAcC,OAA1C,CAAkD;AAC9CC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,UAAL,GAAkBP,QAAQ,CAACQ,gBAAT,CAA0BC,IAA5C;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,MAAM,GAAG,CAAG,CATkC,CASjC;;AACb;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,kBAAkB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACnC,SAAKC,QAAL,GAAgBF,QAAQ,CAACG,cAAzB;AACAF,IAAAA,QAAQ,CAACG,mBAAT;AACA,UAAMC,OAAO,GAAGJ,QAAQ,CAACK,oBAAT,EAAhB;AACA,QAAI,CAACD,OAAL,EACI,OAL+B,CAMnC;AACA;;AACA,UAAME,UAAU,GAAGP,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwB,IAAxB,CAAnB,CARmC,CASnC;;AACAD,IAAAA,UAAU,CAACE,cAAX,GAA4BJ,OAA5B,CAVmC,CAWnC;;AACAE,IAAAA,UAAU,CAACG,WAAX,GAAyB,IAAzB,CAZmC,CAanC;AACA;;AACA,UAAMC,IAAI,GAAG,IAAItB,OAAO,CAACC,KAAR,CAAcsB,OAAlB,EAAb;AACAD,IAAAA,IAAI,CAACE,SAAL,CAAeZ,QAAQ,CAACa,wBAAT,CAAkCd,QAAQ,CAACe,UAAT,CAAoBC,KAAtD,EAA6DhB,QAAQ,CAACe,UAAT,CAAoBE,MAAjF,EAAyF,KAAKvB,UAAL,KAAoBP,QAAQ,CAACQ,gBAAT,CAA0BuB,KAAvI,CAAf,EAhBmC,CAiBnC;;AACA,UAAMC,cAAc,GAAG,IAAI9B,OAAO,CAACC,KAAR,CAAc8B,OAAlB,EAAvB;AACAD,IAAAA,cAAc,CAACE,cAAf,CAA8BV,IAA9B,EAnBmC,CAoBnC;;AACAQ,IAAAA,cAAc,CAACG,QAAf,CAAwB,CAAxB,IAA6BX,IAAI,CAACW,QAAL,CAAc,EAAd,CAA7B,CArBmC,CAsBnC;;AACAH,IAAAA,cAAc,CAACG,QAAf,CAAwB,CAAxB,IAA6BX,IAAI,CAACW,QAAL,CAAc,EAAd,CAA7B;AACAH,IAAAA,cAAc,CAACG,QAAf,CAAwB,CAAxB,IAA6B,CAA7B,CAxBmC,CAyBnC;AACA;;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,MAAL,GAAcL,cAAd;AACH;;AA5C6C;;AA8ClDnC,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CameraTexture = void 0;\nconst camera_1 = require(\"./camera\");\nconst three_1 = require(\"./three\");\n/**\n * Creates a texture to be used internally by `ZapparThree.Camera`.\n */\nclass CameraTexture extends three_1.THREE.Texture {\n    constructor() {\n        super(...arguments);\n        this.MirrorMode = camera_1.CameraMirrorMode.None;\n        this.isVideoTexture = true;\n    }\n    /**\n     * Override three.js update function since we update the camera texture ourselves.\n     */\n    update() { } // eslint-disable-line class-methods-use-this\n    /**\n     * Processes camera frames and updates the texture.\n     * @param renderer - The Three.js WebGL renderer.\n     * @param pipeline - A ZapparThree Pipeline.\n     */\n    updateFromPipeline(renderer, pipeline) {\n        this.encoding = renderer.outputEncoding;\n        pipeline.cameraFrameUploadGL();\n        const texture = pipeline.cameraFrameTextureGL();\n        if (!texture)\n            return;\n        // Update the underlying WebGL texture of the ThreeJS texture object\n        // to the one provided by the Zappar library\n        const properties = renderer.properties.get(this);\n        // eslint-disable-next-line no-underscore-dangle\n        properties.__webglTexture = texture;\n        // eslint-disable-next-line no-underscore-dangle\n        properties.__webglInit = true;\n        // The Zappar library provides a 4x4 UV matrix to display the camera\n        // texture on a fullscreen quad with 0,0 -> 1,1 UV coordinates\n        const view = new three_1.THREE.Matrix4();\n        view.fromArray(pipeline.cameraFrameTextureMatrix(renderer.domElement.width, renderer.domElement.height, this.MirrorMode === camera_1.CameraMirrorMode.Poses));\n        // ThreeJS's Texture object uses a 3x3 matrix, so convert from our 4x4 matrix\n        const textureMatrix3 = new three_1.THREE.Matrix3();\n        textureMatrix3.setFromMatrix4(view);\n        // eslint-disable-next-line prefer-destructuring\n        textureMatrix3.elements[6] = view.elements[12];\n        // eslint-disable-next-line prefer-destructuring\n        textureMatrix3.elements[7] = view.elements[13];\n        textureMatrix3.elements[8] = 1;\n        // The typings for ThreeJS's Texture object does not include the matrix properties\n        // so we have a custom type here\n        this.matrixAutoUpdate = false;\n        this.matrix = textureMatrix3;\n    }\n}\nexports.CameraTexture = CameraTexture;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\n\n\nvar PerformanceTracer =\n/** @class */\nfunction () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if ((0, has_1.default)(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf; // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n      }\n\n      var _a = (0, utils_1.timer)(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAEA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA,gCA4CC;;AAvCCA,gEAAsBC,MAAtB,EAA2C;AACzC,QAAI,mBAAIA,MAAJ,EAAY,eAAZ,CAAJ,EAAkC;AAChC,UAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAjC;AACA,UAAMC,aAAa,GAAG,OAAOF,iBAAP,KAA6B,QAAnD;AACA,WAAKG,iBAAL,GAAyBD,aAAa,GAC1BF,iBAD0B,GAElCI,QAFJ;AAGA,WAAKH,aAAL,GAAqBC,aAAa,GAC9BF,iBAAiB,GAAG,CADU,GAE7BA,iBAFL,CANgC,CAQG;AACpC,KATD,MASO;AACL,WAAKG,iBAAL,GAAyB,CAAzB;AACA,WAAKF,aAAL,GAAqBI,+BAAsBJ,aAA3C;AACD;;AAED,SAAKK,eAAL,GAAuB,CAAC,CAAxB;AACD,GAhBD;;AAkBAR,qDAAmCS,SAAnC,EAAsDC,SAAtD,EAAwE;AACtE;AACA;AACA,QAAI,KAAKP,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,WAAKK,eAAL;AACA,UAAMG,MAAM,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,eAAL,GAAuB,CAAjC,EAAoCK,IAApC,CAAyC,IAAzC,CAAf;;AACA,UAAI,KAAKL,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;AACjDS,eAAO,CAACC,GAAR,CAAY,UAAGJ,MAAH,EAAS,OAAT,EAASK,MAAT,CAAiBP,SAAjB,EAA0B,GAA1B,CAAZ;AACD;;AACK,eAAkB,mBAAMC,SAAN,CAAlB;AAAA,UAAEO,IAAI,UAAN;AAAA,UAAQC,KAAK,WAAb;AACN;;;AACA,UAAMC,WAAW,GAAGF,IAAI,GAAG,EAAP,GAAYH,OAAO,CAACM,IAApB,GAA2BN,OAAO,CAACC,GAAvD;;AACA,UAAI,KAAKP,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;AACjDc,mBAAW,CAAC,UAAGR,MAAH,EAAS,OAAT,EAASK,MAAT,CAAiBP,SAAjB,EAA0B,UAA1B,EAA0BO,MAA1B,CAAqCC,IAArC,EAAyC,IAAzC,CAAD,CAAX;AACD;;AACD,WAAKT,eAAL;AACA,aAAOU,KAAP;AACD,KAdD,MAcO;AACL,aAAOR,SAAS,EAAhB;AACD;AACF,GApBD;;AAqBF;AAAC,CA5CD;;AAAaW","names":["PerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","parser_1","traceInitIndent","phaseDesc","phaseImpl","indent","Array","join","console","log","concat","time","value","traceMethod","warn","exports"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
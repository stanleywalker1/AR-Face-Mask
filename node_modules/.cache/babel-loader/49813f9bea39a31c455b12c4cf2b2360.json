{"ast":null,"code":"\"use strict\";\n/* istanbul ignore next */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\n\nvar rest_1 = require(\"./rest\");\n\nvar first_1 = __importDefault(require(\"lodash/first\"));\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\n\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\n\nvar last_1 = __importDefault(require(\"lodash/last\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar first_2 = require(\"./first\");\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar AbstractNextPossibleTokensWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this)\n    /* istanbul ignore next */\n    || this;\n\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    } // immutable for the win\n\n\n    this.ruleStack = (0, clone_1.default)(this.path.ruleStack).reverse(); // intelij bug requires assertion\n\n    this.occurrenceStack = (0, clone_1.default)(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    } // stop scanning once we found the path\n\n\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if ((0, isEmpty_1.default)(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n\n  return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\n\nvar NextAfterTokenWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextAfterTokenWalker, _super);\n\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path)\n    /* istanbul ignore next */\n    || this;\n\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new gast_1.Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = (0, first_2.first)(restProd);\n      this.found = true;\n    }\n  };\n\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\n\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\n\nvar AbstractNextTerminalAfterProductionWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this)\n    /* istanbul ignore next */\n    || this;\n\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n\n  return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\n\nvar NextTerminalAfterManyWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n\n      if (firstAfterMany instanceof gast_1.Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\n\nvar NextTerminalAfterManySepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n\n      if (firstAfterManySep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\n\nvar NextTerminalAfterAtLeastOneWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n\n      if (firstAfterAtLeastOne instanceof gast_1.Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker; // TODO: reduce code duplication in the AfterWalkers\n\nvar NextTerminalAfterAtLeastOneSepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n\n      if (firstAfterfirstAfterAtLeastOneSep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\n\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  } // avoid side effects\n\n\n  currPath = (0, clone_1.default)(currPath);\n  var result = [];\n  var i = 0; // TODO: avoid inner funcs\n\n  function remainingPathWith(nextDef) {\n    return nextDef.concat((0, drop_1.default)(targetDef, i + 1));\n  } // TODO: avoid inner funcs\n\n\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n\n\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n\n    if (prod instanceof gast_1.Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      var newDef = [new gast_1.Alternative({\n        definition: prod.definition\n      }), new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Repetition) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Alternation) {\n      (0, forEach_1.default)(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if ((0, isEmpty_1.default)(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof gast_1.Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n\n  result.push({\n    partialPath: currPath,\n    suffixDef: (0, drop_1.default)(targetDef, i)\n  });\n  return result;\n}\n\nexports.possiblePathsFrom = possiblePathsFrom;\n\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\"; // to avoid creating a new Array each time.\n\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n\n  while (!(0, isEmpty_1.default)(possiblePaths)) {\n    var currPath = possiblePaths.pop(); // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && (0, last_1.default)(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n\n      continue;\n    }\n\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack; // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n\n    if ((0, isEmpty_1.default)(currDef)) {\n      continue;\n    }\n\n    var prod = currDef[0];\n    /* istanbul ignore else */\n\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: (0, dropRight_1.default)(currRuleStack),\n        occurrenceStack: (0, dropRight_1.default)(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: (0, drop_1.default)(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        } // end of the line\n\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof gast_1.NonTerminal) {\n      var newRuleStack = (0, clone_1.default)(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0, drop_1.default)(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE); // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n\n      var nthRepetition = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat((0, drop_1.default)(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof gast_1.Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof gast_1.Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n\n  return result;\n}\n\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\n\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = (0, clone_1.default)(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = (0, clone_1.default)(currOccurrenceStack); // top rule is always assumed to have been called with occurrence index 1\n\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"mappings":"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","names":["__extends","topProd","path","_super","_this","AbstractNextPossibleTokensWalker","found","ruleStack","name","Error","reverse","occurrenceStack","pop","updateExpectedNext","walk","possibleTokTypes","prod","prevRest","call","refProd","currRest","referencedRule","nextProductionName","idx","nextProductionOccurrence","fullRest","concat","isAtEndOfPath","rest_1","exports","nextTerminalName","lastTok","nextTerminalOccurrence","lastTokOccurrence","NextAfterTokenWalker","terminal","terminalType","restProd","gast_1","definition","topRule","occurrence","token","undefined","isEndOfRule","AbstractNextTerminalAfterProductionWalker","result","NextTerminalAfterManyWalker","manyProd","firstAfterMany","walkMany","NextTerminalAfterManySepWalker","manySepProd","firstAfterManySep","walkManySep","NextTerminalAfterAtLeastOneWalker","atLeastOneProd","firstAfterAtLeastOne","walkAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","walkAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","currPath","i","remainingPathWith","nextDef","getAlternativesForProd","alternatives","length","newDef","separator","currAlt","push","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokenVector","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currIdx","currRuleStack","currOccurrenceStack","nextPath","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","nonTerminalName","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack"],"sourceRoot":"","sources":["../../../../src/parse/grammar/interpreter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
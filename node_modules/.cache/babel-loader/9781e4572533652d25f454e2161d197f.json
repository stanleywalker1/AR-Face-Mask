{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageAnchorGroup = void 0;\n\nconst three_1 = require(\"../three\");\n\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group that attaches content to a known image as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/image-tracking/\n */\n\n\nclass ImageAnchorGroup extends three_1.THREE.Group {\n  /**\n   * Constructs a new ImageAnchorGroup.\n   * @param camera - A ZapparThree.Camera.\n   * @param imageTracker - The image tracker which will be used.\n   * @param anchorId - Specify this to limit the group to tracking an anchor with the provided ID.\n   */\n  constructor(camera, imageTracker, anchorId) {\n    super();\n    this.camera = camera;\n    this.imageTracker = imageTracker;\n    this.anchorId = anchorId;\n    /**\n     * @ignore\n     */\n\n    this.isReady = false; // We'll be updating this Group's matrix ourselves from the Zappar library\n\n    this.matrixAutoUpdate = false;\n  }\n\n  updateMatrixWorld(force) {\n    if (!this.currentAnchor || !this.imageTracker.visible.has(this.currentAnchor)) {\n      // No current anchor, or current anchor isn't visible\n      if (this.anchorId) {\n        this.currentAnchor = this.imageTracker.anchors.get(this.anchorId);\n      } else {\n        this.currentAnchor = this.imageTracker.visible.values().next().value;\n      }\n    }\n\n    if (this.currentAnchor) {\n      this.matrix.fromArray(this.currentAnchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses));\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n    }\n\n    super.updateMatrixWorld(force);\n  }\n\n}\n\nexports.ImageAnchorGroup = ImageAnchorGroup;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/trackers/imageanchorgroup.js"],"names":["Object","defineProperty","exports","value","ImageAnchorGroup","three_1","require","camera_1","THREE","Group","constructor","camera","imageTracker","anchorId","isReady","matrixAutoUpdate","updateMatrixWorld","force","currentAnchor","visible","has","anchors","get","values","next","matrix","fromArray","pose","rawPose","currentMirrorMode","CameraMirrorMode","Poses","decompose","position","quaternion","scale"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;AACA;AACA;AACA;AACA;;;AACA,MAAMF,gBAAN,SAA+BC,OAAO,CAACG,KAAR,CAAcC,KAA7C,CAAmD;AAC/C;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuBC,QAAvB,EAAiC;AACxC;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA;AACR;AACA;;AACQ,SAAKC,OAAL,GAAe,KAAf,CARwC,CASxC;;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACH;;AACDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrB,QAAI,CAAC,KAAKC,aAAN,IAAuB,CAAC,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,GAA1B,CAA8B,KAAKF,aAAnC,CAA5B,EAA+E;AAC3E;AACA,UAAI,KAAKL,QAAT,EAAmB;AACf,aAAKK,aAAL,GAAqB,KAAKN,YAAL,CAAkBS,OAAlB,CAA0BC,GAA1B,CAA8B,KAAKT,QAAnC,CAArB;AACH,OAFD,MAGK;AACD,aAAKK,aAAL,GAAqB,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BI,MAA1B,GAAmCC,IAAnC,GAA0CrB,KAA/D;AACH;AACJ;;AACD,QAAI,KAAKe,aAAT,EAAwB;AACpB,WAAKO,MAAL,CAAYC,SAAZ,CAAsB,KAAKR,aAAL,CAAmBS,IAAnB,CAAwB,KAAKhB,MAAL,CAAYiB,OAApC,EAA6C,KAAKjB,MAAL,CAAYkB,iBAAZ,KAAkCtB,QAAQ,CAACuB,gBAAT,CAA0BC,KAAzG,CAAtB;AACA,WAAKN,MAAL,CAAYO,SAAZ,CAAsB,KAAKC,QAA3B,EAAqC,KAAKC,UAA1C,EAAsD,KAAKC,KAA3D;AACH;;AACD,UAAMnB,iBAAN,CAAwBC,KAAxB;AACH;;AAlC8C;;AAoCnDf,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageAnchorGroup = void 0;\nconst three_1 = require(\"../three\");\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group that attaches content to a known image as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/image-tracking/\n */\nclass ImageAnchorGroup extends three_1.THREE.Group {\n    /**\n     * Constructs a new ImageAnchorGroup.\n     * @param camera - A ZapparThree.Camera.\n     * @param imageTracker - The image tracker which will be used.\n     * @param anchorId - Specify this to limit the group to tracking an anchor with the provided ID.\n     */\n    constructor(camera, imageTracker, anchorId) {\n        super();\n        this.camera = camera;\n        this.imageTracker = imageTracker;\n        this.anchorId = anchorId;\n        /**\n         * @ignore\n         */\n        this.isReady = false;\n        // We'll be updating this Group's matrix ourselves from the Zappar library\n        this.matrixAutoUpdate = false;\n    }\n    updateMatrixWorld(force) {\n        if (!this.currentAnchor || !this.imageTracker.visible.has(this.currentAnchor)) {\n            // No current anchor, or current anchor isn't visible\n            if (this.anchorId) {\n                this.currentAnchor = this.imageTracker.anchors.get(this.anchorId);\n            }\n            else {\n                this.currentAnchor = this.imageTracker.visible.values().next().value;\n            }\n        }\n        if (this.currentAnchor) {\n            this.matrix.fromArray(this.currentAnchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses));\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(force);\n    }\n}\nexports.ImageAnchorGroup = ImageAnchorGroup;\n"]},"metadata":{},"sourceType":"script"}
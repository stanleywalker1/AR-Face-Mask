{"ast":null,"code":"import { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera(_ref) {\n  let {\n    children,\n    fog,\n    frames = Infinity,\n    resolution = 256,\n    near = 1,\n    far = 1000,\n    ...props\n  } = _ref;\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState();\n  const scene = useThree(_ref2 => {\n    let {\n      scene\n    } = _ref2;\n    return scene;\n  });\n  const gl = useThree(_ref3 => {\n    let {\n      gl\n    } = _ref3;\n    return gl;\n  });\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  let count = 0;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.traverse(obj => obj.visible = false);\n      const originalFog = scene.fog;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      ref.current.traverse(obj => obj.visible = true);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@react-three/drei/core/CubeCamera.js"],"names":["WebGLCubeRenderTarget","HalfFloatType","React","useThree","useFrame","CubeCamera","children","fog","frames","Infinity","resolution","near","far","props","ref","useRef","camera","setCamera","useState","scene","gl","fbo","useMemo","texture","type","count","current","traverse","obj","visible","originalFog","update","createElement","args"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,aAAhC,QAAqD,OAArD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;;AAEA,SAASC,UAAT,OAQG;AAAA,MARiB;AAClBC,IAAAA,QADkB;AAElBC,IAAAA,GAFkB;AAGlBC,IAAAA,MAAM,GAAGC,QAHS;AAIlBC,IAAAA,UAAU,GAAG,GAJK;AAKlBC,IAAAA,IAAI,GAAG,CALW;AAMlBC,IAAAA,GAAG,GAAG,IANY;AAOlB,OAAGC;AAPe,GAQjB;AACD,QAAMC,GAAG,GAAGZ,KAAK,CAACa,MAAN,EAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,KAAK,CAACgB,QAAN,EAA5B;AACA,QAAMC,KAAK,GAAGhB,QAAQ,CAAC;AAAA,QAAC;AACtBgB,MAAAA;AADsB,KAAD;AAAA,WAEjBA,KAFiB;AAAA,GAAD,CAAtB;AAGA,QAAMC,EAAE,GAAGjB,QAAQ,CAAC;AAAA,QAAC;AACnBiB,MAAAA;AADmB,KAAD;AAAA,WAEdA,EAFc;AAAA,GAAD,CAAnB;AAGA,QAAMC,GAAG,GAAGnB,KAAK,CAACoB,OAAN,CAAc,MAAM;AAC9B,UAAMD,GAAG,GAAG,IAAIrB,qBAAJ,CAA0BU,UAA1B,CAAZ;AACAW,IAAAA,GAAG,CAACE,OAAJ,CAAYC,IAAZ,GAAmBvB,aAAnB;AACA,WAAOoB,GAAP;AACD,GAJW,EAIT,CAACX,UAAD,CAJS,CAAZ;AAKA,MAAIe,KAAK,GAAG,CAAZ;AACArB,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAIY,MAAM,IAAIF,GAAG,CAACY,OAAd,KAA0BlB,MAAM,KAAKC,QAAX,IAAuBgB,KAAK,GAAGjB,MAAzD,CAAJ,EAAsE;AACpEM,MAAAA,GAAG,CAACY,OAAJ,CAAYC,QAAZ,CAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,KAA1C;AACA,YAAMC,WAAW,GAAGX,KAAK,CAACZ,GAA1B;AACAY,MAAAA,KAAK,CAACZ,GAAN,GAAYA,GAAG,IAAIuB,WAAnB;AACAd,MAAAA,MAAM,CAACe,MAAP,CAAcX,EAAd,EAAkBD,KAAlB;AACAA,MAAAA,KAAK,CAACZ,GAAN,GAAYuB,WAAZ;AACAhB,MAAAA,GAAG,CAACY,OAAJ,CAAYC,QAAZ,CAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,IAA1C;AACAJ,MAAAA,KAAK;AACN;AACF,GAVO,CAAR;AAWA,SAAO,aAAavB,KAAK,CAAC8B,aAAN,CAAoB,OAApB,EAA6BnB,KAA7B,EAAoC,aAAaX,KAAK,CAAC8B,aAAN,CAAoB,YAApB,EAAkC;AACrGlB,IAAAA,GAAG,EAAEG,SADgG;AAErGgB,IAAAA,IAAI,EAAE,CAACtB,IAAD,EAAOC,GAAP,EAAYS,GAAZ;AAF+F,GAAlC,CAAjD,EAGhB,aAAanB,KAAK,CAAC8B,aAAN,CAAoB,OAApB,EAA6B;AAC5ClB,IAAAA,GAAG,EAAEA;AADuC,GAA7B,EAEdR,QAAQ,CAACe,GAAG,CAACE,OAAL,CAFM,CAHG,CAApB;AAMD;;AAED,SAASlB,UAAT","sourcesContent":["import { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 1,\n  far = 1000,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState();\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  let count = 0;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.traverse(obj => obj.visible = false);\n      const originalFog = scene.fog;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      ref.current.traverse(obj => obj.visible = true);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };\n"]},"metadata":{},"sourceType":"module"}
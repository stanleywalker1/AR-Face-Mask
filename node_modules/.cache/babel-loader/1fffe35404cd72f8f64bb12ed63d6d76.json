{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceMesh = void 0;\n\nconst zappar_1 = require(\"./zappar\");\n/**\n * A mesh that fits to the user's face and deforms as the user's expression changes.\n * @see https://docs.zap.works/universal-ar/javascript/face-tracking/\n */\n\n\nclass FaceMesh {\n  /**\n   * Constructs a new FaceMesh.\n   * @see https://docs.zap.works/universal-ar/javascript/face-tracking/\n  */\n  constructor() {\n    this._z = zappar_1.z();\n    this._impl = this._z.face_mesh_create();\n  }\n  /**\n   * Destroys the face mesh.\n   */\n\n\n  destroy() {\n    this._z.face_mesh_destroy(this._impl);\n  }\n  /**\n   * Loads the data for a face mesh.\n   * @param src - A URL or ArrayBuffer of the source mesh data.\n   * @param fillMouth - If true, fills this face feature with polygons.\n   * @param fillEyeLeft - If true, fills this face feature with polygons.\n   * @param fillEyeRight - If true, fills this face feature with polygons.\n   * @param fillNeck - If true, fills this face feature with polygons.\n   * @returns A promise that's resolved once the data is loaded.\n   */\n\n\n  load(src, fillMouth, fillEyeLeft, fillEyeRight, fillNeck) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!src) {\n        this.loadDefault();\n        return;\n      } else if (typeof src === \"string\") {\n        src = yield (yield fetch(src)).arrayBuffer();\n      }\n\n      this._z.face_mesh_load_from_memory(this._impl, src, fillMouth || false, fillEyeLeft || false, fillEyeRight || false, fillNeck || false);\n    });\n  }\n  /**\n    * Loads the default face mesh data.\n    * @returns A promise that's resolved once the data is loaded.\n    */\n\n\n  loadDefault() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._z.face_mesh_load_default(this._impl);\n    });\n  }\n  /**\n    * Loads the default face mesh.\n    * @param fillMouth - If true, fills this face feature with polygons.\n    * @param fillEyeLeft - If true, fills this face feature with polygons.\n    * @param fillEyeRight - If true, fills this face feature with polygons.\n    * @returns A promise that's resolved once the data is loaded.\n    */\n\n\n  loadDefaultFace(fillMouth, fillEyeLeft, fillEyeRight) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._z.face_mesh_load_default_face(this._impl, fillMouth || false, fillEyeLeft || false, fillEyeRight || false);\n    });\n  }\n  /**\n    * The full head simplified mesh covers the whole of the user's head, including some neck.\n    * It's ideal for drawing into the depth buffer in order to mask out the back of 3D models placed on the user's head.\n    * @param fillMouth - If true, fills this face feature with polygons.\n    * @param fillEyeLeft - If true, fills this face feature with polygons.\n    * @param fillEyeRight - If true, fills this face feature with polygons.\n    * @param fillNeck - If true, fills this face feature with polygons.\n    * @returns A promise that's resolved once the data is loaded.\n    */\n\n\n  loadDefaultFullHeadSimplified(fillMouth, fillEyeLeft, fillEyeRight, fillNeck) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._z.face_mesh_load_default_full_head_simplified(this._impl, fillMouth || false, fillEyeLeft || false, fillEyeRight || false, fillNeck || false);\n    });\n  }\n  /**\n    * Update the face mesh directly from a [[FaceAnchor]].\n    * @param f - The face anchor.\n    * @param mirror - Pass `true` to mirror the location in the X-axis.\n    */\n\n\n  updateFromFaceAnchor(f, mirror) {\n    this._z.face_mesh_update(this._impl, f.identity, f.expression, mirror || false);\n  }\n  /**\n    * Updates the face mesh directly from a identity and expression coefficients.\n    * @param identity - The identity coefficients.\n    * @param expression - The expression coefficients.\n    * @param mirror - Pass `true` to mirror the location in the X-axis.\n   */\n\n\n  updateFromIdentityExpression(identity, expression, mirror) {\n    this._z.face_mesh_update(this._impl, identity, expression, mirror || false);\n  }\n  /**\n   *\n   * @returns The vertices of the mesh.\n   */\n\n\n  get vertices() {\n    return this._z.face_mesh_vertices(this._impl);\n  }\n  /**\n   * @returns The indices of the mesh.\n   */\n\n\n  get indices() {\n    return this._z.face_mesh_indices(this._impl);\n  }\n  /**\n   * @returns The UVs of the mesh.\n   */\n\n\n  get uvs() {\n    return this._z.face_mesh_uvs(this._impl);\n  }\n  /**\n   * @returns The normals of the mesh.\n   */\n\n\n  get normals() {\n    return this._z.face_mesh_normals(this._impl);\n  }\n  /**\n   * @ignore\n  */\n\n\n  _getImpl() {\n    return this._impl;\n  }\n\n}\n\nexports.FaceMesh = FaceMesh;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar/lib/facemesh.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","FaceMesh","zappar_1","require","constructor","_z","z","_impl","face_mesh_create","destroy","face_mesh_destroy","load","src","fillMouth","fillEyeLeft","fillEyeRight","fillNeck","loadDefault","fetch","arrayBuffer","face_mesh_load_from_memory","face_mesh_load_default","loadDefaultFace","face_mesh_load_default_face","loadDefaultFullHeadSimplified","face_mesh_load_default_full_head_simplified","updateFromFaceAnchor","f","mirror","face_mesh_update","identity","expression","updateFromIdentityExpression","vertices","face_mesh_vertices","indices","face_mesh_indices","uvs","face_mesh_uvs","normals","face_mesh_normals","_getImpl"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FaceMesh = void 0;\nconst zappar_1 = require(\"./zappar\");\n/**\n * A mesh that fits to the user's face and deforms as the user's expression changes.\n * @see https://docs.zap.works/universal-ar/javascript/face-tracking/\n */\nclass FaceMesh {\n    /**\n     * Constructs a new FaceMesh.\n     * @see https://docs.zap.works/universal-ar/javascript/face-tracking/\n    */\n    constructor() {\n        this._z = zappar_1.z();\n        this._impl = this._z.face_mesh_create();\n    }\n    /**\n     * Destroys the face mesh.\n     */\n    destroy() {\n        this._z.face_mesh_destroy(this._impl);\n    }\n    /**\n     * Loads the data for a face mesh.\n     * @param src - A URL or ArrayBuffer of the source mesh data.\n     * @param fillMouth - If true, fills this face feature with polygons.\n     * @param fillEyeLeft - If true, fills this face feature with polygons.\n     * @param fillEyeRight - If true, fills this face feature with polygons.\n     * @param fillNeck - If true, fills this face feature with polygons.\n     * @returns A promise that's resolved once the data is loaded.\n     */\n    load(src, fillMouth, fillEyeLeft, fillEyeRight, fillNeck) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!src) {\n                this.loadDefault();\n                return;\n            }\n            else if (typeof src === \"string\") {\n                src = yield (yield fetch(src)).arrayBuffer();\n            }\n            this._z.face_mesh_load_from_memory(this._impl, src, fillMouth || false, fillEyeLeft || false, fillEyeRight || false, fillNeck || false);\n        });\n    }\n    /**\n      * Loads the default face mesh data.\n      * @returns A promise that's resolved once the data is loaded.\n      */\n    loadDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._z.face_mesh_load_default(this._impl);\n        });\n    }\n    /**\n      * Loads the default face mesh.\n      * @param fillMouth - If true, fills this face feature with polygons.\n      * @param fillEyeLeft - If true, fills this face feature with polygons.\n      * @param fillEyeRight - If true, fills this face feature with polygons.\n      * @returns A promise that's resolved once the data is loaded.\n      */\n    loadDefaultFace(fillMouth, fillEyeLeft, fillEyeRight) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._z.face_mesh_load_default_face(this._impl, fillMouth || false, fillEyeLeft || false, fillEyeRight || false);\n        });\n    }\n    /**\n      * The full head simplified mesh covers the whole of the user's head, including some neck.\n      * It's ideal for drawing into the depth buffer in order to mask out the back of 3D models placed on the user's head.\n      * @param fillMouth - If true, fills this face feature with polygons.\n      * @param fillEyeLeft - If true, fills this face feature with polygons.\n      * @param fillEyeRight - If true, fills this face feature with polygons.\n      * @param fillNeck - If true, fills this face feature with polygons.\n      * @returns A promise that's resolved once the data is loaded.\n      */\n    loadDefaultFullHeadSimplified(fillMouth, fillEyeLeft, fillEyeRight, fillNeck) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._z.face_mesh_load_default_full_head_simplified(this._impl, fillMouth || false, fillEyeLeft || false, fillEyeRight || false, fillNeck || false);\n        });\n    }\n    /**\n      * Update the face mesh directly from a [[FaceAnchor]].\n      * @param f - The face anchor.\n      * @param mirror - Pass `true` to mirror the location in the X-axis.\n      */\n    updateFromFaceAnchor(f, mirror) {\n        this._z.face_mesh_update(this._impl, f.identity, f.expression, mirror || false);\n    }\n    /**\n      * Updates the face mesh directly from a identity and expression coefficients.\n      * @param identity - The identity coefficients.\n      * @param expression - The expression coefficients.\n      * @param mirror - Pass `true` to mirror the location in the X-axis.\n     */\n    updateFromIdentityExpression(identity, expression, mirror) {\n        this._z.face_mesh_update(this._impl, identity, expression, mirror || false);\n    }\n    /**\n     *\n     * @returns The vertices of the mesh.\n     */\n    get vertices() {\n        return this._z.face_mesh_vertices(this._impl);\n    }\n    /**\n     * @returns The indices of the mesh.\n     */\n    get indices() {\n        return this._z.face_mesh_indices(this._impl);\n    }\n    /**\n     * @returns The UVs of the mesh.\n     */\n    get uvs() {\n        return this._z.face_mesh_uvs(this._impl);\n    }\n    /**\n     * @returns The normals of the mesh.\n     */\n    get normals() {\n        return this._z.face_mesh_normals(this._impl);\n    }\n    /**\n     * @ignore\n    */\n    _getImpl() {\n        return this._impl;\n    }\n}\nexports.FaceMesh = FaceMesh;\n"]},"metadata":{},"sourceType":"script"}
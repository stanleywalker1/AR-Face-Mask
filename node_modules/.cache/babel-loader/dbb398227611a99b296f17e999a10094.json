{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HeadMaskMesh = void 0;\n\nconst Zappar = require(\"@zappar/zappar\");\n\nconst three_1 = require(\"../three\");\n\nconst facebuffergeometry_1 = require(\"../geometry/facebuffergeometry\");\n/**\n * A THREE.Mesh that fits the user's head and fills the depth buffer,\n * ensuring that the camera image of the head shows instead of any 3D elements behind it in the scene.\n *\n * Works using a full-head ZapparThree.FaceMesh with the mouth, eyes and neck filled in.\n * Its renderOrder is set to Number.MIN_SAFE_INTEGER to ensure it's rendered before any other objects in the scene,\n * and its material has the colorWrite property set to false so it fills the depth buffer but not the color buffer.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\n\n\nclass HeadMaskMesh extends three_1.THREE.Mesh {\n  /**\n   * Constructs a new head mask mesh.\n   * @param onLoad - Callback function which runs when the mesh is loaded.\n   * @param onError - Callback which is called if there's an error loading the mesh.\n   */\n  constructor(onLoad, onError) {\n    super();\n    this.onLoad = onLoad;\n    this.onError = onError;\n    this.faceMesh = new Zappar.FaceMesh();\n    this.faceBufferGeometry = new facebuffergeometry_1.FaceBufferGeometry(this.faceMesh);\n    this.geometry = this.faceBufferGeometry;\n    this.material = new three_1.THREE.MeshBasicMaterial({\n      colorWrite: false\n    });\n    this.faceMesh.loadDefaultFullHeadSimplified(true, true, true, true).then(() => {\n      var _a;\n\n      return (_a = this.onLoad) === null || _a === void 0 ? void 0 : _a.call(this);\n    }).catch(() => {\n      var _a;\n\n      return (_a = this.onError) === null || _a === void 0 ? void 0 : _a.call(this);\n    });\n    this.renderOrder = Number.MIN_SAFE_INTEGER;\n  }\n  /**\n   * Updates pose directly from the [[FaceAnchorGroup]] anchor.\n   * @param f - The anchor to derive the expression and identity from.\n   */\n\n\n  updateFromFaceAnchorGroup(f) {\n    this.faceBufferGeometry.updateFromFaceAnchorGroup(f);\n  }\n  /**\n   * Updates pose directly from the expression and identity in a [[FaceAnchor]].\n   * @param f - The anchor to derive the expression and identity from.\n   */\n\n\n  updateFromFaceAnchor(f) {\n    this.faceBufferGeometry.updateFromFaceAnchor(f);\n  }\n  /**\n   * Updates pose directly from identity and expression coefficients.\n   * @param identity  - The identity coefficients.\n   * @param expression - The expression coefficients.\n   */\n\n\n  updateFromIdentityExpression(identity, expression) {\n    this.faceBufferGeometry.updateFromIdentityExpression(identity, expression);\n  }\n  /**\n   * Destroys the face mesh and disposes of resources.\n   */\n\n\n  dispose() {\n    this.faceMesh.destroy();\n    this.faceBufferGeometry.dispose();\n  }\n\n}\n\nexports.HeadMaskMesh = HeadMaskMesh;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/mesh/headmaskmesh.js"],"names":["Object","defineProperty","exports","value","HeadMaskMesh","Zappar","require","three_1","facebuffergeometry_1","THREE","Mesh","constructor","onLoad","onError","faceMesh","FaceMesh","faceBufferGeometry","FaceBufferGeometry","geometry","material","MeshBasicMaterial","colorWrite","loadDefaultFullHeadSimplified","then","_a","call","catch","renderOrder","Number","MIN_SAFE_INTEGER","updateFromFaceAnchorGroup","f","updateFromFaceAnchor","updateFromIdentityExpression","identity","expression","dispose","destroy"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,gCAAD,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,YAAN,SAA2BG,OAAO,CAACE,KAAR,CAAcC,IAAzC,CAA8C;AAC1C;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AACzB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgB,IAAIT,MAAM,CAACU,QAAX,EAAhB;AACA,SAAKC,kBAAL,GAA0B,IAAIR,oBAAoB,CAACS,kBAAzB,CAA4C,KAAKH,QAAjD,CAA1B;AACA,SAAKI,QAAL,GAAgB,KAAKF,kBAArB;AACA,SAAKG,QAAL,GAAgB,IAAIZ,OAAO,CAACE,KAAR,CAAcW,iBAAlB,CAAoC;AAChDC,MAAAA,UAAU,EAAE;AADoC,KAApC,CAAhB;AAGA,SAAKP,QAAL,CACKQ,6BADL,CACmC,IADnC,EACyC,IADzC,EAC+C,IAD/C,EACqD,IADrD,EAEKC,IAFL,CAEU,MAAM;AAAE,UAAIC,EAAJ;;AAAQ,aAAO,CAACA,EAAE,GAAG,KAAKZ,MAAX,MAAuB,IAAvB,IAA+BY,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACC,IAAH,CAAQ,IAAR,CAA/D;AAA+E,KAFzG,EAGKC,KAHL,CAGW,MAAM;AAAE,UAAIF,EAAJ;;AAAQ,aAAO,CAACA,EAAE,GAAG,KAAKX,OAAX,MAAwB,IAAxB,IAAgCW,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACC,IAAH,CAAQ,IAAR,CAAhE;AAAgF,KAH3G;AAIA,SAAKE,WAAL,GAAmBC,MAAM,CAACC,gBAA1B;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,yBAAyB,CAACC,CAAD,EAAI;AACzB,SAAKf,kBAAL,CAAwBc,yBAAxB,CAAkDC,CAAlD;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,oBAAoB,CAACD,CAAD,EAAI;AACpB,SAAKf,kBAAL,CAAwBgB,oBAAxB,CAA6CD,CAA7C;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,4BAA4B,CAACC,QAAD,EAAWC,UAAX,EAAuB;AAC/C,SAAKnB,kBAAL,CAAwBiB,4BAAxB,CAAqDC,QAArD,EAA+DC,UAA/D;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN,SAAKtB,QAAL,CAAcuB,OAAd;AACA,SAAKrB,kBAAL,CAAwBoB,OAAxB;AACH;;AAlDyC;;AAoD9ClC,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadMaskMesh = void 0;\nconst Zappar = require(\"@zappar/zappar\");\nconst three_1 = require(\"../three\");\nconst facebuffergeometry_1 = require(\"../geometry/facebuffergeometry\");\n/**\n * A THREE.Mesh that fits the user's head and fills the depth buffer,\n * ensuring that the camera image of the head shows instead of any 3D elements behind it in the scene.\n *\n * Works using a full-head ZapparThree.FaceMesh with the mouth, eyes and neck filled in.\n * Its renderOrder is set to Number.MIN_SAFE_INTEGER to ensure it's rendered before any other objects in the scene,\n * and its material has the colorWrite property set to false so it fills the depth buffer but not the color buffer.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\nclass HeadMaskMesh extends three_1.THREE.Mesh {\n    /**\n     * Constructs a new head mask mesh.\n     * @param onLoad - Callback function which runs when the mesh is loaded.\n     * @param onError - Callback which is called if there's an error loading the mesh.\n     */\n    constructor(onLoad, onError) {\n        super();\n        this.onLoad = onLoad;\n        this.onError = onError;\n        this.faceMesh = new Zappar.FaceMesh();\n        this.faceBufferGeometry = new facebuffergeometry_1.FaceBufferGeometry(this.faceMesh);\n        this.geometry = this.faceBufferGeometry;\n        this.material = new three_1.THREE.MeshBasicMaterial({\n            colorWrite: false,\n        });\n        this.faceMesh\n            .loadDefaultFullHeadSimplified(true, true, true, true)\n            .then(() => { var _a; return (_a = this.onLoad) === null || _a === void 0 ? void 0 : _a.call(this); })\n            .catch(() => { var _a; return (_a = this.onError) === null || _a === void 0 ? void 0 : _a.call(this); });\n        this.renderOrder = Number.MIN_SAFE_INTEGER;\n    }\n    /**\n     * Updates pose directly from the [[FaceAnchorGroup]] anchor.\n     * @param f - The anchor to derive the expression and identity from.\n     */\n    updateFromFaceAnchorGroup(f) {\n        this.faceBufferGeometry.updateFromFaceAnchorGroup(f);\n    }\n    /**\n     * Updates pose directly from the expression and identity in a [[FaceAnchor]].\n     * @param f - The anchor to derive the expression and identity from.\n     */\n    updateFromFaceAnchor(f) {\n        this.faceBufferGeometry.updateFromFaceAnchor(f);\n    }\n    /**\n     * Updates pose directly from identity and expression coefficients.\n     * @param identity  - The identity coefficients.\n     * @param expression - The expression coefficients.\n     */\n    updateFromIdentityExpression(identity, expression) {\n        this.faceBufferGeometry.updateFromIdentityExpression(identity, expression);\n    }\n    /**\n     * Destroys the face mesh and disposes of resources.\n     */\n    dispose() {\n        this.faceMesh.destroy();\n        this.faceBufferGeometry.dispose();\n    }\n}\nexports.HeadMaskMesh = HeadMaskMesh;\n"]},"metadata":{},"sourceType":"script"}
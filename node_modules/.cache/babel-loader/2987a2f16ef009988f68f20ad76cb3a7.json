{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zappar_server = void 0;\n\nconst serializer_1 = require(\"../serializer\");\n\nconst deserializer_1 = require(\"../deserializer\");\n\nclass zappar_server {\n  constructor(_impl, _sender) {\n    this._impl = _impl;\n    this._sender = _sender;\n    this._deserializer = new deserializer_1.MessageDeserializer();\n    this.serializersByPipelineId = new Map();\n    this._pipeline_id_by_pipeline_id = new Map();\n    this._pipeline_by_instance = new Map();\n    this._pipeline_id_by_camera_source_id = new Map();\n    this._camera_source_by_instance = new Map();\n    this._pipeline_id_by_image_tracker_id = new Map();\n    this._image_tracker_by_instance = new Map();\n    this._pipeline_id_by_face_tracker_id = new Map();\n    this._face_tracker_by_instance = new Map();\n    this._pipeline_id_by_face_mesh_id = new Map();\n    this._face_mesh_by_instance = new Map();\n    this._pipeline_id_by_face_landmark_id = new Map();\n    this._face_landmark_by_instance = new Map();\n    this._pipeline_id_by_barcode_finder_id = new Map();\n    this._barcode_finder_by_instance = new Map();\n    this._pipeline_id_by_instant_world_tracker_id = new Map();\n    this._instant_world_tracker_by_instance = new Map();\n  }\n\n  processBuffer(b) {\n    this._deserializer.setData(b);\n\n    this._deserializer.forMessages((messageId, msg) => {\n      switch (messageId) {\n        case 33:\n          {\n            this._impl.log_level_set(msg.logLevel());\n\n            break;\n          }\n\n        case 30:\n          {\n            this._impl.analytics_project_id_set(msg.string());\n\n            break;\n          }\n\n        case 26:\n          {\n            let clientId = msg.type();\n\n            let handle = this._impl.pipeline_create();\n\n            this._pipeline_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_pipeline_id.set(clientId, clientId);\n\n            this.serializersByPipelineId.set(clientId, new serializer_1.MessageSerializer(ab => {\n              this._sender(clientId, ab);\n            }));\n            break;\n          }\n\n        case 27:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_destroy(obj);\n\n            this._pipeline_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 9:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_frame_update(obj);\n\n            break;\n          }\n\n        case 8:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_camera_frame_submit(obj, msg.dataWithLength(), msg.int(), msg.int(), msg.int(), msg.matrix4x4());\n\n            break;\n          }\n\n        case 10:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_motion_accelerometer_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n\n            break;\n          }\n\n        case 11:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_motion_rotation_rate_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n\n            break;\n          }\n\n        case 12:\n          {\n            let clientId = msg.type();\n\n            let obj = this._pipeline_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.pipeline_motion_attitude_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n\n            break;\n          }\n\n        case 28:\n          {\n            let clientId = msg.type();\n            let arg_pipeline_id = msg.type();\n\n            let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n\n            let arg_device_id = msg.string();\n\n            let handle = this._impl.camera_source_create(arg_pipeline, arg_device_id);\n\n            this._camera_source_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_camera_source_id.set(clientId, arg_pipeline_id);\n\n            break;\n          }\n\n        case 29:\n          {\n            let clientId = msg.type();\n\n            let obj = this._camera_source_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.camera_source_destroy(obj);\n\n            this._camera_source_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 2:\n          {\n            let clientId = msg.type();\n            let arg_pipeline_id = msg.type();\n\n            let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n\n            let handle = this._impl.image_tracker_create(arg_pipeline);\n\n            this._image_tracker_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_image_tracker_id.set(clientId, arg_pipeline_id);\n\n            break;\n          }\n\n        case 13:\n          {\n            let clientId = msg.type();\n\n            let obj = this._image_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.image_tracker_destroy(obj);\n\n            this._image_tracker_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 4:\n          {\n            let clientId = msg.type();\n\n            let obj = this._image_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.image_tracker_target_load_from_memory(obj, msg.dataWithLength());\n\n            break;\n          }\n\n        case 3:\n          {\n            let clientId = msg.type();\n\n            let obj = this._image_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.image_tracker_enabled_set(obj, msg.bool());\n\n            break;\n          }\n\n        case 19:\n          {\n            let clientId = msg.type();\n            let arg_pipeline_id = msg.type();\n\n            let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n\n            let handle = this._impl.face_tracker_create(arg_pipeline);\n\n            this._face_tracker_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_face_tracker_id.set(clientId, arg_pipeline_id);\n\n            break;\n          }\n\n        case 20:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_tracker_destroy(obj);\n\n            this._face_tracker_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 21:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_tracker_model_load_from_memory(obj, msg.dataWithLength());\n\n            break;\n          }\n\n        case 22:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_tracker_enabled_set(obj, msg.bool());\n\n            break;\n          }\n\n        case 23:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_tracker_max_faces_set(obj, msg.int());\n\n            break;\n          }\n\n        case 24:\n          {\n            let clientId = msg.type();\n\n            let handle = this._impl.face_mesh_create();\n\n            this._face_mesh_by_instance.set(clientId, handle);\n\n            break;\n          }\n\n        case 25:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_mesh_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_mesh_destroy(obj);\n\n            this._face_mesh_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 31:\n          {\n            let clientId = msg.type();\n            let arg_landmark = msg.faceLandmarkName();\n\n            let handle = this._impl.face_landmark_create(arg_landmark);\n\n            this._face_landmark_by_instance.set(clientId, handle);\n\n            break;\n          }\n\n        case 32:\n          {\n            let clientId = msg.type();\n\n            let obj = this._face_landmark_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.face_landmark_destroy(obj);\n\n            this._face_landmark_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 15:\n          {\n            let clientId = msg.type();\n            let arg_pipeline_id = msg.type();\n\n            let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n\n            let handle = this._impl.barcode_finder_create(arg_pipeline);\n\n            this._barcode_finder_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_barcode_finder_id.set(clientId, arg_pipeline_id);\n\n            break;\n          }\n\n        case 16:\n          {\n            let clientId = msg.type();\n\n            let obj = this._barcode_finder_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.barcode_finder_destroy(obj);\n\n            this._barcode_finder_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 17:\n          {\n            let clientId = msg.type();\n\n            let obj = this._barcode_finder_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.barcode_finder_enabled_set(obj, msg.bool());\n\n            break;\n          }\n\n        case 18:\n          {\n            let clientId = msg.type();\n\n            let obj = this._barcode_finder_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.barcode_finder_formats_set(obj, msg.barcodeFormat());\n\n            break;\n          }\n\n        case 5:\n          {\n            let clientId = msg.type();\n            let arg_pipeline_id = msg.type();\n\n            let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n\n            let handle = this._impl.instant_world_tracker_create(arg_pipeline);\n\n            this._instant_world_tracker_by_instance.set(clientId, handle);\n\n            this._pipeline_id_by_instant_world_tracker_id.set(clientId, arg_pipeline_id);\n\n            break;\n          }\n\n        case 14:\n          {\n            let clientId = msg.type();\n\n            let obj = this._instant_world_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.instant_world_tracker_destroy(obj);\n\n            this._instant_world_tracker_by_instance.delete(clientId);\n\n            break;\n          }\n\n        case 6:\n          {\n            let clientId = msg.type();\n\n            let obj = this._instant_world_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.instant_world_tracker_enabled_set(obj, msg.bool());\n\n            break;\n          }\n\n        case 7:\n          {\n            let clientId = msg.type();\n\n            let obj = this._instant_world_tracker_by_instance.get(clientId);\n\n            if (obj === undefined) return;\n\n            this._impl.instant_world_tracker_anchor_pose_set_from_camera_offset(obj, msg.float(), msg.float(), msg.float(), msg.instantTrackerTransformOrientation());\n\n            break;\n          }\n      }\n    });\n  }\n\n  exploreState() {\n    for (let [k, v] of this._pipeline_by_instance) {\n      let pipeline = this._pipeline_id_by_pipeline_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n      serializer.sendMessage(7, msg => {\n        msg.type(k);\n        msg.int(this._impl.pipeline_frame_number(v));\n      });\n      serializer.sendMessage(6, msg => {\n        msg.type(k);\n        msg.cameraModel(this._impl.pipeline_camera_model(v));\n      });\n      serializer.sendMessage(5, msg => {\n        msg.type(k);\n        msg.int(this._impl.pipeline_camera_frame_user_data(v));\n      });\n      serializer.sendMessage(11, msg => {\n        msg.type(k);\n        msg.matrix4x4(this._impl.pipeline_camera_frame_camera_attitude(v));\n      });\n    }\n\n    for (let [k, v] of this._camera_source_by_instance) {\n      let pipeline = this._pipeline_id_by_camera_source_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n    }\n\n    for (let [k, v] of this._image_tracker_by_instance) {\n      let pipeline = this._pipeline_id_by_image_tracker_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n      serializer.sendMessage(18, msg => {\n        msg.type(k);\n        msg.int(this._impl.image_tracker_target_loaded_version(v));\n      });\n      serializer.sendMessage(20, msg => {\n        msg.type(k);\n        msg.int(this._impl.image_tracker_target_count(v));\n      });\n      serializer.sendMessage(1, msg => {\n        msg.type(k);\n        msg.int(this._impl.image_tracker_anchor_count(v));\n      });\n\n      for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(2, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.string(this._impl.image_tracker_anchor_id(v, i));\n        });\n      }\n\n      for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(3, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.matrix4x4(this._impl.image_tracker_anchor_pose_raw(v, i));\n        });\n      }\n    }\n\n    for (let [k, v] of this._face_tracker_by_instance) {\n      let pipeline = this._pipeline_id_by_face_tracker_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n      serializer.sendMessage(17, msg => {\n        msg.type(k);\n        msg.int(this._impl.face_tracker_model_loaded_version(v));\n      });\n      serializer.sendMessage(12, msg => {\n        msg.type(k);\n        msg.int(this._impl.face_tracker_anchor_count(v));\n      });\n\n      for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(13, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.string(this._impl.face_tracker_anchor_id(v, i));\n        });\n      }\n\n      for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(14, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.matrix4x4(this._impl.face_tracker_anchor_pose_raw(v, i));\n        });\n      }\n\n      for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(15, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.identityCoefficients(this._impl.face_tracker_anchor_identity_coefficients(v, i));\n        });\n      }\n\n      for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n        serializer.sendMessage(16, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.expressionCoefficients(this._impl.face_tracker_anchor_expression_coefficients(v, i));\n        });\n      }\n    }\n\n    for (let [k, v] of this._face_mesh_by_instance) {\n      let pipeline = this._pipeline_id_by_face_mesh_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n    }\n\n    for (let [k, v] of this._face_landmark_by_instance) {\n      let pipeline = this._pipeline_id_by_face_landmark_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n    }\n\n    for (let [k, v] of this._barcode_finder_by_instance) {\n      let pipeline = this._pipeline_id_by_barcode_finder_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n      serializer.sendMessage(8, msg => {\n        msg.type(k);\n        msg.int(this._impl.barcode_finder_found_number(v));\n      });\n\n      for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n        serializer.sendMessage(9, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.string(this._impl.barcode_finder_found_text(v, i));\n        });\n      }\n\n      for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n        serializer.sendMessage(10, msg => {\n          msg.type(k);\n          msg.int(i);\n          msg.barcodeFormat(this._impl.barcode_finder_found_format(v, i));\n        });\n      }\n    }\n\n    for (let [k, v] of this._instant_world_tracker_by_instance) {\n      let pipeline = this._pipeline_id_by_instant_world_tracker_id.get(k);\n\n      if (!pipeline) continue;\n      let serializer = this.serializersByPipelineId.get(pipeline);\n      if (!serializer) continue;\n      serializer.sendMessage(4, msg => {\n        msg.type(k);\n        msg.matrix4x4(this._impl.instant_world_tracker_anchor_pose_raw(v));\n      });\n    }\n  }\n\n}\n\nexports.zappar_server = zappar_server;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-cv/lib/gen/zappar-server.js"],"names":["Object","defineProperty","exports","value","zappar_server","serializer_1","require","deserializer_1","constructor","_impl","_sender","_deserializer","MessageDeserializer","serializersByPipelineId","Map","_pipeline_id_by_pipeline_id","_pipeline_by_instance","_pipeline_id_by_camera_source_id","_camera_source_by_instance","_pipeline_id_by_image_tracker_id","_image_tracker_by_instance","_pipeline_id_by_face_tracker_id","_face_tracker_by_instance","_pipeline_id_by_face_mesh_id","_face_mesh_by_instance","_pipeline_id_by_face_landmark_id","_face_landmark_by_instance","_pipeline_id_by_barcode_finder_id","_barcode_finder_by_instance","_pipeline_id_by_instant_world_tracker_id","_instant_world_tracker_by_instance","processBuffer","b","setData","forMessages","messageId","msg","log_level_set","logLevel","analytics_project_id_set","string","clientId","type","handle","pipeline_create","set","MessageSerializer","ab","obj","get","undefined","pipeline_destroy","delete","pipeline_frame_update","pipeline_camera_frame_submit","dataWithLength","int","matrix4x4","pipeline_motion_accelerometer_submit","timestamp","float","pipeline_motion_rotation_rate_submit","pipeline_motion_attitude_submit","arg_pipeline_id","arg_pipeline","arg_device_id","camera_source_create","camera_source_destroy","image_tracker_create","image_tracker_destroy","image_tracker_target_load_from_memory","image_tracker_enabled_set","bool","face_tracker_create","face_tracker_destroy","face_tracker_model_load_from_memory","face_tracker_enabled_set","face_tracker_max_faces_set","face_mesh_create","face_mesh_destroy","arg_landmark","faceLandmarkName","face_landmark_create","face_landmark_destroy","barcode_finder_create","barcode_finder_destroy","barcode_finder_enabled_set","barcode_finder_formats_set","barcodeFormat","instant_world_tracker_create","instant_world_tracker_destroy","instant_world_tracker_enabled_set","instant_world_tracker_anchor_pose_set_from_camera_offset","instantTrackerTransformOrientation","exploreState","k","v","pipeline","serializer","sendMessage","pipeline_frame_number","cameraModel","pipeline_camera_model","pipeline_camera_frame_user_data","pipeline_camera_frame_camera_attitude","image_tracker_target_loaded_version","image_tracker_target_count","image_tracker_anchor_count","i","image_tracker_anchor_id","image_tracker_anchor_pose_raw","face_tracker_model_loaded_version","face_tracker_anchor_count","face_tracker_anchor_id","face_tracker_anchor_pose_raw","identityCoefficients","face_tracker_anchor_identity_coefficients","expressionCoefficients","face_tracker_anchor_expression_coefficients","barcode_finder_found_number","barcode_finder_found_text","barcode_finder_found_format","instant_world_tracker_anchor_pose_raw"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.zappar_server = void 0;\nconst serializer_1 = require(\"../serializer\");\nconst deserializer_1 = require(\"../deserializer\");\nclass zappar_server {\n    constructor(_impl, _sender) {\n        this._impl = _impl;\n        this._sender = _sender;\n        this._deserializer = new deserializer_1.MessageDeserializer();\n        this.serializersByPipelineId = new Map();\n        this._pipeline_id_by_pipeline_id = new Map();\n        this._pipeline_by_instance = new Map();\n        this._pipeline_id_by_camera_source_id = new Map();\n        this._camera_source_by_instance = new Map();\n        this._pipeline_id_by_image_tracker_id = new Map();\n        this._image_tracker_by_instance = new Map();\n        this._pipeline_id_by_face_tracker_id = new Map();\n        this._face_tracker_by_instance = new Map();\n        this._pipeline_id_by_face_mesh_id = new Map();\n        this._face_mesh_by_instance = new Map();\n        this._pipeline_id_by_face_landmark_id = new Map();\n        this._face_landmark_by_instance = new Map();\n        this._pipeline_id_by_barcode_finder_id = new Map();\n        this._barcode_finder_by_instance = new Map();\n        this._pipeline_id_by_instant_world_tracker_id = new Map();\n        this._instant_world_tracker_by_instance = new Map();\n    }\n    processBuffer(b) {\n        this._deserializer.setData(b);\n        this._deserializer.forMessages((messageId, msg) => {\n            switch (messageId) {\n                case 33: {\n                    this._impl.log_level_set(msg.logLevel());\n                    break;\n                }\n                case 30: {\n                    this._impl.analytics_project_id_set(msg.string());\n                    break;\n                }\n                case 26: {\n                    let clientId = msg.type();\n                    let handle = this._impl.pipeline_create();\n                    this._pipeline_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_pipeline_id.set(clientId, clientId);\n                    this.serializersByPipelineId.set(clientId, new serializer_1.MessageSerializer(ab => {\n                        this._sender(clientId, ab);\n                    }));\n                    break;\n                }\n                case 27: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_destroy(obj);\n                    this._pipeline_by_instance.delete(clientId);\n                    break;\n                }\n                case 9: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_frame_update(obj);\n                    break;\n                }\n                case 8: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_camera_frame_submit(obj, msg.dataWithLength(), msg.int(), msg.int(), msg.int(), msg.matrix4x4());\n                    break;\n                }\n                case 10: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_accelerometer_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 11: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_rotation_rate_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 12: {\n                    let clientId = msg.type();\n                    let obj = this._pipeline_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.pipeline_motion_attitude_submit(obj, msg.timestamp(), msg.float(), msg.float(), msg.float());\n                    break;\n                }\n                case 28: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let arg_device_id = msg.string();\n                    let handle = this._impl.camera_source_create(arg_pipeline, arg_device_id);\n                    this._camera_source_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_camera_source_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 29: {\n                    let clientId = msg.type();\n                    let obj = this._camera_source_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.camera_source_destroy(obj);\n                    this._camera_source_by_instance.delete(clientId);\n                    break;\n                }\n                case 2: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.image_tracker_create(arg_pipeline);\n                    this._image_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_image_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 13: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_destroy(obj);\n                    this._image_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 4: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_target_load_from_memory(obj, msg.dataWithLength());\n                    break;\n                }\n                case 3: {\n                    let clientId = msg.type();\n                    let obj = this._image_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.image_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 19: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.face_tracker_create(arg_pipeline);\n                    this._face_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_face_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 20: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_destroy(obj);\n                    this._face_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 21: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_model_load_from_memory(obj, msg.dataWithLength());\n                    break;\n                }\n                case 22: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 23: {\n                    let clientId = msg.type();\n                    let obj = this._face_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_tracker_max_faces_set(obj, msg.int());\n                    break;\n                }\n                case 24: {\n                    let clientId = msg.type();\n                    let handle = this._impl.face_mesh_create();\n                    this._face_mesh_by_instance.set(clientId, handle);\n                    break;\n                }\n                case 25: {\n                    let clientId = msg.type();\n                    let obj = this._face_mesh_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_mesh_destroy(obj);\n                    this._face_mesh_by_instance.delete(clientId);\n                    break;\n                }\n                case 31: {\n                    let clientId = msg.type();\n                    let arg_landmark = msg.faceLandmarkName();\n                    let handle = this._impl.face_landmark_create(arg_landmark);\n                    this._face_landmark_by_instance.set(clientId, handle);\n                    break;\n                }\n                case 32: {\n                    let clientId = msg.type();\n                    let obj = this._face_landmark_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.face_landmark_destroy(obj);\n                    this._face_landmark_by_instance.delete(clientId);\n                    break;\n                }\n                case 15: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.barcode_finder_create(arg_pipeline);\n                    this._barcode_finder_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_barcode_finder_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 16: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_destroy(obj);\n                    this._barcode_finder_by_instance.delete(clientId);\n                    break;\n                }\n                case 17: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 18: {\n                    let clientId = msg.type();\n                    let obj = this._barcode_finder_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.barcode_finder_formats_set(obj, msg.barcodeFormat());\n                    break;\n                }\n                case 5: {\n                    let clientId = msg.type();\n                    let arg_pipeline_id = msg.type();\n                    let arg_pipeline = this._pipeline_by_instance.get(arg_pipeline_id);\n                    let handle = this._impl.instant_world_tracker_create(arg_pipeline);\n                    this._instant_world_tracker_by_instance.set(clientId, handle);\n                    this._pipeline_id_by_instant_world_tracker_id.set(clientId, arg_pipeline_id);\n                    break;\n                }\n                case 14: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_destroy(obj);\n                    this._instant_world_tracker_by_instance.delete(clientId);\n                    break;\n                }\n                case 6: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_enabled_set(obj, msg.bool());\n                    break;\n                }\n                case 7: {\n                    let clientId = msg.type();\n                    let obj = this._instant_world_tracker_by_instance.get(clientId);\n                    if (obj === undefined)\n                        return;\n                    this._impl.instant_world_tracker_anchor_pose_set_from_camera_offset(obj, msg.float(), msg.float(), msg.float(), msg.instantTrackerTransformOrientation());\n                    break;\n                }\n            }\n        });\n    }\n    exploreState() {\n        for (let [k, v] of this._pipeline_by_instance) {\n            let pipeline = this._pipeline_id_by_pipeline_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(7, msg => {\n                msg.type(k);\n                msg.int(this._impl.pipeline_frame_number(v));\n            });\n            serializer.sendMessage(6, msg => {\n                msg.type(k);\n                msg.cameraModel(this._impl.pipeline_camera_model(v));\n            });\n            serializer.sendMessage(5, msg => {\n                msg.type(k);\n                msg.int(this._impl.pipeline_camera_frame_user_data(v));\n            });\n            serializer.sendMessage(11, msg => {\n                msg.type(k);\n                msg.matrix4x4(this._impl.pipeline_camera_frame_camera_attitude(v));\n            });\n        }\n        for (let [k, v] of this._camera_source_by_instance) {\n            let pipeline = this._pipeline_id_by_camera_source_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._image_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_image_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(18, msg => {\n                msg.type(k);\n                msg.int(this._impl.image_tracker_target_loaded_version(v));\n            });\n            serializer.sendMessage(20, msg => {\n                msg.type(k);\n                msg.int(this._impl.image_tracker_target_count(v));\n            });\n            serializer.sendMessage(1, msg => {\n                msg.type(k);\n                msg.int(this._impl.image_tracker_anchor_count(v));\n            });\n            for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(2, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.image_tracker_anchor_id(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.image_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(3, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.matrix4x4(this._impl.image_tracker_anchor_pose_raw(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._face_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_face_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(17, msg => {\n                msg.type(k);\n                msg.int(this._impl.face_tracker_model_loaded_version(v));\n            });\n            serializer.sendMessage(12, msg => {\n                msg.type(k);\n                msg.int(this._impl.face_tracker_anchor_count(v));\n            });\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(13, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.face_tracker_anchor_id(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(14, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.matrix4x4(this._impl.face_tracker_anchor_pose_raw(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(15, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.identityCoefficients(this._impl.face_tracker_anchor_identity_coefficients(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.face_tracker_anchor_count(v); i++) {\n                serializer.sendMessage(16, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.expressionCoefficients(this._impl.face_tracker_anchor_expression_coefficients(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._face_mesh_by_instance) {\n            let pipeline = this._pipeline_id_by_face_mesh_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._face_landmark_by_instance) {\n            let pipeline = this._pipeline_id_by_face_landmark_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n        }\n        for (let [k, v] of this._barcode_finder_by_instance) {\n            let pipeline = this._pipeline_id_by_barcode_finder_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(8, msg => {\n                msg.type(k);\n                msg.int(this._impl.barcode_finder_found_number(v));\n            });\n            for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n                serializer.sendMessage(9, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.string(this._impl.barcode_finder_found_text(v, i));\n                });\n            }\n            for (let i = 0; i < this._impl.barcode_finder_found_number(v); i++) {\n                serializer.sendMessage(10, msg => {\n                    msg.type(k);\n                    msg.int(i);\n                    msg.barcodeFormat(this._impl.barcode_finder_found_format(v, i));\n                });\n            }\n        }\n        for (let [k, v] of this._instant_world_tracker_by_instance) {\n            let pipeline = this._pipeline_id_by_instant_world_tracker_id.get(k);\n            if (!pipeline)\n                continue;\n            let serializer = this.serializersByPipelineId.get(pipeline);\n            if (!serializer)\n                continue;\n            serializer.sendMessage(4, msg => {\n                msg.type(k);\n                msg.matrix4x4(this._impl.instant_world_tracker_anchor_pose_raw(v));\n            });\n        }\n    }\n}\nexports.zappar_server = zappar_server;\n"]},"metadata":{},"sourceType":"script"}
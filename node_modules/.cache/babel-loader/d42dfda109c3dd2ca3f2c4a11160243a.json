{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.glContextLost = exports.glContextSet = exports.HTMLElementSource = exports.CameraSource = exports.InstantWorldTracker = exports.FaceTracker = exports.BarcodeFinder = exports.ImageTracker = exports.getDefaultPipeline = exports.onFrameUpdate = void 0;\n\nconst Zappar = require(\"@zappar/zappar\");\n\nconst event_1 = require(\"@zappar/zappar/lib/event\");\n\nlet defaultPipeline;\n/**\n * Emitted when the frame is updated.\n */\n\nexports.onFrameUpdate = new event_1.Event();\n/**\n * @returns - The default Pipeline used by the library. This function constructs a new Pipeline during its first invocation.\n */\n\nfunction getDefaultPipeline() {\n  if (!defaultPipeline) {\n    defaultPipeline = new Zappar.Pipeline();\n    defaultPipeline.onFrameUpdate.bind(() => exports.onFrameUpdate.emit());\n  }\n\n  return defaultPipeline;\n}\n\nexports.getDefaultPipeline = getDefaultPipeline;\n/**\n * Attaches content to a known image as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/image-tracking/\n */\n\nclass ImageTracker extends Zappar.ImageTracker {\n  /**\n   * Constructs a new ImageTracker.\n   * @param targetFile - The .zpt target file from the source image you'd like to track.\n   * @param pipeline - The pipeline that this tracker will operate within.\n   * @see https://docs.zap.works/universal-ar/zapworks-cli/\n   */\n  constructor(targetFile, pipeline) {\n    super(pipeline || getDefaultPipeline(), targetFile);\n  }\n\n}\n\nexports.ImageTracker = ImageTracker;\n/**\n * Detects barcodes in the images from the camera.\n */\n\nclass BarcodeFinder extends Zappar.BarcodeFinder {\n  /**\n   * Constructs a new BarcodeFinder.\n   * @param pipeline - The pipeline that this tracker will operate within.\n   */\n  constructor(pipeline) {\n    super(pipeline || getDefaultPipeline());\n  }\n\n}\n\nexports.BarcodeFinder = BarcodeFinder;\n/**\n * Attaches content to a face as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\n\nclass FaceTracker extends Zappar.FaceTracker {\n  /**\n   * Constructs a new FaceTracker.\n   * @param _pipeline - The pipeline that this tracker will operate within.\n   */\n  constructor(pipeline) {\n    super(pipeline || getDefaultPipeline());\n  }\n\n}\n\nexports.FaceTracker = FaceTracker;\n/**\n * Attaches content to a point on a surface in front of the user as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/instant-world-tracking/\n */\n\nclass InstantWorldTracker extends Zappar.InstantWorldTracker {\n  /**\n   * Constructs a new InstantWorldTracker.\n   * @param _pipeline - The pipeline that this tracker will operate within.\n   */\n  constructor(pipeline) {\n    super(pipeline || getDefaultPipeline());\n  }\n\n}\n\nexports.InstantWorldTracker = InstantWorldTracker;\n/**\n * Creates a source of frames from a device camera.\n * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n */\n\nclass CameraSource extends Zappar.CameraSource {\n  /**\n   * Constructs a new CameraSource.\n   * @param _pipeline - The pipeline that this source will operate within.\n   * @param deviceId - The camera device ID which will be used as the source.\n   * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n   */\n  constructor(deviceId, pipeline) {\n    super(pipeline || getDefaultPipeline(), deviceId);\n  }\n\n}\n\nexports.CameraSource = CameraSource;\n/**\n * Creates a source of frames from a HTML <video> or <img> element.\n * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n */\n\nclass HTMLElementSource extends Zappar.HTMLElementSource {\n  /**\n   * Constructs a new HTMLElementSource.\n   * @param element -  The HTML source element.\n   * @param pipeline - The pipeline that this tracker will operate within.\n   */\n  constructor(element, pipeline) {\n    super(pipeline || getDefaultPipeline(), element);\n  }\n\n}\n\nexports.HTMLElementSource = HTMLElementSource;\n/**\n * Sets the WebGL context used for the processing and upload of camera textures.\n *\n * This function affects the library's default Pipeline only. If you're using a custom Pipeline you should call `glContextSet(...)` on it yourself.\n *\n * @param gl - The WebGL context.\n */\n\nfunction glContextSet(gl) {\n  getDefaultPipeline().glContextSet(gl);\n}\n\nexports.glContextSet = glContextSet;\n/**\n * Informs the pipeline that the GL context is lost and should not be used.\n *\n * This function affects the library's default Pipeline only. If you're using a custom Pipeline you should call `glContextLost()` on it yourself.\n */\n\nfunction glContextLost() {\n  getDefaultPipeline().glContextLost();\n}\n\nexports.glContextLost = glContextLost;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/defaultpipeline.js"],"names":["Object","defineProperty","exports","value","glContextLost","glContextSet","HTMLElementSource","CameraSource","InstantWorldTracker","FaceTracker","BarcodeFinder","ImageTracker","getDefaultPipeline","onFrameUpdate","Zappar","require","event_1","defaultPipeline","Event","Pipeline","bind","emit","constructor","targetFile","pipeline","deviceId","element","gl"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.glContextLost = exports.glContextSet = exports.HTMLElementSource = exports.CameraSource = exports.InstantWorldTracker = exports.FaceTracker = exports.BarcodeFinder = exports.ImageTracker = exports.getDefaultPipeline = exports.onFrameUpdate = void 0;\nconst Zappar = require(\"@zappar/zappar\");\nconst event_1 = require(\"@zappar/zappar/lib/event\");\nlet defaultPipeline;\n/**\n * Emitted when the frame is updated.\n */\nexports.onFrameUpdate = new event_1.Event();\n/**\n * @returns - The default Pipeline used by the library. This function constructs a new Pipeline during its first invocation.\n */\nfunction getDefaultPipeline() {\n    if (!defaultPipeline) {\n        defaultPipeline = new Zappar.Pipeline();\n        defaultPipeline.onFrameUpdate.bind(() => exports.onFrameUpdate.emit());\n    }\n    return defaultPipeline;\n}\nexports.getDefaultPipeline = getDefaultPipeline;\n/**\n * Attaches content to a known image as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/image-tracking/\n */\nclass ImageTracker extends Zappar.ImageTracker {\n    /**\n     * Constructs a new ImageTracker.\n     * @param targetFile - The .zpt target file from the source image you'd like to track.\n     * @param pipeline - The pipeline that this tracker will operate within.\n     * @see https://docs.zap.works/universal-ar/zapworks-cli/\n     */\n    constructor(targetFile, pipeline) {\n        super(pipeline || getDefaultPipeline(), targetFile);\n    }\n}\nexports.ImageTracker = ImageTracker;\n/**\n * Detects barcodes in the images from the camera.\n */\nclass BarcodeFinder extends Zappar.BarcodeFinder {\n    /**\n     * Constructs a new BarcodeFinder.\n     * @param pipeline - The pipeline that this tracker will operate within.\n     */\n    constructor(pipeline) {\n        super(pipeline || getDefaultPipeline());\n    }\n}\nexports.BarcodeFinder = BarcodeFinder;\n/**\n * Attaches content to a face as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\nclass FaceTracker extends Zappar.FaceTracker {\n    /**\n     * Constructs a new FaceTracker.\n     * @param _pipeline - The pipeline that this tracker will operate within.\n     */\n    constructor(pipeline) {\n        super(pipeline || getDefaultPipeline());\n    }\n}\nexports.FaceTracker = FaceTracker;\n/**\n * Attaches content to a point on a surface in front of the user as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/instant-world-tracking/\n */\nclass InstantWorldTracker extends Zappar.InstantWorldTracker {\n    /**\n     * Constructs a new InstantWorldTracker.\n     * @param _pipeline - The pipeline that this tracker will operate within.\n     */\n    constructor(pipeline) {\n        super(pipeline || getDefaultPipeline());\n    }\n}\nexports.InstantWorldTracker = InstantWorldTracker;\n/**\n * Creates a source of frames from a device camera.\n * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n */\nclass CameraSource extends Zappar.CameraSource {\n    /**\n     * Constructs a new CameraSource.\n     * @param _pipeline - The pipeline that this source will operate within.\n     * @param deviceId - The camera device ID which will be used as the source.\n     * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n     */\n    constructor(deviceId, pipeline) {\n        super(pipeline || getDefaultPipeline(), deviceId);\n    }\n}\nexports.CameraSource = CameraSource;\n/**\n * Creates a source of frames from a HTML <video> or <img> element.\n * @see https://docs.zap.works/universal-ar/javascript/pipelines-and-camera-processing/\n */\nclass HTMLElementSource extends Zappar.HTMLElementSource {\n    /**\n     * Constructs a new HTMLElementSource.\n     * @param element -  The HTML source element.\n     * @param pipeline - The pipeline that this tracker will operate within.\n     */\n    constructor(element, pipeline) {\n        super(pipeline || getDefaultPipeline(), element);\n    }\n}\nexports.HTMLElementSource = HTMLElementSource;\n/**\n * Sets the WebGL context used for the processing and upload of camera textures.\n *\n * This function affects the library's default Pipeline only. If you're using a custom Pipeline you should call `glContextSet(...)` on it yourself.\n *\n * @param gl - The WebGL context.\n */\nfunction glContextSet(gl) {\n    getDefaultPipeline().glContextSet(gl);\n}\nexports.glContextSet = glContextSet;\n/**\n * Informs the pipeline that the GL context is lost and should not be used.\n *\n * This function affects the library's default Pipeline only. If you're using a custom Pipeline you should call `glContextLost()` on it yourself.\n */\nfunction glContextLost() {\n    getDefaultPipeline().glContextLost();\n}\nexports.glContextLost = glContextLost;\n"]},"metadata":{},"sourceType":"script"}
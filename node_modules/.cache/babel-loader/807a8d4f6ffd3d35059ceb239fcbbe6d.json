{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attemptInRepetitionRecovery = exports.Recoverable = exports.InRuleRecoveryException = exports.IN_RULE_RECOVERY_EXCEPTION = exports.EOF_FOLLOW_KEY = void 0;\n\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar find_1 = __importDefault(require(\"lodash/find\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar parser_1 = require(\"../parser\");\n\nexports.EOF_FOLLOW_KEY = {};\nexports.IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nvar InRuleRecoveryException =\n/** @class */\nfunction (_super) {\n  __extends(InRuleRecoveryException, _super);\n\n  function InRuleRecoveryException(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = exports.IN_RULE_RECOVERY_EXCEPTION;\n    return _this;\n  }\n\n  return InRuleRecoveryException;\n}(Error);\n\nexports.InRuleRecoveryException = InRuleRecoveryException;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\n\nvar Recoverable =\n/** @class */\nfunction () {\n  function Recoverable() {}\n\n  Recoverable.prototype.initRecoverable = function (config) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n    this.recoveryEnabled = (0, has_1.default)(config, \"recoveryEnabled\") ? config.recoveryEnabled // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled; // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  };\n\n  Recoverable.prototype.getTokenToInsert = function (tokType) {\n    var tokToInsert = (0, tokens_public_1.createTokenInstance)(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  };\n\n  Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n    return true;\n  };\n\n  Recoverable.prototype.canTokenTypeBeDeletedInRecovery = function (tokType) {\n    return true;\n  };\n\n  Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n    var _this = this; // TODO: can the resyncTokenType be cached?\n\n\n    var reSyncTokType = this.findReSyncTokenType();\n    var savedLexerState = this.exportLexerState();\n    var resyncedTokens = [];\n    var passedResyncPoint = false;\n    var nextTokenWithoutResync = this.LA(1);\n    var currToken = this.LA(1);\n\n    var generateErrorMessage = function () {\n      var previousToken = _this.LA(0); // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n\n\n      var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: _this.getCurrRuleFullName()\n      });\n\n      var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0)); // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n\n      error.resyncedTokens = (0, dropRight_1.default)(resyncedTokens);\n\n      _this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage(); // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    } // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n\n\n    this.importLexerState(savedLexerState);\n  };\n\n  Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    } // no need to recover, next token is what we expect...\n\n\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    } // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n\n\n    if (this.isBackTracking()) {\n      return false;\n    } // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n\n\n    if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n      return false;\n    }\n\n    return true;\n  }; // Error Recovery functionality\n\n\n  Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n    var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    var follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  };\n\n  Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      var tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      var nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  };\n\n  Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n    return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n  };\n\n  Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n    var _this = this;\n\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    } // must know the possible following tokens to perform single token insertion\n\n\n    if ((0, isEmpty_1.default)(follows)) {\n      return false;\n    }\n\n    var mismatchedTok = this.LA(1);\n    var isMisMatchedTokInFollows = (0, find_1.default)(follows, function (possibleFollowsTokType) {\n      return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n    }) !== undefined;\n    return isMisMatchedTokInFollows;\n  };\n\n  Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n    return isNextTokenWhatIsExpected;\n  };\n\n  Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n    var followKey = this.getCurrFollowKey();\n    var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return (0, includes_1.default)(currentRuleReSyncSet, tokenTypeIdx);\n  };\n\n  Recoverable.prototype.findReSyncTokenType = function () {\n    var allPossibleReSyncTokTypes = this.flattenFollowSet(); // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n\n    var nextToken = this.LA(1);\n    var k = 2;\n\n    while (true) {\n      var foundMatch = (0, find_1.default)(allPossibleReSyncTokTypes, function (resyncTokType) {\n        var canMatch = (0, tokens_public_1.tokenMatcher)(nextToken, resyncTokType);\n        return canMatch;\n      });\n\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n\n      nextToken = this.LA(k);\n      k++;\n    }\n  };\n\n  Recoverable.prototype.getCurrFollowKey = function () {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return exports.EOF_FOLLOW_KEY;\n    }\n\n    var currRuleShortName = this.getLastExplicitRuleShortName();\n    var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName)\n    };\n  };\n\n  Recoverable.prototype.buildFullFollowKeyStack = function () {\n    var _this = this;\n\n    var explicitRuleStack = this.RULE_STACK;\n    var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return (0, map_1.default)(explicitRuleStack, function (ruleName, idx) {\n      if (idx === 0) {\n        return exports.EOF_FOLLOW_KEY;\n      }\n\n      return {\n        ruleName: _this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n      };\n    });\n  };\n\n  Recoverable.prototype.flattenFollowSet = function () {\n    var _this = this;\n\n    var followStack = (0, map_1.default)(this.buildFullFollowKeyStack(), function (currKey) {\n      return _this.getFollowSetFromFollowKey(currKey);\n    });\n    return (0, flatten_1.default)(followStack);\n  };\n\n  Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n    if (followKey === exports.EOF_FOLLOW_KEY) {\n      return [tokens_public_1.EOF];\n    }\n\n    var followName = followKey.ruleName + followKey.idxInCallingRule + constants_1.IN + followKey.inRule;\n    return this.resyncFollows[followName];\n  }; // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n\n\n  Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n    if (!this.tokenMatcher(token, tokens_public_1.EOF)) {\n      resyncTokens.push(token);\n    }\n\n    return resyncTokens;\n  };\n\n  Recoverable.prototype.reSyncTo = function (tokType) {\n    var resyncedTokens = [];\n    var nextTok = this.LA(1);\n\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    } // the last token is not part of the error.\n\n\n    return (0, dropRight_1.default)(resyncedTokens);\n  };\n\n  Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {// by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  };\n\n  Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n    var pathRuleStack = this.getHumanReadableRuleStack();\n    var pathOccurrenceStack = (0, clone_1.default)(this.RULE_OCCURRENCE_STACK);\n    var grammarPath = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule\n    };\n    return grammarPath;\n  };\n\n  Recoverable.prototype.getHumanReadableRuleStack = function () {\n    var _this = this;\n\n    return (0, map_1.default)(this.RULE_STACK, function (currShortName) {\n      return _this.shortRuleNameToFullName(currShortName);\n    });\n  };\n\n  return Recoverable;\n}();\n\nexports.Recoverable = Recoverable;\n\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n  var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  var firstAfterRepInfo = this.firstAfterRepMap[key];\n\n  if (firstAfterRepInfo === undefined) {\n    var currRuleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[currRuleName];\n    var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  var expectTokAfterLastMatch = firstAfterRepInfo.token;\n  var nextTokIdx = firstAfterRepInfo.occurrence;\n  var isEndOfRule = firstAfterRepInfo.isEndOfRule; // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n\n  if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n    expectTokAfterLastMatch = tokens_public_1.EOF;\n    nextTokIdx = 1;\n  } // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n\n\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n  }\n}\n\nexports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;","map":{"version":3,"mappings":"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","names":["exports","__extends","message","_super","_this","name","Error","Recoverable","config","firstAfterRepMap","resyncFollows","recoveryEnabled","parser_1","attemptInRepetitionRecovery","tokType","tokToInsert","NaN","isInsertedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","resyncedTokens","passedResyncPoint","nextTokenWithoutResync","LA","currToken","generateErrorMessage","previousToken","msg","errorMessageProvider","buildMismatchTokenMessage","expected","actual","previous","ruleName","getCurrRuleFullName","error","exceptions_public_1","SAVE_ERROR","tokenMatcher","call","apply","SKIP_TOKEN","addToResyncTokens","importLexerState","expectTokAfterLastMatch","nextTokIdx","notStuck","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","follows","getNextPossibleTokenTypes","canRecoverWithSingleTokenInsertion","getTokenToInsert","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","InRuleRecoveryException","expectedToken","canTokenTypeBeInsertedInRecovery","mismatchedTok","isMisMatchedTokInFollows","possibleFollowsTokType","undefined","canTokenTypeBeDeletedInRecovery","isNextTokenWhatIsExpected","tokenTypeIdx","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","nextToken","k","foundMatch","resyncTokType","canMatch","RULE_STACK","length","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","idx","followStack","buildFullFollowKeyStack","currKey","tokens_public_1","followName","constants_1","token","resyncTokens","push","prodFunc","args","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","pathRuleStack","getHumanReadableRuleStack","pathOccurrenceStack","ruleStack","occurrenceStack","lastTok","lastTokOccurrence","currShortName","key","getKeyForAutomaticLookahead","firstAfterRepInfo","currRuleName","ruleGrammar","getGAstProductions","walker","startWalking","occurrence","isEndOfRule","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/recoverable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
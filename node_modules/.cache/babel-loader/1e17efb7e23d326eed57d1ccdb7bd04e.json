{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\nconst Context = /*#__PURE__*/React.createContext({});\n\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\n\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\n\nconst GizmoHelper = _ref => {\n  let {\n    alignment = 'bottom-right',\n    margin = [80, 80],\n    renderPriority = 0,\n    autoClear = true,\n    onUpdate,\n    onTarget,\n    children: GizmoHelperComponent\n  } = _ref;\n  const size = useThree(_ref2 => {\n    let {\n      size\n    } = _ref2;\n    return size;\n  });\n  const mainCamera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  }); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(_ref4 => {\n    let {\n      controls\n    } = _ref4;\n    return controls;\n  });\n  const gl = useThree(_ref5 => {\n    let {\n      gl\n    } = _ref5;\n    return gl;\n  });\n  const scene = useThree(_ref6 => {\n    let {\n      scene\n    } = _ref6;\n    return scene;\n  });\n  const invalidate = useThree(_ref7 => {\n    let {\n      invalidate\n    } = _ref7;\n    return invalidate;\n  });\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current; // Animate step\n\n\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false;\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@react-three/drei/core/GizmoHelper.js"],"names":["React","useThree","useFrame","createPortal","Object3D","Matrix4","Quaternion","Vector3","Scene","OrthographicCamera","useCamera","Context","createContext","useGizmoContext","useContext","turnRate","Math","PI","dummy","matrix","q1","q2","target","targetPosition","GizmoHelper","alignment","margin","renderPriority","autoClear","onUpdate","onTarget","children","GizmoHelperComponent","size","mainCamera","camera","defaultControls","controls","gl","scene","invalidate","backgroundRef","useRef","gizmoRef","virtualCam","virtualScene","useState","animating","radius","focusPoint","tweenCamera","useCallback","direction","current","position","distanceTo","copy","quaternion","multiplyScalar","add","lookAt","useEffect","background","_","delta","_gizmoRef$current","angleTo","step","rotateTowards","set","applyQuaternion","up","normalize","update","invert","setFromRotationMatrix","clearDepth","render","raycast","gizmoHelperContext","useMemo","marginX","marginY","x","endsWith","width","y","startsWith","height","createElement","Provider","value","ref"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\n\nconst Context = /*#__PURE__*/React.createContext({});\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\nconst GizmoHelper = ({\n  alignment = 'bottom-right',\n  margin = [80, 80],\n  renderPriority = 0,\n  autoClear = true,\n  onUpdate,\n  onTarget,\n  children: GizmoHelperComponent\n}) => {\n  const size = useThree(({\n    size\n  }) => size);\n  const mainCamera = useThree(({\n    camera\n  }) => camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(({\n    controls\n  }) => controls);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current;\n\n      // Animate step\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false;\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };\n"]},"metadata":{},"sourceType":"module"}
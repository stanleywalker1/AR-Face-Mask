{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar every_1 = __importDefault(require(\"lodash/every\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar interpreter_1 = require(\"./interpreter\");\n\nvar rest_1 = require(\"./rest\");\n\nvar tokens_1 = require(\"../../scan/tokens\");\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar gast_2 = require(\"@chevrotain/gast\");\n\nvar PROD_TYPE;\n\n(function (PROD_TYPE) {\n  PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\n\nfunction getProdType(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_1.Option) {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof gast_1.Repetition) {\n    return PROD_TYPE.REPETITION;\n  } else if (prod instanceof gast_1.RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.Alternation) {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.getProdType = getProdType;\n\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\n\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\n\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n  var numOfAlts = alts.length;\n  var areAllOneTokenLookahead = (0, every_1.default)(alts, function (currAlt) {\n    return (0, every_1.default)(currAlt, function (currPath) {\n      return currPath.length === 1;\n    });\n  }); // This version takes into account the predicates as well.\n\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts) {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      var predicates = (0, map_1.default)(orAlts, function (currAlt) {\n        return currAlt.GATE;\n      });\n\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        var currPredicate = predicates[t];\n\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    var singleTokenAlts = (0, map_1.default)(alts, function (currAlt) {\n      return (0, flatten_1.default)(currAlt);\n    });\n    var choiceToAlt_1 = (0, reduce_1.default)(singleTokenAlts, function (result, currAlt, idx) {\n      (0, forEach_1.default)(currAlt, function (currTokType) {\n        if (!(0, has_1.default)(result, currTokType.tokenTypeIdx)) {\n          result[currTokType.tokenTypeIdx] = idx;\n        }\n\n        (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n          if (!(0, has_1.default)(result, currExtendingType)) {\n            result[currExtendingType] = idx;\n          }\n        });\n      });\n      return result;\n    }, {});\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n\n    return function () {\n      var nextToken = this.LA(1);\n      return choiceToAlt_1[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  }\n}\n\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\n\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n  var areAllOneTokenLookahead = (0, every_1.default)(alt, function (currPath) {\n    return currPath.length === 1;\n  });\n  var numOfPaths = alt.length; // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    var singleTokensTypes = (0, flatten_1.default)(alt);\n\n    if (singleTokensTypes.length === 1 && (0, isEmpty_1.default)(singleTokensTypes[0].categoryMatches)) {\n      var expectedTokenType = singleTokensTypes[0];\n      var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n      return function () {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n      };\n    } else {\n      var choiceToAlt_2 = (0, reduce_1.default)(singleTokensTypes, function (result, currTokType, idx) {\n        result[currTokType.tokenTypeIdx] = true;\n        (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n          result[currExtendingType] = true;\n        });\n        return result;\n      }, []);\n      return function () {\n        var nextToken = this.LA(1);\n        return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function () {\n      nextPath: for (var j = 0; j < numOfPaths; j++) {\n        var currPath = alt[j];\n        var currPathLength = currPath.length;\n\n        for (var i = 0; i < currPathLength; i++) {\n          var nextToken = this.LA(i + 1);\n\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        } // found a full path that matches.\n\n\n        return true;\n      } // none of the paths matched\n\n\n      return false;\n    };\n  }\n}\n\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\n\nvar RestDefinitionFinderWalker =\n/** @class */\nfunction (_super) {\n  __extends(RestDefinitionFinderWalker, _super);\n\n  function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n    var _this = _super.call(this) || this;\n\n    _this.topProd = topProd;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    return _this;\n  }\n\n  RestDefinitionFinderWalker.prototype.startWalking = function () {\n    this.walk(this.topProd);\n    return this.restDef;\n  };\n\n  RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    } // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n\n\n    return false;\n  };\n\n  RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return RestDefinitionFinderWalker;\n}(rest_1.RestWalker);\n/**\n * Returns the definition of a target production in a top level level rule.\n */\n\n\nvar InsideDefinitionFinderVisitor =\n/** @class */\nfunction (_super) {\n  __extends(InsideDefinitionFinderVisitor, _super);\n\n  function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n    var _this = _super.call(this) || this;\n\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    _this.targetRef = targetRef;\n    _this.result = [];\n    return _this;\n  }\n\n  InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n      this.result = node.definition;\n    }\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  };\n\n  return InsideDefinitionFinderVisitor;\n}(gast_2.GAstVisitor);\n\nfunction initializeArrayOfArrays(size) {\n  var result = new Array(size);\n\n  for (var i = 0; i < size; i++) {\n    result[i] = [];\n  }\n\n  return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\n\n\nfunction pathToHashKeys(path) {\n  var keys = [\"\"];\n\n  for (var i = 0; i < path.length; i++) {\n    var tokType = path[i];\n    var longerKeys = [];\n\n    for (var j = 0; j < keys.length; j++) {\n      var currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n\n      for (var t = 0; t < tokType.categoryMatches.length; t++) {\n        var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n\n    keys = longerKeys;\n  }\n\n  return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\n\n\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n  for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n\n    var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n\n    for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      var searchKey = searchPathKeys[searchIdx];\n\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  } // None of the SearchPathKeys were found in any of the other alternatives\n\n\n  return true;\n}\n\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n  var partialAlts = (0, map_1.default)(altsDefs, function (currAlt) {\n    return (0, interpreter_1.possiblePathsFrom)([currAlt], 1);\n  });\n  var finalResult = initializeArrayOfArrays(partialAlts.length);\n  var altsHashes = (0, map_1.default)(partialAlts, function (currAltPaths) {\n    var dict = {};\n    (0, forEach_1.default)(currAltPaths, function (item) {\n      var keys = pathToHashKeys(item.partialPath);\n      (0, forEach_1.default)(keys, function (currKey) {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  var newData = partialAlts; // maxLookahead loop\n\n  for (var pathLength = 1; pathLength <= k; pathLength++) {\n    var currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    var _loop_1 = function (altIdx) {\n      var currAltPathsAndSuffixes = currDataset[altIdx]; // paths in current alternative loop\n\n      for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n        var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        var prefixKeys = pathToHashKeys(currPathPrefix);\n        var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx); // End of the line for this path.\n\n        if (isUnique || (0, isEmpty_1.default)(suffixDef) || currPathPrefix.length === k) {\n          var currAltResult = finalResult[altIdx]; // TODO: Can we implement a containsPath using Maps/Dictionaries?\n\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix); // Update all new  keys for the current path.\n\n            for (var j = 0; j < prefixKeys.length; j++) {\n              var currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        } // Expand longer paths\n        else {\n          var newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes); // Update keys for new known paths\n\n          (0, forEach_1.default)(newPartialPathsAndSuffixes, function (item) {\n            var prefixKeys = pathToHashKeys(item.partialPath);\n            (0, forEach_1.default)(prefixKeys, function (key) {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }; // alternatives loop\n\n\n    for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      _loop_1(altIdx);\n    }\n  }\n\n  return finalResult;\n}\n\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\n\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n  var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\n\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n  var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n  ruleGrammar.accept(insideDefVisitor);\n  var insideDef = insideDefVisitor.result;\n  var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n  var afterDef = afterDefWalker.startWalking();\n  var insideFlat = new gast_1.Alternative({\n    definition: insideDef\n  });\n  var afterFlat = new gast_1.Alternative({\n    definition: afterDef\n  });\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\n\nfunction containsPath(alternative, searchPath) {\n  compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n    var otherPath = alternative[i];\n\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n\n    for (var j = 0; j < otherPath.length; j++) {\n      var searchTok = searchPath[j];\n      var otherTok = otherPath[j];\n      var matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nexports.containsPath = containsPath;\n\nfunction isStrictPrefixOfPath(prefix, other) {\n  return prefix.length < other.length && (0, every_1.default)(prefix, function (tokType, idx) {\n    var otherTokType = other[idx];\n    return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n  });\n}\n\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\n\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n  return (0, every_1.default)(lookAheadPaths, function (singleAltPaths) {\n    return (0, every_1.default)(singleAltPaths, function (singlePath) {\n      return (0, every_1.default)(singlePath, function (token) {\n        return (0, isEmpty_1.default)(token.categoryMatches);\n      });\n    });\n  });\n}\n\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;","map":{"version":3,"mappings":"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","names":["PROD_TYPE","exports","getProdType","prod","gast_1","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","Error","buildLookaheadFuncForOr","occurrence","ruleGrammar","maxLookahead","hasPredicates","dynamicTokensEnabled","laFuncBuilder","lookAheadPaths","getLookaheadPathsForOr","tokenMatcher","areTokenCategoriesNotUsed","tokens_1","buildLookaheadFuncForOptionalProd","k","prodType","lookaheadBuilder","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","alts","numOfAlts","length","areAllOneTokenLookahead","currAlt","currPath","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","undefined","call","nextPath","j","currPathLength","i","nextToken","LA","singleTokenAlts","choiceToAlt_1","result","idx","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","buildSingleAlternativeLookaheadFunction","alt","numOfPaths","singleTokensTypes","expectedTokenType","expectedTokenUniqueKey_1","choiceToAlt_2","__extends","topProd","targetOccurrence","targetProdType","_super","_this","RestDefinitionFinderWalker","walk","restDef","node","expectedProdType","currRest","prevRest","concat","optionProd","checkIsTarget","walkOption","atLeastOneProd","atLeastOneSepProd","manyProd","manySepProd","rest_1","targetRef","InsideDefinitionFinderVisitor","expectedProdName","definition","gast_2","initializeArrayOfArrays","size","Array","pathToHashKeys","path","keys","tokType","longerKeys","currShorterKey","push","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","searchKey","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","currAltPaths","dict","item","partialPath","currKey","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","suffixDef","prefixKeys","isUnique","currAltResult","containsPath","newPartialPathsAndSuffixes","key","orProd","visitor","accept","insideDefVisitor","insideDef","afterDefWalker","afterDef","startWalking","insideFlat","afterFlat","alternative","searchPath","compareOtherPath","otherPath","searchTok","otherTok","matchingTokens","categoryMatchesMap","isStrictPrefixOfPath","prefix","other","otherTokType","singleAltPaths","singlePath","token"],"sourceRoot":"","sources":["../../../../src/parse/grammar/lookahead.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
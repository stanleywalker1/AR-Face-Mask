{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar difference_1 = __importDefault(require(\"lodash/difference\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n\nexports.tokenStructuredMatcher = tokenStructuredMatcher; // Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\n\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes); // add required tokenType and categoryMatches properties\n\n  assignTokenDefaultProps(tokenTypesAndParents); // fill up the categoryMatches\n\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  (0, forEach_1.default)(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\n\nexports.augmentTokenTypes = augmentTokenTypes;\n\nfunction expandCategories(tokenTypes) {\n  var result = (0, clone_1.default)(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n\n  while (searching) {\n    categories = (0, compact_1.default)((0, flatten_1.default)((0, map_1.default)(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = (0, difference_1.default)(categories, result);\n    result = result.concat(newCategories);\n\n    if ((0, isEmpty_1.default)(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n\n  return result;\n}\n\nexports.expandCategories = expandCategories;\n\nfunction assignTokenDefaultProps(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    } // CATEGORIES? : TokenType | TokenType[]\n\n\n    if (hasCategoriesProperty(currTokType) && !(0, isArray_1.default)(currTokType.CATEGORIES) // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\n\nfunction assignCategoriesTokensProp(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    (0, forEach_1.default)(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\n\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\n\nfunction assignCategoriesMapProp(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\n\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  (0, forEach_1.default)(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  (0, forEach_1.default)(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode); // avoids infinite loops due to cyclic categories.\n\n    if (!(0, includes_1.default)(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\n\nfunction hasShortKeyProperty(tokType) {\n  return (0, has_1.default)(tokType, \"tokenTypeIdx\");\n}\n\nexports.hasShortKeyProperty = hasShortKeyProperty;\n\nfunction hasCategoriesProperty(tokType) {\n  return (0, has_1.default)(tokType, \"CATEGORIES\");\n}\n\nexports.hasCategoriesProperty = hasCategoriesProperty;\n\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return (0, has_1.default)(tokType, \"categoryMatches\");\n}\n\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\n\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return (0, has_1.default)(tokType, \"categoryMatchesMap\");\n}\n\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\n\nfunction isTokenType(tokType) {\n  return (0, has_1.default)(tokType, \"tokenTypeIdx\");\n}\n\nexports.isTokenType = isTokenType;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,SAAgBA,sBAAhB,CACEC,WADF,EAEEC,cAFF,EAE2B;AAEzB,MAAMC,YAAY,GAAGF,WAAW,CAACG,YAAjC;;AACA,MAAID,YAAY,KAAKD,cAAc,CAACE,YAApC,EAAkD;AAChD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WACEF,cAAc,CAACG,QAAf,KAA4B,IAA5B,IACAH,cAAc,CAACI,kBAAf,CAAmCH,YAAnC,MAAqD,IAFvD;AAID;AACF;;AAbDI,wD,CAeA;AACA;;AACA,SAAgBC,kCAAhB,CACEC,KADF,EAEEC,OAFF,EAEoB;AAElB,SAAOD,KAAK,CAACL,YAAN,KAAuBM,OAAO,CAACN,YAAtC;AACD;;AALDG;AAOWA,4BAAoB,CAApB;AACEA,0BAAqD,EAArD;;AAEb,SAAgBI,iBAAhB,CAAkCC,UAAlC,EAAyD;AACvD;AACA,MAAMC,oBAAoB,GAAGC,gBAAgB,CAACF,UAAD,CAA7C,CAFuD,CAIvD;;AACAG,yBAAuB,CAACF,oBAAD,CAAvB,CALuD,CAOvD;;AACAG,yBAAuB,CAACH,oBAAD,CAAvB;AACAI,4BAA0B,CAACJ,oBAAD,CAA1B;AAEA,yBAAQA,oBAAR,EAA8B,UAACH,OAAD,EAAQ;AACpCA,WAAO,CAACL,QAAR,GAAmBK,OAAO,CAACQ,eAAR,CAAyBC,MAAzB,GAAkC,CAArD;AACD,GAFD;AAGD;;AAdDZ;;AAgBA,SAAgBO,gBAAhB,CAAiCF,UAAjC,EAAwD;AACtD,MAAIQ,MAAM,GAAG,qBAAMR,UAAN,CAAb;AAEA,MAAIS,UAAU,GAAGT,UAAjB;AACA,MAAIU,SAAS,GAAG,IAAhB;;AACA,SAAOA,SAAP,EAAkB;AAChBD,cAAU,GAAG,uBACX,uBAAQ,mBAAIA,UAAJ,EAAgB,UAACE,WAAD,EAAY;AAAK,wBAAW,CAACC,UAAZ;AAAsB,KAAvD,CAAR,CADW,CAAb;AAIA,QAAMC,aAAa,GAAG,0BAAWJ,UAAX,EAAuBD,MAAvB,CAAtB;AAEAA,UAAM,GAAGA,MAAM,CAACM,MAAP,CAAcD,aAAd,CAAT;;AAEA,QAAI,uBAAQA,aAAR,CAAJ,EAA4B;AAC1BH,eAAS,GAAG,KAAZ;AACD,KAFD,MAEO;AACLD,gBAAU,GAAGI,aAAb;AACD;AACF;;AACD,SAAOL,MAAP;AACD;;AArBDb;;AAuBA,SAAgBQ,uBAAhB,CAAwCH,UAAxC,EAA+D;AAC7D,yBAAQA,UAAR,EAAoB,UAACW,WAAD,EAAY;AAC9B,QAAI,CAACI,mBAAmB,CAACJ,WAAD,CAAxB,EAAuC;AACrChB,8BAAgBA,yBAAhB,IAAqCgB,WAArC;AACOA,iBAAY,CAACnB,YAAb,GAA4BG,2BAA5B;AACR,KAJ6B,CAM9B;;;AACA,QACEqB,qBAAqB,CAACL,WAAD,CAArB,IACA,CAAC,uBAAQA,WAAW,CAACC,UAApB,CAFH,CAGE;AACA;AAJF,MAKE;AACAD,iBAAW,CAACC,UAAZ,GAAyB,CAACD,WAAW,CAACC,UAAb,CAAzB;AACD;;AAED,QAAI,CAACI,qBAAqB,CAACL,WAAD,CAA1B,EAAyC;AACvCA,iBAAW,CAACC,UAAZ,GAAyB,EAAzB;AACD;;AAED,QAAI,CAACK,+BAA+B,CAACN,WAAD,CAApC,EAAmD;AACjDA,iBAAW,CAACL,eAAZ,GAA8B,EAA9B;AACD;;AAED,QAAI,CAACY,kCAAkC,CAACP,WAAD,CAAvC,EAAsD;AACpDA,iBAAW,CAACjB,kBAAZ,GAAiC,EAAjC;AACD;AACF,GA3BD;AA4BD;;AA7BDC;;AA+BA,SAAgBU,0BAAhB,CAA2CL,UAA3C,EAAkE;AAChE,yBAAQA,UAAR,EAAoB,UAACW,WAAD,EAAY;AAC9B;AACAA,eAAW,CAACL,eAAZ,GAA8B,EAA9B;AACA,2BAAQK,WAAW,CAACjB,kBAApB,EAAyC,UAACyB,GAAD,EAAMC,GAAN,EAAS;AAChDT,iBAAW,CAACL,eAAZ,CAA6Be,IAA7B,CACE1B,wBAAgByB,GAAhB,EAA0C5B,YAD5C;AAGD,KAJD;AAKD,GARD;AASD;;AAVDG;;AAYA,SAAgBS,uBAAhB,CAAwCJ,UAAxC,EAA+D;AAC7D,yBAAQA,UAAR,EAAoB,UAACW,WAAD,EAAY;AAC9BW,iCAA6B,CAAC,EAAD,EAAKX,WAAL,CAA7B;AACD,GAFD;AAGD;;AAJDhB;;AAMA,SAAgB2B,6BAAhB,CACEC,IADF,EAEEC,QAFF,EAEqB;AAEnB,yBAAQD,IAAR,EAAc,UAACE,QAAD,EAAS;AACrBD,YAAQ,CAAC9B,kBAAT,CAA6B+B,QAAQ,CAACjC,YAAtC,IAAuD,IAAvD;AACD,GAFD;AAIA,yBAAQgC,QAAQ,CAACZ,UAAjB,EAA6B,UAACc,YAAD,EAAa;AACxC,QAAMC,OAAO,GAAGJ,IAAI,CAACT,MAAL,CAAYU,QAAZ,CAAhB,CADwC,CAExC;;AACA,QAAI,CAAC,wBAASG,OAAT,EAAkBD,YAAlB,CAAL,EAAsC;AACpCJ,mCAA6B,CAACK,OAAD,EAAUD,YAAV,CAA7B;AACD;AACF,GAND;AAOD;;AAfD/B;;AAiBA,SAAgBoB,mBAAhB,CAAoCjB,OAApC,EAAsD;AACpD,SAAO,mBAAIA,OAAJ,EAAa,cAAb,CAAP;AACD;;AAFDH;;AAIA,SAAgBqB,qBAAhB,CAAsClB,OAAtC,EAAwD;AACtD,SAAO,mBAAIA,OAAJ,EAAa,YAAb,CAAP;AACD;;AAFDH;;AAIA,SAAgBsB,+BAAhB,CAAgDnB,OAAhD,EAAkE;AAChE,SAAO,mBAAIA,OAAJ,EAAa,iBAAb,CAAP;AACD;;AAFDH;;AAIA,SAAgBuB,kCAAhB,CACEpB,OADF,EACoB;AAElB,SAAO,mBAAIA,OAAJ,EAAa,oBAAb,CAAP;AACD;;AAJDH;;AAMA,SAAgBiC,WAAhB,CAA4B9B,OAA5B,EAA8C;AAC5C,SAAO,mBAAIA,OAAJ,EAAa,cAAb,CAAP;AACD;;AAFDH","names":["tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","exports","tokenStructuredMatcherNoCategories","token","tokType","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","categoryMatches","length","result","categories","searching","currTokType","CATEGORIES","newCategories","concat","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","val","key","push","singleAssignCategoriesToksMap","path","nextNode","pathNode","nextCategory","newPath","isTokenType"],"sourceRoot":"","sources":["../../../src/scan/tokens.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
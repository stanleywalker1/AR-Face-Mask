{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\n\nvar cst_1 = require(\"../../cst/cst\");\n\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\n\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop_1.default;\n      this.cstFinallyStateUpdate = noop_1.default;\n      this.cstPostTerminal = noop_1.default;\n      this.cstPostNonTerminal = noop_1.default;\n      this.cstPostRule = noop_1.default;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop_1.default;\n        this.setNodeLocationFromNode = noop_1.default;\n        this.cstPostRule = noop_1.default;\n        this.setInitialNodeLocation = noop_1.default;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0); // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"mappings":"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","names":["TreeBuilder","config","CST_STACK","outputCst","nodeLocationTracking","parser_1","cstInvocationStateUpdate","noop_1","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","test","recoveryEnabled","setNodeLocationFromToken","cst_1","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","Error","cstNode","location","startOffset","NaN","endOffset","LA","startLine","startColumn","endLine","endColumn","nextToken","fullRuleName","name","children","Object","create","push","pop","ruleCstNode","prevToken","loc","key","consumedToken","rootCst","length","ruleCstResult","ruleName","preCstNode","baseCstVisitorConstructor","newBaseCstVisitorConstructor","className","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","getBaseCstVisitorConstructor","ruleStack","RULE_STACK","occurrenceStack","RULE_OCCURRENCE_STACK","exports"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
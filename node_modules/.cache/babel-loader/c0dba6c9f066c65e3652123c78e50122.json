{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawPlane = exports.disposeDrawPlane = void 0;\n\nconst shader_1 = require(\"./shader\");\n\nlet shader;\nlet vbo;\nlet uvbo;\nlet texturesByUrl = {};\n\nfunction disposeDrawPlane() {\n  shader = undefined;\n  vbo = undefined;\n  uvbo = undefined;\n  texturesByUrl = {};\n}\n\nexports.disposeDrawPlane = disposeDrawPlane;\n\nfunction generate(gl) {\n  if (vbo) return vbo;\n  vbo = gl.createBuffer();\n  if (!vbo) throw new Error(\"Unable to create buffer object\");\n  let coords = [-0.5, 0.125, 0, -0.5, -0.125, 0, 0.5, 0.125, 0, 0.5, -0.125, 0];\n  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return vbo;\n}\n\nfunction generateUVBO(gl) {\n  if (uvbo) return uvbo;\n  uvbo = gl.createBuffer();\n  if (!uvbo) throw new Error(\"Unable to create buffer object\");\n  let coords = [0, 1, 0, 0, 1, 1, 1, 0];\n  gl.bindBuffer(gl.ARRAY_BUFFER, uvbo);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return uvbo;\n}\n\nfunction drawPlane(gl, projectionMatrix, cameraMatrix, targetMatrix, textureUrl) {\n  let shader = getShader(gl);\n  let v = generate(gl);\n  let uvbo = generateUVBO(gl);\n  gl.disable(gl.DEPTH_TEST);\n  gl.useProgram(shader.prog);\n  gl.uniformMatrix4fv(shader.unif_proj, false, projectionMatrix);\n  gl.uniformMatrix4fv(shader.unif_camera, false, cameraMatrix);\n  gl.uniformMatrix4fv(shader.unif_matrix, false, targetMatrix);\n  gl.bindBuffer(gl.ARRAY_BUFFER, v);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, loadTexture(gl, textureUrl));\n  gl.uniform1i(shader.unif_skinSampler, 0);\n  gl.vertexAttribPointer(shader.attr_position, 3, gl.FLOAT, false, 3 * 4, 0);\n  gl.enableVertexAttribArray(shader.attr_position);\n  gl.bindBuffer(gl.ARRAY_BUFFER, uvbo);\n  gl.vertexAttribPointer(shader.attr_textureCoord, 2, gl.FLOAT, false, 2 * 4, 0);\n  gl.enableVertexAttribArray(shader.attr_textureCoord);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  gl.disableVertexAttribArray(shader.attr_position);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n}\n\nexports.drawPlane = drawPlane;\n\nfunction generateLocalMatrix() {\n  let position = [0, 0, -5];\n  return new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, position[0], position[1], position[2], 1]);\n}\n\nlet vertexShaderSrc = `\n#ifndef GL_ES\n#define highp\n#define mediump\n#define lowp\n#endif\n\nuniform mat4 projMatrix;\nuniform mat4 cameraMatrix;\nuniform mat4 modelViewMatrix;\nattribute vec4 position;\nattribute vec2 textureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main()\n{\n    gl_Position = projMatrix * cameraMatrix * modelViewMatrix * position;\n    vTextureCoord = textureCoord;\n}`;\nlet fragmentShaderSrc = `\n#define highp mediump\n#ifdef GL_ES\n    // define default precision for float, vec, mat.\n    precision highp float;\n#else\n#define highp\n#define mediump\n#define lowp\n#endif\n\nvarying highp vec2 vTextureCoord;\nuniform sampler2D skinSampler;\n\nvoid main()\n{\n    gl_FragColor = texture2D(skinSampler, vTextureCoord);\n}`;\n\nfunction getShader(gl) {\n  if (shader) return shader;\n  let prog = gl.createProgram();\n  if (!prog) throw new Error(\"Unable to create program\");\n  let vertexShader = shader_1.compileShader(gl, gl.VERTEX_SHADER, vertexShaderSrc);\n  let fragmentShader = shader_1.compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSrc);\n  gl.attachShader(prog, vertexShader);\n  gl.attachShader(prog, fragmentShader);\n  shader_1.linkProgram(gl, prog);\n  let unif_proj = gl.getUniformLocation(prog, \"projMatrix\");\n  if (!unif_proj) throw new Error(\"Unable to get uniform location projMatrix\");\n  let unif_matrix = gl.getUniformLocation(prog, \"modelViewMatrix\");\n  if (!unif_matrix) throw new Error(\"Unable to get uniform location modelViewMatrix\");\n  let unif_camera = gl.getUniformLocation(prog, \"cameraMatrix\");\n  if (!unif_camera) throw new Error(\"Unable to get uniform location cameraMatrix\");\n  let unif_skinSampler = gl.getUniformLocation(prog, \"skinSampler\");\n  if (!unif_skinSampler) throw new Error(\"Unable to get uniform location skinSampler\");\n  shader = {\n    prog,\n    unif_matrix,\n    unif_proj,\n    unif_camera,\n    unif_skinSampler,\n    attr_position: gl.getAttribLocation(prog, \"position\"),\n    attr_textureCoord: gl.getAttribLocation(prog, \"textureCoord\")\n  };\n  return shader;\n}\n\nfunction loadTexture(gl, url) {\n  if (texturesByUrl[url]) return texturesByUrl[url];\n  let texture = gl.createTexture();\n  if (!texture) throw new Error(\"Unable to create texture\");\n  texturesByUrl[url] = texture;\n  gl.bindTexture(gl.TEXTURE_2D, texture); // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n\n  const level = 0;\n  const internalFormat = gl.RGBA;\n  const width = 1;\n  const height = 1;\n  const border = 0;\n  const srcFormat = gl.RGBA;\n  const srcType = gl.UNSIGNED_BYTE;\n  const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\n\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\n  const image = new Image();\n\n  image.onload = function () {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  };\n\n  image.src = url;\n  return texture;\n}","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-cv/lib/drawplane.js"],"names":["Object","defineProperty","exports","value","drawPlane","disposeDrawPlane","shader_1","require","shader","vbo","uvbo","texturesByUrl","undefined","generate","gl","createBuffer","Error","coords","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","generateUVBO","projectionMatrix","cameraMatrix","targetMatrix","textureUrl","getShader","v","disable","DEPTH_TEST","useProgram","prog","uniformMatrix4fv","unif_proj","unif_camera","unif_matrix","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","loadTexture","uniform1i","unif_skinSampler","vertexAttribPointer","attr_position","FLOAT","enableVertexAttribArray","attr_textureCoord","drawArrays","TRIANGLE_STRIP","disableVertexAttribArray","generateLocalMatrix","position","vertexShaderSrc","fragmentShaderSrc","createProgram","vertexShader","compileShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getUniformLocation","getAttribLocation","url","texture","createTexture","level","internalFormat","RGBA","width","height","border","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","image","Image","onload","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawPlane = exports.disposeDrawPlane = void 0;\nconst shader_1 = require(\"./shader\");\nlet shader;\nlet vbo;\nlet uvbo;\nlet texturesByUrl = {};\nfunction disposeDrawPlane() {\n    shader = undefined;\n    vbo = undefined;\n    uvbo = undefined;\n    texturesByUrl = {};\n}\nexports.disposeDrawPlane = disposeDrawPlane;\nfunction generate(gl) {\n    if (vbo)\n        return vbo;\n    vbo = gl.createBuffer();\n    if (!vbo)\n        throw new Error(\"Unable to create buffer object\");\n    let coords = [\n        -0.5, 0.125, 0,\n        -0.5, -0.125, 0,\n        0.5, 0.125, 0,\n        0.5, -0.125, 0\n    ];\n    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    return vbo;\n}\nfunction generateUVBO(gl) {\n    if (uvbo)\n        return uvbo;\n    uvbo = gl.createBuffer();\n    if (!uvbo)\n        throw new Error(\"Unable to create buffer object\");\n    let coords = [\n        0, 1,\n        0, 0,\n        1, 1,\n        1, 0\n    ];\n    gl.bindBuffer(gl.ARRAY_BUFFER, uvbo);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    return uvbo;\n}\nfunction drawPlane(gl, projectionMatrix, cameraMatrix, targetMatrix, textureUrl) {\n    let shader = getShader(gl);\n    let v = generate(gl);\n    let uvbo = generateUVBO(gl);\n    gl.disable(gl.DEPTH_TEST);\n    gl.useProgram(shader.prog);\n    gl.uniformMatrix4fv(shader.unif_proj, false, projectionMatrix);\n    gl.uniformMatrix4fv(shader.unif_camera, false, cameraMatrix);\n    gl.uniformMatrix4fv(shader.unif_matrix, false, targetMatrix);\n    gl.bindBuffer(gl.ARRAY_BUFFER, v);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, loadTexture(gl, textureUrl));\n    gl.uniform1i(shader.unif_skinSampler, 0);\n    gl.vertexAttribPointer(shader.attr_position, 3, gl.FLOAT, false, 3 * 4, 0);\n    gl.enableVertexAttribArray(shader.attr_position);\n    gl.bindBuffer(gl.ARRAY_BUFFER, uvbo);\n    gl.vertexAttribPointer(shader.attr_textureCoord, 2, gl.FLOAT, false, 2 * 4, 0);\n    gl.enableVertexAttribArray(shader.attr_textureCoord);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    gl.disableVertexAttribArray(shader.attr_position);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n}\nexports.drawPlane = drawPlane;\nfunction generateLocalMatrix() {\n    let position = [0, 0, -5];\n    return new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, position[0], position[1], position[2], 1]);\n}\nlet vertexShaderSrc = `\n#ifndef GL_ES\n#define highp\n#define mediump\n#define lowp\n#endif\n\nuniform mat4 projMatrix;\nuniform mat4 cameraMatrix;\nuniform mat4 modelViewMatrix;\nattribute vec4 position;\nattribute vec2 textureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main()\n{\n    gl_Position = projMatrix * cameraMatrix * modelViewMatrix * position;\n    vTextureCoord = textureCoord;\n}`;\nlet fragmentShaderSrc = `\n#define highp mediump\n#ifdef GL_ES\n    // define default precision for float, vec, mat.\n    precision highp float;\n#else\n#define highp\n#define mediump\n#define lowp\n#endif\n\nvarying highp vec2 vTextureCoord;\nuniform sampler2D skinSampler;\n\nvoid main()\n{\n    gl_FragColor = texture2D(skinSampler, vTextureCoord);\n}`;\nfunction getShader(gl) {\n    if (shader)\n        return shader;\n    let prog = gl.createProgram();\n    if (!prog)\n        throw new Error(\"Unable to create program\");\n    let vertexShader = shader_1.compileShader(gl, gl.VERTEX_SHADER, vertexShaderSrc);\n    let fragmentShader = shader_1.compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSrc);\n    gl.attachShader(prog, vertexShader);\n    gl.attachShader(prog, fragmentShader);\n    shader_1.linkProgram(gl, prog);\n    let unif_proj = gl.getUniformLocation(prog, \"projMatrix\");\n    if (!unif_proj)\n        throw new Error(\"Unable to get uniform location projMatrix\");\n    let unif_matrix = gl.getUniformLocation(prog, \"modelViewMatrix\");\n    if (!unif_matrix)\n        throw new Error(\"Unable to get uniform location modelViewMatrix\");\n    let unif_camera = gl.getUniformLocation(prog, \"cameraMatrix\");\n    if (!unif_camera)\n        throw new Error(\"Unable to get uniform location cameraMatrix\");\n    let unif_skinSampler = gl.getUniformLocation(prog, \"skinSampler\");\n    if (!unif_skinSampler)\n        throw new Error(\"Unable to get uniform location skinSampler\");\n    shader = {\n        prog,\n        unif_matrix,\n        unif_proj,\n        unif_camera,\n        unif_skinSampler,\n        attr_position: gl.getAttribLocation(prog, \"position\"),\n        attr_textureCoord: gl.getAttribLocation(prog, \"textureCoord\")\n    };\n    return shader;\n}\nfunction loadTexture(gl, url) {\n    if (texturesByUrl[url])\n        return texturesByUrl[url];\n    let texture = gl.createTexture();\n    if (!texture)\n        throw new Error(\"Unable to create texture\");\n    texturesByUrl[url] = texture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // Because images have to be download over the internet\n    // they might take a moment until they are ready.\n    // Until then put a single pixel in the texture so we can\n    // use it immediately. When the image has finished downloading\n    // we'll update the texture with the contents of the image.\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const width = 1;\n    const height = 1;\n    const border = 0;\n    const srcFormat = gl.RGBA;\n    const srcType = gl.UNSIGNED_BYTE;\n    const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\n    const image = new Image();\n    image.onload = function () {\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    };\n    image.src = url;\n    return texture;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Event1 = exports.Event = void 0;\n/**\n * A type-safe event handling class that multiple functions to be registered to be called when events are emitted.\n */\n\nclass Event {\n  constructor() {\n    this._funcs = [];\n  }\n  /**\n   * Bind new handler function.\n   * @param f - The callback function to be bound.\n   */\n\n\n  bind(f) {\n    this._funcs.push(f);\n  }\n  /**\n   * Unbind an existing handler function.\n   * @param f - The callback function to be unbound.\n   */\n\n\n  unbind(f) {\n    const indx = this._funcs.indexOf(f);\n\n    if (indx > -1) {\n      this._funcs.splice(indx, 1);\n    }\n  }\n  /**\n   * Emit an event, calling the bound handler functions.\n   */\n\n\n  emit() {\n    for (let i = 0, total = this._funcs.length; i < total; i++) {\n      this._funcs[i]();\n    }\n  }\n\n}\n\nexports.Event = Event;\n/**\n * A type-safe event handling class that multiple functions to be registered to be called when events are emitted.\n * This class will pass a single argument supplied to [[emit]] to the handler functions.\n *\n * @typeparam A - The type of the argument passed to the handler functions through [[emit]].\n */\n\nclass Event1 {\n  constructor() {\n    this._funcs = [];\n  }\n  /**\n   * Bind new handler function.\n   * @param f - The callback function to be bound.\n  */\n\n\n  bind(f) {\n    this._funcs.push(f);\n  }\n  /**\n   * Unbind an existing function.\n   * @param f - The callback function to be unbound.\n   */\n\n\n  unbind(f) {\n    const indx = this._funcs.indexOf(f);\n\n    if (indx > -1) {\n      this._funcs.splice(indx, 1);\n    }\n  }\n  /**\n   * Emit an event.\n   *\n   * @param a - The argument to pass to handler functions.\n   */\n\n\n  emit(a) {\n    for (let i = 0, total = this._funcs.length; i < total; i++) {\n      this._funcs[i](a);\n    }\n  }\n\n}\n\nexports.Event1 = Event1;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar/lib/event.js"],"names":["Object","defineProperty","exports","value","Event1","Event","constructor","_funcs","bind","f","push","unbind","indx","indexOf","splice","emit","i","total","length","a"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAAtC;AACA;AACA;AACA;;AACA,MAAMA,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,CAAD,EAAI;AACJ,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,CAAjB;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACF,CAAD,EAAI;AACN,UAAMG,IAAI,GAAG,KAAKL,MAAL,CAAYM,OAAZ,CAAoBJ,CAApB,CAAb;;AACA,QAAIG,IAAI,GAAG,CAAC,CAAZ,EAAe;AACX,WAAKL,MAAL,CAAYO,MAAZ,CAAmBF,IAAnB,EAAyB,CAAzB;AACH;AACJ;AACD;AACJ;AACA;;;AACIG,EAAAA,IAAI,GAAG;AACH,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAG,KAAKV,MAAL,CAAYW,MAApC,EAA4CF,CAAC,GAAGC,KAAhD,EAAuDD,CAAC,EAAxD,EAA4D;AACxD,WAAKT,MAAL,CAAYS,CAAZ;AACH;AACJ;;AA5BO;;AA8BZd,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,MAAN,CAAa;AACTE,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,CAAD,EAAI;AACJ,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,CAAjB;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACF,CAAD,EAAI;AACN,UAAMG,IAAI,GAAG,KAAKL,MAAL,CAAYM,OAAZ,CAAoBJ,CAApB,CAAb;;AACA,QAAIG,IAAI,GAAG,CAAC,CAAZ,EAAe;AACX,WAAKL,MAAL,CAAYO,MAAZ,CAAmBF,IAAnB,EAAyB,CAAzB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,IAAI,CAACI,CAAD,EAAI;AACJ,SAAK,IAAIH,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAG,KAAKV,MAAL,CAAYW,MAApC,EAA4CF,CAAC,GAAGC,KAAhD,EAAuDD,CAAC,EAAxD,EAA4D;AACxD,WAAKT,MAAL,CAAYS,CAAZ,EAAeG,CAAf;AACH;AACJ;;AA9BQ;;AAgCbjB,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Event1 = exports.Event = void 0;\n/**\n * A type-safe event handling class that multiple functions to be registered to be called when events are emitted.\n */\nclass Event {\n    constructor() {\n        this._funcs = [];\n    }\n    /**\n     * Bind new handler function.\n     * @param f - The callback function to be bound.\n     */\n    bind(f) {\n        this._funcs.push(f);\n    }\n    /**\n     * Unbind an existing handler function.\n     * @param f - The callback function to be unbound.\n     */\n    unbind(f) {\n        const indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    /**\n     * Emit an event, calling the bound handler functions.\n     */\n    emit() {\n        for (let i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i]();\n        }\n    }\n}\nexports.Event = Event;\n/**\n * A type-safe event handling class that multiple functions to be registered to be called when events are emitted.\n * This class will pass a single argument supplied to [[emit]] to the handler functions.\n *\n * @typeparam A - The type of the argument passed to the handler functions through [[emit]].\n */\nclass Event1 {\n    constructor() {\n        this._funcs = [];\n    }\n    /**\n     * Bind new handler function.\n     * @param f - The callback function to be bound.\n    */\n    bind(f) {\n        this._funcs.push(f);\n    }\n    /**\n     * Unbind an existing function.\n     * @param f - The callback function to be unbound.\n     */\n    unbind(f) {\n        const indx = this._funcs.indexOf(f);\n        if (indx > -1) {\n            this._funcs.splice(indx, 1);\n        }\n    }\n    /**\n     * Emit an event.\n     *\n     * @param a - The argument to pass to handler functions.\n     */\n    emit(a) {\n        for (let i = 0, total = this._funcs.length; i < total; i++) {\n            this._funcs[i](a);\n        }\n    }\n}\nexports.Event1 = Event1;\n"]},"metadata":{},"sourceType":"script"}
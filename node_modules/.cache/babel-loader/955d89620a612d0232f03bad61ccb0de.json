{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageSerializer = void 0;\n\nclass MessageSerializer {\n  constructor(_messageSender) {\n    this._messageSender = _messageSender;\n    this._freeBufferPool = [];\n    this._buffer = new ArrayBuffer(16);\n    this._i32View = new Int32Array(this._buffer);\n    this._f32View = new Float32Array(this._buffer);\n    this._f64View = new Float64Array(this._buffer);\n    this._u8View = new Uint8Array(this._buffer);\n    this._u8cView = new Uint8ClampedArray(this._buffer);\n    this._u16View = new Uint16Array(this._buffer);\n    this._u32View = new Uint32Array(this._buffer);\n    this._offset = 1;\n    this._startOffset = -1;\n    this._timeoutSet = false;\n    this._appender = {\n      int: i => this.int(i),\n      bool: i => this.int(i ? 1 : 0),\n      float: i => this.float(i),\n      string: i => this.string(i),\n      dataWithLength: i => this.arrayBuffer(i),\n      type: i => this.int(i),\n      matrix4x4: i => this.float32ArrayBuffer(i),\n      identityCoefficients: i => this.float32ArrayBuffer(i),\n      expressionCoefficients: i => this.float32ArrayBuffer(i),\n      cameraModel: i => this.float32ArrayBuffer(i),\n      timestamp: i => this.double(i),\n      barcodeFormat: i => this.int(i),\n      faceLandmarkName: i => this.int(i),\n      instantTrackerTransformOrientation: i => this.int(i),\n      logLevel: i => this.int(i)\n    };\n\n    this._freeBufferPool.push(new ArrayBuffer(16));\n\n    this._freeBufferPool.push(new ArrayBuffer(16));\n  }\n\n  bufferReturn(ab) {\n    this._freeBufferPool.push(ab);\n  } // public copySerializedData(): ArrayBuffer {\n  //     let data = this._buffer.slice(0, this._offset * Int32Array.BYTES_PER_ELEMENT);\n  //     this._offset = 0;\n  //     this._startOffset = -1;\n  //     return data;\n  // }\n\n\n  _ensureArrayBuffer(incremental) {\n    let requirement = (this._offset + incremental + 8) * 4;\n    if (this._buffer && this._buffer.byteLength >= requirement) return;\n    let newBuffer = undefined; // for (let i = 0; i < this._freeBufferPool.length; i++) {\n    //     if (this._freeBufferPool[i].byteLength > requirement) {\n    //         newBuffer = this._freeBufferPool[i];\n    //         this._freeBufferPool.splice(i, 1);\n    //         break;\n    //     }\n    // }\n\n    if (!newBuffer) {\n      let nextPow2 = requirement;\n      nextPow2--;\n      nextPow2 |= nextPow2 >> 1;\n      nextPow2 |= nextPow2 >> 2;\n      nextPow2 |= nextPow2 >> 4;\n      nextPow2 |= nextPow2 >> 8;\n      nextPow2 |= nextPow2 >> 16;\n      nextPow2++;\n      newBuffer = new ArrayBuffer(nextPow2);\n    }\n\n    let oldView = this._buffer ? this._i32View : undefined;\n    this._buffer = newBuffer;\n    this._i32View = new Int32Array(this._buffer);\n    this._f32View = new Float32Array(this._buffer);\n    this._f64View = new Float64Array(this._buffer);\n    this._u8View = new Uint8Array(this._buffer);\n    this._u8cView = new Uint8ClampedArray(this._buffer);\n    this._u16View = new Uint16Array(this._buffer);\n    this._u32View = new Uint32Array(this._buffer);\n    if (oldView) this._i32View.set(oldView.subarray(0, this._offset)); // this._offset = 1; // First int is whole length\n    // this._startOffset = -1;\n  }\n\n  sendMessage(messageId, cb) {\n    this._ensureArrayBuffer(4);\n\n    this._startOffset = this._offset;\n    this._i32View[this._offset + 1] = messageId;\n    this._offset += 2;\n    cb(this._appender);\n    this._i32View[this._startOffset] = this._offset - this._startOffset;\n    this._startOffset = -1;\n\n    this._sendOneTime();\n  }\n\n  _sendOneTime() {\n    if (this._timeoutSet === false) {\n      this._timeoutSet = true;\n      setTimeout(() => {\n        this._timeoutSet = false;\n\n        this._send();\n      }, 0);\n    }\n  }\n\n  _send() {\n    // Continue filling the current buffer unless have a new buffer to fill\n    if (this._freeBufferPool.length === 0) {\n      this._sendOneTime();\n\n      return;\n    }\n\n    this._i32View[0] = this._offset;\n\n    this._messageSender(this._buffer);\n\n    this._buffer = undefined;\n    this._buffer = this._freeBufferPool.pop();\n    this._i32View = new Int32Array(this._buffer);\n    this._f32View = new Float32Array(this._buffer);\n    this._f64View = new Float64Array(this._buffer);\n    this._u8View = new Uint8Array(this._buffer);\n    this._u8cView = new Uint8ClampedArray(this._buffer);\n    this._u16View = new Uint16Array(this._buffer);\n    this._u32View = new Uint32Array(this._buffer);\n    this._offset = 1;\n    this._startOffset = -1;\n  }\n\n  int(arg) {\n    this._ensureArrayBuffer(1);\n\n    this._i32View[this._offset] = arg;\n    this._offset++;\n  }\n\n  double(arg) {\n    this._ensureArrayBuffer(2);\n\n    if (this._offset % 2 === 1) this._offset++;\n    this._f64View[this._offset / 2] = arg;\n    this._offset += 2;\n  }\n\n  float(arg) {\n    this._ensureArrayBuffer(1);\n\n    this._f32View[this._offset] = arg;\n    this._offset++;\n  }\n\n  int32Array(args) {\n    this._ensureArrayBuffer(args.length);\n\n    for (let i = 0; i < args.length; ++i) {\n      this._i32View[this._offset + i] = args[i];\n    }\n\n    this._offset += args.length;\n  }\n\n  float32Array(args) {\n    this._ensureArrayBuffer(args.length);\n\n    for (let i = 0; i < args.length; ++i) {\n      this._f32View[this._offset + i] = args[i];\n    }\n\n    this._offset += args.length;\n  }\n\n  booleanArray(args) {\n    this._ensureArrayBuffer(args.length);\n\n    for (let i = 0; i < args.length; ++i) {\n      this._i32View[this._offset + i] = args[i] ? 1 : 0;\n    }\n\n    this._offset += args.length;\n  }\n\n  uint8ArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.byteLength;\n    this._offset++;\n\n    this._u8View.set(data, this._offset * 4); // Update the int32 offset\n\n\n    this._offset += data.byteLength >> 2;\n    if ((data.byteLength & 3) !== 0) this._offset++;\n  }\n\n  arrayBuffer(data) {\n    let view = new Uint8Array(data);\n    this.uint8ArrayBuffer(view);\n  }\n\n  uint8ClampedArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.byteLength;\n    this._offset++;\n\n    this._u8cView.set(data, this._offset * 4); // Update the int32 offset\n\n\n    this._offset += data.byteLength >> 2;\n    if ((data.byteLength & 3) !== 0) this._offset++;\n  }\n\n  float32ArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.length;\n    this._offset++;\n\n    this._f32View.set(data, this._offset);\n\n    this._offset += data.length;\n  }\n\n  uint16ArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.length;\n    this._offset++;\n    let u16Offset = this._offset * 2;\n\n    this._u16View.set(data, u16Offset); // Update the int32 offset\n\n\n    this._offset += data.length >> 1;\n    if ((data.length & 1) !== 0) this._offset++;\n  }\n\n  int32ArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.length;\n    this._offset++;\n\n    this._i32View.set(data, this._offset);\n\n    this._offset += data.length;\n  }\n\n  uint32ArrayBuffer(data) {\n    this._ensureArrayBuffer(data.byteLength / 4);\n\n    this._i32View[this._offset] = data.length;\n    this._offset++;\n\n    this._u32View.set(data, this._offset);\n\n    this._offset += data.length;\n  }\n\n  string(data) {\n    let encoder = new TextEncoder();\n    let res = encoder.encode(data);\n\n    this._ensureArrayBuffer(res.byteLength / 4);\n\n    this._i32View[this._offset] = res.byteLength;\n    this._offset++;\n\n    this._u8View.set(res, this._offset * 4); // Update the int32 offset\n\n\n    this._offset += res.byteLength >> 2;\n    if ((res.byteLength & 3) !== 0) this._offset++;\n  }\n\n}\n\nexports.MessageSerializer = MessageSerializer;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-cv/lib/serializer.js"],"names":["Object","defineProperty","exports","value","MessageSerializer","constructor","_messageSender","_freeBufferPool","_buffer","ArrayBuffer","_i32View","Int32Array","_f32View","Float32Array","_f64View","Float64Array","_u8View","Uint8Array","_u8cView","Uint8ClampedArray","_u16View","Uint16Array","_u32View","Uint32Array","_offset","_startOffset","_timeoutSet","_appender","int","i","bool","float","string","dataWithLength","arrayBuffer","type","matrix4x4","float32ArrayBuffer","identityCoefficients","expressionCoefficients","cameraModel","timestamp","double","barcodeFormat","faceLandmarkName","instantTrackerTransformOrientation","logLevel","push","bufferReturn","ab","_ensureArrayBuffer","incremental","requirement","byteLength","newBuffer","undefined","nextPow2","oldView","set","subarray","sendMessage","messageId","cb","_sendOneTime","setTimeout","_send","length","pop","arg","int32Array","args","float32Array","booleanArray","uint8ArrayBuffer","data","view","uint8ClampedArrayBuffer","uint16ArrayBuffer","u16Offset","int32ArrayBuffer","uint32ArrayBuffer","encoder","TextEncoder","res","encode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMA,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,OAAL,GAAe,IAAIC,WAAJ,CAAgB,EAAhB,CAAf;AACA,SAAKC,QAAL,GAAgB,IAAIC,UAAJ,CAAe,KAAKH,OAApB,CAAhB;AACA,SAAKI,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKL,OAAtB,CAAhB;AACA,SAAKM,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKP,OAAtB,CAAhB;AACA,SAAKQ,OAAL,GAAe,IAAIC,UAAJ,CAAe,KAAKT,OAApB,CAAf;AACA,SAAKU,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKX,OAA3B,CAAhB;AACA,SAAKY,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKb,OAArB,CAAhB;AACA,SAAKc,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKf,OAArB,CAAhB;AACA,SAAKgB,OAAL,GAAe,CAAf;AACA,SAAKC,YAAL,GAAoB,CAAC,CAArB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,SAAL,GAAiB;AACbC,MAAAA,GAAG,EAAEC,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT,CADG;AAEbC,MAAAA,IAAI,EAAED,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAC,GAAG,CAAH,GAAO,CAAjB,CAFE;AAGbE,MAAAA,KAAK,EAAEF,CAAC,IAAI,KAAKE,KAAL,CAAWF,CAAX,CAHC;AAIbG,MAAAA,MAAM,EAAEH,CAAC,IAAI,KAAKG,MAAL,CAAYH,CAAZ,CAJA;AAKbI,MAAAA,cAAc,EAAEJ,CAAC,IAAI,KAAKK,WAAL,CAAiBL,CAAjB,CALR;AAMbM,MAAAA,IAAI,EAAEN,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT,CANE;AAObO,MAAAA,SAAS,EAAEP,CAAC,IAAI,KAAKQ,kBAAL,CAAwBR,CAAxB,CAPH;AAQbS,MAAAA,oBAAoB,EAAET,CAAC,IAAI,KAAKQ,kBAAL,CAAwBR,CAAxB,CARd;AASbU,MAAAA,sBAAsB,EAAEV,CAAC,IAAI,KAAKQ,kBAAL,CAAwBR,CAAxB,CAThB;AAUbW,MAAAA,WAAW,EAAEX,CAAC,IAAI,KAAKQ,kBAAL,CAAwBR,CAAxB,CAVL;AAWbY,MAAAA,SAAS,EAAEZ,CAAC,IAAI,KAAKa,MAAL,CAAYb,CAAZ,CAXH;AAYbc,MAAAA,aAAa,EAAEd,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT,CAZP;AAabe,MAAAA,gBAAgB,EAAEf,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT,CAbV;AAcbgB,MAAAA,kCAAkC,EAAEhB,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT,CAd5B;AAebiB,MAAAA,QAAQ,EAAEjB,CAAC,IAAI,KAAKD,GAAL,CAASC,CAAT;AAfF,KAAjB;;AAiBA,SAAKtB,eAAL,CAAqBwC,IAArB,CAA0B,IAAItC,WAAJ,CAAgB,EAAhB,CAA1B;;AACA,SAAKF,eAAL,CAAqBwC,IAArB,CAA0B,IAAItC,WAAJ,CAAgB,EAAhB,CAA1B;AACH;;AACDuC,EAAAA,YAAY,CAACC,EAAD,EAAK;AACb,SAAK1C,eAAL,CAAqBwC,IAArB,CAA0BE,EAA1B;AACH,GArCmB,CAsCpB;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,kBAAkB,CAACC,WAAD,EAAc;AAC5B,QAAIC,WAAW,GAAG,CAAC,KAAK5B,OAAL,GAAe2B,WAAf,GAA6B,CAA9B,IAAmC,CAArD;AACA,QAAI,KAAK3C,OAAL,IAAgB,KAAKA,OAAL,CAAa6C,UAAb,IAA2BD,WAA/C,EACI;AACJ,QAAIE,SAAS,GAAGC,SAAhB,CAJ4B,CAK5B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAI,CAACD,SAAL,EAAgB;AACZ,UAAIE,QAAQ,GAAGJ,WAAf;AACAI,MAAAA,QAAQ;AACRA,MAAAA,QAAQ,IAAIA,QAAQ,IAAI,CAAxB;AACAA,MAAAA,QAAQ,IAAIA,QAAQ,IAAI,CAAxB;AACAA,MAAAA,QAAQ,IAAIA,QAAQ,IAAI,CAAxB;AACAA,MAAAA,QAAQ,IAAIA,QAAQ,IAAI,CAAxB;AACAA,MAAAA,QAAQ,IAAIA,QAAQ,IAAI,EAAxB;AACAA,MAAAA,QAAQ;AACRF,MAAAA,SAAS,GAAG,IAAI7C,WAAJ,CAAgB+C,QAAhB,CAAZ;AACH;;AACD,QAAIC,OAAO,GAAG,KAAKjD,OAAL,GAAe,KAAKE,QAApB,GAA+B6C,SAA7C;AACA,SAAK/C,OAAL,GAAe8C,SAAf;AACA,SAAK5C,QAAL,GAAgB,IAAIC,UAAJ,CAAe,KAAKH,OAApB,CAAhB;AACA,SAAKI,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKL,OAAtB,CAAhB;AACA,SAAKM,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKP,OAAtB,CAAhB;AACA,SAAKQ,OAAL,GAAe,IAAIC,UAAJ,CAAe,KAAKT,OAApB,CAAf;AACA,SAAKU,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKX,OAA3B,CAAhB;AACA,SAAKY,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKb,OAArB,CAAhB;AACA,SAAKc,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKf,OAArB,CAAhB;AACA,QAAIiD,OAAJ,EACI,KAAK/C,QAAL,CAAcgD,GAAd,CAAkBD,OAAO,CAACE,QAAR,CAAiB,CAAjB,EAAoB,KAAKnC,OAAzB,CAAlB,EAjCwB,CAkC5B;AACA;AACH;;AACDoC,EAAAA,WAAW,CAACC,SAAD,EAAYC,EAAZ,EAAgB;AACvB,SAAKZ,kBAAL,CAAwB,CAAxB;;AACA,SAAKzB,YAAL,GAAoB,KAAKD,OAAzB;AACA,SAAKd,QAAL,CAAc,KAAKc,OAAL,GAAe,CAA7B,IAAkCqC,SAAlC;AACA,SAAKrC,OAAL,IAAgB,CAAhB;AACAsC,IAAAA,EAAE,CAAC,KAAKnC,SAAN,CAAF;AACA,SAAKjB,QAAL,CAAc,KAAKe,YAAnB,IAAmC,KAAKD,OAAL,GAAe,KAAKC,YAAvD;AACA,SAAKA,YAAL,GAAoB,CAAC,CAArB;;AACA,SAAKsC,YAAL;AACH;;AACDA,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKrC,WAAL,KAAqB,KAAzB,EAAgC;AAC5B,WAAKA,WAAL,GAAmB,IAAnB;AACAsC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKtC,WAAL,GAAmB,KAAnB;;AACA,aAAKuC,KAAL;AACH,OAHS,EAGP,CAHO,CAAV;AAIH;AACJ;;AACDA,EAAAA,KAAK,GAAG;AACJ;AACA,QAAI,KAAK1D,eAAL,CAAqB2D,MAArB,KAAgC,CAApC,EAAuC;AACnC,WAAKH,YAAL;;AACA;AACH;;AACD,SAAKrD,QAAL,CAAc,CAAd,IAAmB,KAAKc,OAAxB;;AACA,SAAKlB,cAAL,CAAoB,KAAKE,OAAzB;;AACA,SAAKA,OAAL,GAAe+C,SAAf;AACA,SAAK/C,OAAL,GAAe,KAAKD,eAAL,CAAqB4D,GAArB,EAAf;AACA,SAAKzD,QAAL,GAAgB,IAAIC,UAAJ,CAAe,KAAKH,OAApB,CAAhB;AACA,SAAKI,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKL,OAAtB,CAAhB;AACA,SAAKM,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKP,OAAtB,CAAhB;AACA,SAAKQ,OAAL,GAAe,IAAIC,UAAJ,CAAe,KAAKT,OAApB,CAAf;AACA,SAAKU,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKX,OAA3B,CAAhB;AACA,SAAKY,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKb,OAArB,CAAhB;AACA,SAAKc,QAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKf,OAArB,CAAhB;AACA,SAAKgB,OAAL,GAAe,CAAf;AACA,SAAKC,YAAL,GAAoB,CAAC,CAArB;AACH;;AACDG,EAAAA,GAAG,CAACwC,GAAD,EAAM;AACL,SAAKlB,kBAAL,CAAwB,CAAxB;;AACA,SAAKxC,QAAL,CAAc,KAAKc,OAAnB,IAA8B4C,GAA9B;AACA,SAAK5C,OAAL;AACH;;AACDkB,EAAAA,MAAM,CAAC0B,GAAD,EAAM;AACR,SAAKlB,kBAAL,CAAwB,CAAxB;;AACA,QAAI,KAAK1B,OAAL,GAAe,CAAf,KAAqB,CAAzB,EACI,KAAKA,OAAL;AACJ,SAAKV,QAAL,CAAc,KAAKU,OAAL,GAAe,CAA7B,IAAkC4C,GAAlC;AACA,SAAK5C,OAAL,IAAgB,CAAhB;AACH;;AACDO,EAAAA,KAAK,CAACqC,GAAD,EAAM;AACP,SAAKlB,kBAAL,CAAwB,CAAxB;;AACA,SAAKtC,QAAL,CAAc,KAAKY,OAAnB,IAA8B4C,GAA9B;AACA,SAAK5C,OAAL;AACH;;AACD6C,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,SAAKpB,kBAAL,CAAwBoB,IAAI,CAACJ,MAA7B;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,IAAI,CAACJ,MAAzB,EAAiC,EAAErC,CAAnC,EAAsC;AAClC,WAAKnB,QAAL,CAAc,KAAKc,OAAL,GAAeK,CAA7B,IAAkCyC,IAAI,CAACzC,CAAD,CAAtC;AACH;;AACD,SAAKL,OAAL,IAAgB8C,IAAI,CAACJ,MAArB;AACH;;AACDK,EAAAA,YAAY,CAACD,IAAD,EAAO;AACf,SAAKpB,kBAAL,CAAwBoB,IAAI,CAACJ,MAA7B;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,IAAI,CAACJ,MAAzB,EAAiC,EAAErC,CAAnC,EAAsC;AAClC,WAAKjB,QAAL,CAAc,KAAKY,OAAL,GAAeK,CAA7B,IAAkCyC,IAAI,CAACzC,CAAD,CAAtC;AACH;;AACD,SAAKL,OAAL,IAAgB8C,IAAI,CAACJ,MAArB;AACH;;AACDM,EAAAA,YAAY,CAACF,IAAD,EAAO;AACf,SAAKpB,kBAAL,CAAwBoB,IAAI,CAACJ,MAA7B;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,IAAI,CAACJ,MAAzB,EAAiC,EAAErC,CAAnC,EAAsC;AAClC,WAAKnB,QAAL,CAAc,KAAKc,OAAL,GAAeK,CAA7B,IAAkCyC,IAAI,CAACzC,CAAD,CAAJ,GAAU,CAAV,GAAc,CAAhD;AACH;;AACD,SAAKL,OAAL,IAAgB8C,IAAI,CAACJ,MAArB;AACH;;AACDO,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACrB,UAAnC;AACA,SAAK7B,OAAL;;AACA,SAAKR,OAAL,CAAa0C,GAAb,CAAiBgB,IAAjB,EAAuB,KAAKlD,OAAL,GAAe,CAAtC,EAJmB,CAKnB;;;AACA,SAAKA,OAAL,IAAiBkD,IAAI,CAACrB,UAAL,IAAmB,CAApC;AACA,QAAI,CAACqB,IAAI,CAACrB,UAAL,GAAkB,CAAnB,MAA0B,CAA9B,EACI,KAAK7B,OAAL;AACP;;AACDU,EAAAA,WAAW,CAACwC,IAAD,EAAO;AACd,QAAIC,IAAI,GAAG,IAAI1D,UAAJ,CAAeyD,IAAf,CAAX;AACA,SAAKD,gBAAL,CAAsBE,IAAtB;AACH;;AACDC,EAAAA,uBAAuB,CAACF,IAAD,EAAO;AAC1B,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACrB,UAAnC;AACA,SAAK7B,OAAL;;AACA,SAAKN,QAAL,CAAcwC,GAAd,CAAkBgB,IAAlB,EAAwB,KAAKlD,OAAL,GAAe,CAAvC,EAJ0B,CAK1B;;;AACA,SAAKA,OAAL,IAAiBkD,IAAI,CAACrB,UAAL,IAAmB,CAApC;AACA,QAAI,CAACqB,IAAI,CAACrB,UAAL,GAAkB,CAAnB,MAA0B,CAA9B,EACI,KAAK7B,OAAL;AACP;;AACDa,EAAAA,kBAAkB,CAACqC,IAAD,EAAO;AACrB,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACR,MAAnC;AACA,SAAK1C,OAAL;;AACA,SAAKZ,QAAL,CAAc8C,GAAd,CAAkBgB,IAAlB,EAAwB,KAAKlD,OAA7B;;AACA,SAAKA,OAAL,IAAgBkD,IAAI,CAACR,MAArB;AACH;;AACDW,EAAAA,iBAAiB,CAACH,IAAD,EAAO;AACpB,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACR,MAAnC;AACA,SAAK1C,OAAL;AACA,QAAIsD,SAAS,GAAG,KAAKtD,OAAL,GAAe,CAA/B;;AACA,SAAKJ,QAAL,CAAcsC,GAAd,CAAkBgB,IAAlB,EAAwBI,SAAxB,EALoB,CAMpB;;;AACA,SAAKtD,OAAL,IAAiBkD,IAAI,CAACR,MAAL,IAAe,CAAhC;AACA,QAAI,CAACQ,IAAI,CAACR,MAAL,GAAc,CAAf,MAAsB,CAA1B,EACI,KAAK1C,OAAL;AACP;;AACDuD,EAAAA,gBAAgB,CAACL,IAAD,EAAO;AACnB,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACR,MAAnC;AACA,SAAK1C,OAAL;;AACA,SAAKd,QAAL,CAAcgD,GAAd,CAAkBgB,IAAlB,EAAwB,KAAKlD,OAA7B;;AACA,SAAKA,OAAL,IAAgBkD,IAAI,CAACR,MAArB;AACH;;AACDc,EAAAA,iBAAiB,CAACN,IAAD,EAAO;AACpB,SAAKxB,kBAAL,CAAwBwB,IAAI,CAACrB,UAAL,GAAkB,CAA1C;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8BkD,IAAI,CAACR,MAAnC;AACA,SAAK1C,OAAL;;AACA,SAAKF,QAAL,CAAcoC,GAAd,CAAkBgB,IAAlB,EAAwB,KAAKlD,OAA7B;;AACA,SAAKA,OAAL,IAAgBkD,IAAI,CAACR,MAArB;AACH;;AACDlC,EAAAA,MAAM,CAAC0C,IAAD,EAAO;AACT,QAAIO,OAAO,GAAG,IAAIC,WAAJ,EAAd;AACA,QAAIC,GAAG,GAAGF,OAAO,CAACG,MAAR,CAAeV,IAAf,CAAV;;AACA,SAAKxB,kBAAL,CAAwBiC,GAAG,CAAC9B,UAAJ,GAAiB,CAAzC;;AACA,SAAK3C,QAAL,CAAc,KAAKc,OAAnB,IAA8B2D,GAAG,CAAC9B,UAAlC;AACA,SAAK7B,OAAL;;AACA,SAAKR,OAAL,CAAa0C,GAAb,CAAiByB,GAAjB,EAAsB,KAAK3D,OAAL,GAAe,CAArC,EANS,CAOT;;;AACA,SAAKA,OAAL,IAAiB2D,GAAG,CAAC9B,UAAJ,IAAkB,CAAnC;AACA,QAAI,CAAC8B,GAAG,CAAC9B,UAAJ,GAAiB,CAAlB,MAAyB,CAA7B,EACI,KAAK7B,OAAL;AACP;;AAjOmB;;AAmOxBtB,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageSerializer = void 0;\nclass MessageSerializer {\n    constructor(_messageSender) {\n        this._messageSender = _messageSender;\n        this._freeBufferPool = [];\n        this._buffer = new ArrayBuffer(16);\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 1;\n        this._startOffset = -1;\n        this._timeoutSet = false;\n        this._appender = {\n            int: i => this.int(i),\n            bool: i => this.int(i ? 1 : 0),\n            float: i => this.float(i),\n            string: i => this.string(i),\n            dataWithLength: i => this.arrayBuffer(i),\n            type: i => this.int(i),\n            matrix4x4: i => this.float32ArrayBuffer(i),\n            identityCoefficients: i => this.float32ArrayBuffer(i),\n            expressionCoefficients: i => this.float32ArrayBuffer(i),\n            cameraModel: i => this.float32ArrayBuffer(i),\n            timestamp: i => this.double(i),\n            barcodeFormat: i => this.int(i),\n            faceLandmarkName: i => this.int(i),\n            instantTrackerTransformOrientation: i => this.int(i),\n            logLevel: i => this.int(i),\n        };\n        this._freeBufferPool.push(new ArrayBuffer(16));\n        this._freeBufferPool.push(new ArrayBuffer(16));\n    }\n    bufferReturn(ab) {\n        this._freeBufferPool.push(ab);\n    }\n    // public copySerializedData(): ArrayBuffer {\n    //     let data = this._buffer.slice(0, this._offset * Int32Array.BYTES_PER_ELEMENT);\n    //     this._offset = 0;\n    //     this._startOffset = -1;\n    //     return data;\n    // }\n    _ensureArrayBuffer(incremental) {\n        let requirement = (this._offset + incremental + 8) * 4;\n        if (this._buffer && this._buffer.byteLength >= requirement)\n            return;\n        let newBuffer = undefined;\n        // for (let i = 0; i < this._freeBufferPool.length; i++) {\n        //     if (this._freeBufferPool[i].byteLength > requirement) {\n        //         newBuffer = this._freeBufferPool[i];\n        //         this._freeBufferPool.splice(i, 1);\n        //         break;\n        //     }\n        // }\n        if (!newBuffer) {\n            let nextPow2 = requirement;\n            nextPow2--;\n            nextPow2 |= nextPow2 >> 1;\n            nextPow2 |= nextPow2 >> 2;\n            nextPow2 |= nextPow2 >> 4;\n            nextPow2 |= nextPow2 >> 8;\n            nextPow2 |= nextPow2 >> 16;\n            nextPow2++;\n            newBuffer = new ArrayBuffer(nextPow2);\n        }\n        let oldView = this._buffer ? this._i32View : undefined;\n        this._buffer = newBuffer;\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        if (oldView)\n            this._i32View.set(oldView.subarray(0, this._offset));\n        // this._offset = 1; // First int is whole length\n        // this._startOffset = -1;\n    }\n    sendMessage(messageId, cb) {\n        this._ensureArrayBuffer(4);\n        this._startOffset = this._offset;\n        this._i32View[this._offset + 1] = messageId;\n        this._offset += 2;\n        cb(this._appender);\n        this._i32View[this._startOffset] = this._offset - this._startOffset;\n        this._startOffset = -1;\n        this._sendOneTime();\n    }\n    _sendOneTime() {\n        if (this._timeoutSet === false) {\n            this._timeoutSet = true;\n            setTimeout(() => {\n                this._timeoutSet = false;\n                this._send();\n            }, 0);\n        }\n    }\n    _send() {\n        // Continue filling the current buffer unless have a new buffer to fill\n        if (this._freeBufferPool.length === 0) {\n            this._sendOneTime();\n            return;\n        }\n        this._i32View[0] = this._offset;\n        this._messageSender(this._buffer);\n        this._buffer = undefined;\n        this._buffer = this._freeBufferPool.pop();\n        this._i32View = new Int32Array(this._buffer);\n        this._f32View = new Float32Array(this._buffer);\n        this._f64View = new Float64Array(this._buffer);\n        this._u8View = new Uint8Array(this._buffer);\n        this._u8cView = new Uint8ClampedArray(this._buffer);\n        this._u16View = new Uint16Array(this._buffer);\n        this._u32View = new Uint32Array(this._buffer);\n        this._offset = 1;\n        this._startOffset = -1;\n    }\n    int(arg) {\n        this._ensureArrayBuffer(1);\n        this._i32View[this._offset] = arg;\n        this._offset++;\n    }\n    double(arg) {\n        this._ensureArrayBuffer(2);\n        if (this._offset % 2 === 1)\n            this._offset++;\n        this._f64View[this._offset / 2] = arg;\n        this._offset += 2;\n    }\n    float(arg) {\n        this._ensureArrayBuffer(1);\n        this._f32View[this._offset] = arg;\n        this._offset++;\n    }\n    int32Array(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._i32View[this._offset + i] = args[i];\n        }\n        this._offset += args.length;\n    }\n    float32Array(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._f32View[this._offset + i] = args[i];\n        }\n        this._offset += args.length;\n    }\n    booleanArray(args) {\n        this._ensureArrayBuffer(args.length);\n        for (let i = 0; i < args.length; ++i) {\n            this._i32View[this._offset + i] = args[i] ? 1 : 0;\n        }\n        this._offset += args.length;\n    }\n    uint8ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.byteLength;\n        this._offset++;\n        this._u8View.set(data, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (data.byteLength >> 2);\n        if ((data.byteLength & 3) !== 0)\n            this._offset++;\n    }\n    arrayBuffer(data) {\n        let view = new Uint8Array(data);\n        this.uint8ArrayBuffer(view);\n    }\n    uint8ClampedArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.byteLength;\n        this._offset++;\n        this._u8cView.set(data, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (data.byteLength >> 2);\n        if ((data.byteLength & 3) !== 0)\n            this._offset++;\n    }\n    float32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._f32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    uint16ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        let u16Offset = this._offset * 2;\n        this._u16View.set(data, u16Offset);\n        // Update the int32 offset\n        this._offset += (data.length >> 1);\n        if ((data.length & 1) !== 0)\n            this._offset++;\n    }\n    int32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._i32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    uint32ArrayBuffer(data) {\n        this._ensureArrayBuffer(data.byteLength / 4);\n        this._i32View[this._offset] = data.length;\n        this._offset++;\n        this._u32View.set(data, this._offset);\n        this._offset += data.length;\n    }\n    string(data) {\n        let encoder = new TextEncoder();\n        let res = encoder.encode(data);\n        this._ensureArrayBuffer(res.byteLength / 4);\n        this._i32View[this._offset] = res.byteLength;\n        this._offset++;\n        this._u8View.set(res, this._offset * 4);\n        // Update the int32 offset\n        this._offset += (res.byteLength >> 2);\n        if ((res.byteLength & 3) !== 0)\n            this._offset++;\n    }\n}\nexports.MessageSerializer = MessageSerializer;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lexer = exports.LexerDefinitionErrorType = void 0;\n\nvar lexer_1 = require(\"./lexer\");\n\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar last_1 = __importDefault(require(\"lodash/last\"));\n\nvar reject_1 = __importDefault(require(\"lodash/reject\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar identity_1 = __importDefault(require(\"lodash/identity\"));\n\nvar assign_1 = __importDefault(require(\"lodash/assign\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar tokens_1 = require(\"./tokens\");\n\nvar lexer_errors_public_1 = require(\"./lexer_errors_public\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar LexerDefinitionErrorType;\n\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType = exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));\n\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nvar Lexer =\n/** @class */\nfunction () {\n  function Lexer(lexerDefinition, config) {\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n\n    var _this = this;\n\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {}; // Duplicated from the parser's perf trace trait to allow future extraction\n    // of the lexer to a separate package.\n\n    this.TRACE_INIT = function (phaseDesc, phaseImpl) {\n      // No need to optimize this using NOOP pattern because\n      // It is not called in a hot spot...\n      if (_this.traceInitPerf === true) {\n        _this.traceInitIndent++;\n        var indent = new Array(_this.traceInitIndent + 1).join(\"\\t\");\n\n        if (_this.traceInitIndent < _this.traceInitMaxIdent) {\n          console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n        }\n\n        var _a = (0, utils_1.timer)(phaseImpl),\n            time = _a.time,\n            value = _a.value;\n        /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n        var traceMethod = time > 10 ? console.warn : console.log;\n\n        if (_this.traceInitIndent < _this.traceInitMaxIdent) {\n          traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n        }\n\n        _this.traceInitIndent--;\n        return value;\n      } else {\n        return phaseImpl();\n      }\n    };\n\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    } // todo: defaults func?\n\n\n    this.config = (0, assign_1.default)({}, DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking); // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n\n        if ((0, isArray_1.default)(lexerDefinition)) {\n          actualDefinition = {\n            modes: {\n              defaultMode: (0, clone_1.default)(lexerDefinition)\n            },\n            defaultMode: lexer_1.DEFAULT_MODE\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = (0, clone_1.default)(lexerDefinition);\n        }\n      });\n\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.performRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat((0, lexer_1.performWarningRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      } // for extra robustness to avoid throwing an none informative error message\n\n\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}; // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n\n      (0, forEach_1.default)(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = (0, reject_1.default)(currModeValue, function (currTokType) {\n          return (0, isUndefined_1.default)(currTokType);\n        });\n      });\n      var allModeNames = (0, keys_1.default)(actualDefinition.modes);\n      (0, forEach_1.default)(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\".concat(currModName, \"> processing\"), function () {\n          _this.modes.push(currModName);\n\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.validatePatterns)(currModDef, allModeNames));\n            });\n          } // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n\n\n          if ((0, isEmpty_1.default)(_this.lexerDefinitionErrors)) {\n            (0, tokens_1.augmentTokenTypes)(currModDef);\n            var currAnalyzeResult_1;\n\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = (0, lexer_1.analyzeTokenTypes)(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT\n              });\n            });\n\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = (0, assign_1.default)({}, _this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n\n      if (!(0, isEmpty_1.default)(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = (0, map_1.default)(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      } // Only print warning if there are no errors, This will avoid pl\n\n\n      (0, forEach_1.default)(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        (0, utils_1.PRINT_WARNING)(warningDescriptor.message);\n      });\n\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (lexer_1.SUPPORT_STICKY) {\n          _this.chopInput = identity_1.default;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = noop_1.default;\n          _this.match = _this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          _this.handleModes = noop_1.default;\n        }\n\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = identity_1.default;\n        }\n\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = noop_1.default;\n        }\n\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\".concat(_this.config.positionTracking, \"\\\"\"));\n        }\n\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = (0, reduce_1.default)(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n\n          return cannotBeOptimized;\n        }, []);\n\n        if (config.ensureOptimizations && !(0, isEmpty_1.default)(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \".concat(unOptimizedModes.join(\", \"), \" > cannot be optimized.\\n\") + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        (0, reg_exp_parser_1.clearRegExpParserCache)();\n      });\n\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        (0, utils_1.toFastProperties)(_this);\n      });\n    });\n  }\n\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n\n    if (!(0, isEmpty_1.default)(this.lexerDefinitionErrors)) {\n      var allErrMessages = (0, map_1.default)(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }; // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n\n\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n\n    var i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0; // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = (0, lexer_1.cloneEmptyGroups)(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns;\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    var pop_mode = function (popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = (0, last_1.default)(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    } // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n\n\n    push_mode.call(this, initialMode);\n    var currConfig;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null; // manually in-lined because > 600 chars won't be in-lined in V8\n\n        var singleCharCode = currConfig.short;\n\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n\n          if (match !== null) {\n            matchedImage = match[0];\n\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltLength = longerAlt.length;\n\n            for (k = 0; k < longerAltLength; k++) {\n              var longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              var longerAltPattern = longerAltConfig.pattern;\n              altPayload = null; // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n\n              if (longerAltConfig.isCustom === true) {\n                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n\n                if (match !== null) {\n                  matchAltImage = match[0];\n\n                  if (match.payload !== undefined) {\n                    altPayload = match.payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern, offset);\n                matchAltImage = this.match(longerAltPattern, text, offset);\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig; // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      } // successful match\n\n\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx; // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload); // TODO: optimize NOOP in case there are no special groups?\n\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength; // TODO: with newlines the column may be assigned twice\n\n        column = this.computeNewColumn(column, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        } // will be NOOP if no modes present\n\n\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset); // Identity Func (when sticky flag is enabled)\n\n          text = this.chopInput(text, 1);\n          offset++;\n\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern; // manually in-lined because > 600 chars won't be in-lined in V8\n\n            var singleCharCode = currConfig_1.short;\n\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset; // at this point we either re-synced or reached the end of the input text\n\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    } // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n\n\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  }; // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n\n\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT; // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      } // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n\n    }\n  };\n\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  };\n\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  };\n\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  };\n\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\n\nexports.Lexer = Lexer;","map":{"version":3,"mappings":"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","names":["LexerDefinitionErrorType","exports","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","lexer_errors_public_1","traceInitPerf","skipValidations","Object","freeze","lexerDefinition","config","phaseDesc","phaseImpl","_this","traceInitIndent","indent","Array","join","traceInitMaxIdent","console","log","concat","time","value","traceMethod","warn","Error","traceInitVal","Infinity","TRACE_INIT","actualDefinition","hasOnlySingleMode","lexer_1","trackStartLines","test","trackEndLines","modes","defaultMode","lexerDefinitionErrors","lexerDefinitionWarning","currModeValue","currModeName","currTokType","allModeNames","currModDef","currModName","push","currAnalyzeResult_1","tracer","patternIdxToConfig","charCodeToPatternIdxToConfig","emptyGroups","hasCustom","canModeBeOptimized","canBeOptimized","allErrMessages","error","message","allErrMessagesString","warningDescriptor","chopInput","identity_1","match","matchWithTest","updateLastIndex","noop_1","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","Lexer","text","initialMode","tokenizeInternal","i","j","k","matchAltImage","longerAlt","matchedImage","payload","altPayload","imageLength","group","tokType","newToken","errLength","droppedChar","msg","orgText","orgLength","length","offset","matchedTokensIndex","guessedNumberOfTokens","Math","floor","matchedTokens","errors","line","undefined","column","groups","trackLines","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","charCode","optimizedCharIdx","possiblePatterns","pop_mode","popToken","tokenType","PUSH_MODE","msg_1","buildUnableToPopLexerModeMessage","startOffset","startLine","startColumn","image","pop","newMode","modeCanBeOptimized","push_mode","call","currConfig","nextCharCode","charCodeAt","chosenPatternIdxToConfig","chosenPatternsLength","currPattern","pattern","singleCharCode","short","isCustom","exec","longerAltLength","longerAltConfig","longerAltPattern","tokenTypeIdx","canLineTerminator","numOfLTsInMatch","foundTerminator","lastLTEndOffset","lastIndex","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig_1","buildUnexpectedCharactersMessage","tokens","pushMode","substring","regExp","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","endOffset","tokenVector","index","tokenToAdd","token","found","regExpArray"],"sourceRoot":"","sources":["../../../src/scan/lexer_public.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GLStateManager = void 0;\nconst managers = new Map();\n\nclass GLStateManager {\n  constructor(_gl) {\n    this._gl = _gl;\n    this._viewports = [];\n    this._underlyingViewport = this._gl.viewport;\n\n    this._viewports.push(this._gl.getParameter(this._gl.VIEWPORT));\n\n    this._gl.viewport = (x, y, width, height) => {\n      this._viewports[this._viewports.length - 1] = [x, y, width, height];\n\n      this._underlyingViewport.call(this._gl, x, y, width, height);\n    };\n  }\n\n  static get(gl) {\n    let existing = managers.get(gl);\n\n    if (!existing) {\n      existing = new GLStateManager(gl);\n      managers.set(gl, existing);\n    }\n\n    return existing;\n  }\n\n  push() {\n    this._viewports.push(this._viewports[this._viewports.length - 1]);\n  }\n\n  pop() {\n    const current = this._viewports.pop();\n\n    const prev = this._viewports[this._viewports.length - 1];\n\n    if (!current || current[0] !== prev[0] || current[1] !== prev[1] || current[2] !== prev[2] || current[3] !== prev[3]) {\n      this._underlyingViewport.call(this._gl, prev[0], prev[1], prev[2], prev[3]);\n    }\n  }\n\n}\n\nexports.GLStateManager = GLStateManager;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/react-three-example-face-tracking-helmet-1/node_modules/@zappar/zappar-cv/lib/gl-state-manager.js"],"names":["Object","defineProperty","exports","value","GLStateManager","managers","Map","constructor","_gl","_viewports","_underlyingViewport","viewport","push","getParameter","VIEWPORT","x","y","width","height","length","call","get","gl","existing","set","pop","current","prev"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AACA,MAAMF,cAAN,CAAqB;AACjBG,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,mBAAL,GAA2B,KAAKF,GAAL,CAASG,QAApC;;AACA,SAAKF,UAAL,CAAgBG,IAAhB,CAAqB,KAAKJ,GAAL,CAASK,YAAT,CAAsB,KAAKL,GAAL,CAASM,QAA/B,CAArB;;AACA,SAAKN,GAAL,CAASG,QAAT,GAAoB,CAACI,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,KAAyB;AACzC,WAAKT,UAAL,CAAgB,KAAKA,UAAL,CAAgBU,MAAhB,GAAyB,CAAzC,IAA8C,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,CAA9C;;AACA,WAAKR,mBAAL,CAAyBU,IAAzB,CAA8B,KAAKZ,GAAnC,EAAwCO,CAAxC,EAA2CC,CAA3C,EAA8CC,KAA9C,EAAqDC,MAArD;AACH,KAHD;AAIH;;AACS,SAAHG,GAAG,CAACC,EAAD,EAAK;AACX,QAAIC,QAAQ,GAAGlB,QAAQ,CAACgB,GAAT,CAAaC,EAAb,CAAf;;AACA,QAAI,CAACC,QAAL,EAAe;AACXA,MAAAA,QAAQ,GAAG,IAAInB,cAAJ,CAAmBkB,EAAnB,CAAX;AACAjB,MAAAA,QAAQ,CAACmB,GAAT,CAAaF,EAAb,EAAiBC,QAAjB;AACH;;AACD,WAAOA,QAAP;AACH;;AACDX,EAAAA,IAAI,GAAG;AACH,SAAKH,UAAL,CAAgBG,IAAhB,CAAqB,KAAKH,UAAL,CAAgB,KAAKA,UAAL,CAAgBU,MAAhB,GAAyB,CAAzC,CAArB;AACH;;AACDM,EAAAA,GAAG,GAAG;AACF,UAAMC,OAAO,GAAG,KAAKjB,UAAL,CAAgBgB,GAAhB,EAAhB;;AACA,UAAME,IAAI,GAAG,KAAKlB,UAAL,CAAgB,KAAKA,UAAL,CAAgBU,MAAhB,GAAyB,CAAzC,CAAb;;AACA,QAAI,CAACO,OAAD,IAAYA,OAAO,CAAC,CAAD,CAAP,KAAeC,IAAI,CAAC,CAAD,CAA/B,IAAsCD,OAAO,CAAC,CAAD,CAAP,KAAeC,IAAI,CAAC,CAAD,CAAzD,IAAgED,OAAO,CAAC,CAAD,CAAP,KAAeC,IAAI,CAAC,CAAD,CAAnF,IAA0FD,OAAO,CAAC,CAAD,CAAP,KAAeC,IAAI,CAAC,CAAD,CAAjH,EAAsH;AAClH,WAAKjB,mBAAL,CAAyBU,IAAzB,CAA8B,KAAKZ,GAAnC,EAAwCmB,IAAI,CAAC,CAAD,CAA5C,EAAiDA,IAAI,CAAC,CAAD,CAArD,EAA0DA,IAAI,CAAC,CAAD,CAA9D,EAAmEA,IAAI,CAAC,CAAD,CAAvE;AACH;AACJ;;AA5BgB;;AA8BrBzB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GLStateManager = void 0;\nconst managers = new Map();\nclass GLStateManager {\n    constructor(_gl) {\n        this._gl = _gl;\n        this._viewports = [];\n        this._underlyingViewport = this._gl.viewport;\n        this._viewports.push(this._gl.getParameter(this._gl.VIEWPORT));\n        this._gl.viewport = (x, y, width, height) => {\n            this._viewports[this._viewports.length - 1] = [x, y, width, height];\n            this._underlyingViewport.call(this._gl, x, y, width, height);\n        };\n    }\n    static get(gl) {\n        let existing = managers.get(gl);\n        if (!existing) {\n            existing = new GLStateManager(gl);\n            managers.set(gl, existing);\n        }\n        return existing;\n    }\n    push() {\n        this._viewports.push(this._viewports[this._viewports.length - 1]);\n    }\n    pop() {\n        const current = this._viewports.pop();\n        const prev = this._viewports[this._viewports.length - 1];\n        if (!current || current[0] !== prev[0] || current[1] !== prev[1] || current[2] !== prev[2] || current[3] !== prev[3]) {\n            this._underlyingViewport.call(this._gl, prev[0], prev[1], prev[2], prev[3]);\n        }\n    }\n}\nexports.GLStateManager = GLStateManager;\n"]},"metadata":{},"sourceType":"script"}
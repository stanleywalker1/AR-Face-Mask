{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyScreenCounterRotation = exports.Pipeline = void 0;\n\nconst drawcamera_1 = require(\"./drawcamera\");\n\nconst gl_matrix_1 = require(\"gl-matrix\");\n\nconst cameramodel_1 = require(\"./cameramodel\");\n\nconst drawface_1 = require(\"./drawface\");\n\nconst drawfaceproject_1 = require(\"./drawfaceproject\");\n\nconst drawplane_1 = require(\"./drawplane\");\n\nconst event_1 = require(\"./event\");\n\nconst loglevel_1 = require(\"./loglevel\");\n\nlet byId = new Map();\n\nclass Pipeline {\n  constructor(_client, _impl, _mgr) {\n    this._client = _client;\n    this._impl = _impl;\n    this._mgr = _mgr;\n    this.pendingMessages = [];\n    this.cameraTokens = new Map();\n    this.nextCameraToken = 1;\n    this.tokensInFlight = 0;\n    this.videoTextures = [];\n    this.cameraPixelArrays = [];\n    this.onGLContextReset = new event_1.Event();\n  }\n\n  static create(client, mgr) {\n    let ret = client.pipeline_create();\n    byId.set(ret, new Pipeline(client, ret, mgr));\n    return ret;\n  }\n\n  static get(p) {\n    return byId.get(p);\n  }\n\n  frameUpdate(client) {\n    for (let msg of this.pendingMessages) {\n      client.processMessages(msg);\n\n      this._mgr.postOutgoingMessage({\n        t: \"buf\",\n        p: this._impl,\n        d: msg\n      }, [msg]);\n    }\n\n    this.pendingMessages = [];\n\n    let currentToken = this._client.pipeline_camera_frame_user_data(this._impl);\n\n    if (!currentToken) return;\n\n    for (let t of this.cameraTokens) {\n      if (t[0] < currentToken) {\n        if (t[1].texture) this.videoTextures.push(t[1].texture);\n        this.cameraTokens.delete(t[0]);\n      }\n    }\n  }\n\n  cameraTokenReturn(tokenId, pixelArray) {\n    this.cameraPixelArrays.push(pixelArray);\n    this.tokensInFlight--;\n  }\n\n  getVideoTexture() {\n    return this.videoTextures.pop();\n  }\n\n  destroy() {\n    this._client.pipeline_destroy(this._impl);\n\n    byId.delete(this._impl);\n  }\n\n  getCurrentCameraInfo() {\n    let currentToken = this._client.pipeline_camera_frame_user_data(this._impl);\n\n    if (!currentToken) return undefined;\n    return this.cameraTokens.get(currentToken);\n  }\n\n  cameraFrameDrawGL(screenWidth, screenHeight, mirror) {\n    if (!this.glContext) return;\n    let token = this.getCurrentCameraInfo();\n    if (!token) return;\n    if (!this._cameraDraw) this._cameraDraw = new drawcamera_1.CameraDraw(this.glContext);\n\n    this._cameraDraw.drawCameraFrame(screenWidth, screenHeight, token, mirror === true);\n  }\n\n  glContextLost() {\n    if (this._cameraDraw) this._cameraDraw.dispose();\n    if (this._faceDraw) this._faceDraw.dispose();\n    if (this._faceProjectDraw) this._faceProjectDraw.dispose();\n    delete this._cameraDraw;\n    delete this._faceDraw;\n    delete this._faceProjectDraw;\n    drawplane_1.disposeDrawPlane();\n    this.onGLContextReset.emit();\n\n    for (let tex of this.videoTextures) {\n      if (this.glContext) this.glContext.deleteTexture(tex);\n    }\n\n    this.videoTextures = [];\n\n    for (let info of this.cameraTokens) {\n      if (this.glContext && info[1].texture) this.glContext.deleteTexture(info[1].texture);\n      info[1].texture = undefined;\n    }\n\n    this.glContext = undefined;\n  }\n\n  glContextSet(gl, texturePool) {\n    this.glContextLost();\n    this.glContext = gl;\n    texturePool = texturePool || [];\n\n    for (let i = 0; i < 4; i++) {\n      let tex = texturePool[i] || gl.createTexture();\n\n      if (tex) {\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        this.videoTextures.push(tex);\n      }\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  drawFace(projectionMatrix, cameraMatrix, targetMatrix, o) {\n    if (!this.glContext) return;\n    if (!this._faceDraw) this._faceDraw = new drawface_1.FaceDraw(this.glContext);\n    let mat = gl_matrix_1.mat4.create();\n    gl_matrix_1.mat4.multiply(mat, projectionMatrix, cameraMatrix);\n    gl_matrix_1.mat4.multiply(mat, mat, targetMatrix);\n\n    this._faceDraw.drawFace(mat, o);\n  }\n\n  drawFaceProject(matrix, vertices, uvMatrix, uvs, indices, texture) {\n    if (!this.glContext) return;\n    if (!this._faceProjectDraw) this._faceProjectDraw = new drawfaceproject_1.FaceDrawProject(this.glContext);\n\n    this._faceProjectDraw.drawFace(matrix, vertices, uvMatrix, uvs, indices, texture);\n  }\n\n  cameraFrameTexture() {\n    var _a;\n\n    return (_a = this.getCurrentCameraInfo()) === null || _a === void 0 ? void 0 : _a.texture;\n  }\n\n  cameraFrameTextureMatrix(sw, sh, mirror) {\n    let info = this.getCurrentCameraInfo();\n    if (!info) return gl_matrix_1.mat4.create();\n    return drawcamera_1.cameraFrameTextureMatrix(info.dataWidth, info.dataHeight, sw, sh, info.uvTransform, mirror);\n  }\n\n  cameraFrameUserFacing() {\n    var _a;\n\n    return ((_a = this.getCurrentCameraInfo()) === null || _a === void 0 ? void 0 : _a.userFacing) || false;\n  }\n\n  cameraPoseWithAttitude(mirror) {\n    let res = applyScreenCounterRotation(this.getCurrentCameraInfo(), this._client.pipeline_camera_frame_camera_attitude(this._impl));\n\n    if (mirror) {\n      let scale = gl_matrix_1.mat4.create();\n      gl_matrix_1.mat4.fromScaling(scale, [-1, 1, 1]);\n      gl_matrix_1.mat4.multiply(res, scale, res);\n      gl_matrix_1.mat4.multiply(res, res, scale);\n    }\n\n    gl_matrix_1.mat4.invert(res, res);\n    return res;\n  }\n\n  processGL() {\n    if (!this.glContext) {\n      loglevel_1.zcerr(\"no GL context for camera frames - please call pipeline_gl_context_set\");\n      return;\n    }\n\n    if (!this.currentCameraSource) return;\n\n    if (this.tokensInFlight > 0) {\n      this.currentCameraSource.getFrame(true);\n      return;\n    }\n\n    let info = this.currentCameraSource.getFrame(false);\n    if (!info) return;\n    let tokenId = this.nextCameraToken++;\n    this.cameraTokens.set(tokenId, info);\n    let msg = {\n      d: info.data,\n      p: this._impl,\n      width: info.dataWidth,\n      height: info.dataHeight,\n      token: tokenId,\n      userFacing: info.userFacing,\n      t: \"cameraFrameC2S\"\n    };\n    this.tokensInFlight++;\n\n    this._mgr.postOutgoingMessage(msg, [info.data]);\n  }\n\n  motionAccelerometerSubmit(timestamp, x, y, z) {\n    this._client.pipeline_motion_accelerometer_submit(this._impl, timestamp, x, y, z);\n  }\n\n  motionRotationRateSubmit(timestamp, x, y, z) {\n    this._client.pipeline_motion_rotation_rate_submit(this._impl, timestamp, x, y, z);\n  }\n\n  motionAttitudeSubmit(timestamp, x, y, z) {\n    this._client.pipeline_motion_attitude_submit(this._impl, timestamp, x, y, z);\n  }\n\n}\n\nexports.Pipeline = Pipeline;\n\nfunction applyScreenCounterRotation(info, inp) {\n  let userFacing = false;\n  userFacing = info ? info.userFacing : false;\n  let mult = gl_matrix_1.mat4.create();\n  gl_matrix_1.mat4.fromRotation(mult, cameramodel_1.cameraRotationForScreenOrientation(userFacing) * Math.PI / 180.0, [0, 0, 1]);\n  gl_matrix_1.mat4.multiply(mult, mult, inp);\n  return mult;\n}\n\nexports.applyScreenCounterRotation = applyScreenCounterRotation;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/react-three-example-face-tracking-helmet-1/node_modules/@zappar/zappar-cv/lib/pipeline.js"],"names":["Object","defineProperty","exports","value","applyScreenCounterRotation","Pipeline","drawcamera_1","require","gl_matrix_1","cameramodel_1","drawface_1","drawfaceproject_1","drawplane_1","event_1","loglevel_1","byId","Map","constructor","_client","_impl","_mgr","pendingMessages","cameraTokens","nextCameraToken","tokensInFlight","videoTextures","cameraPixelArrays","onGLContextReset","Event","create","client","mgr","ret","pipeline_create","set","get","p","frameUpdate","msg","processMessages","postOutgoingMessage","t","d","currentToken","pipeline_camera_frame_user_data","texture","push","delete","cameraTokenReturn","tokenId","pixelArray","getVideoTexture","pop","destroy","pipeline_destroy","getCurrentCameraInfo","undefined","cameraFrameDrawGL","screenWidth","screenHeight","mirror","glContext","token","_cameraDraw","CameraDraw","drawCameraFrame","glContextLost","dispose","_faceDraw","_faceProjectDraw","disposeDrawPlane","emit","tex","deleteTexture","info","glContextSet","gl","texturePool","i","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","drawFace","projectionMatrix","cameraMatrix","targetMatrix","o","FaceDraw","mat","mat4","multiply","drawFaceProject","matrix","vertices","uvMatrix","uvs","indices","FaceDrawProject","cameraFrameTexture","_a","cameraFrameTextureMatrix","sw","sh","dataWidth","dataHeight","uvTransform","cameraFrameUserFacing","userFacing","cameraPoseWithAttitude","res","pipeline_camera_frame_camera_attitude","scale","fromScaling","invert","processGL","zcerr","currentCameraSource","getFrame","data","width","height","motionAccelerometerSubmit","timestamp","x","y","z","pipeline_motion_accelerometer_submit","motionRotationRateSubmit","pipeline_motion_rotation_rate_submit","motionAttitudeSubmit","pipeline_motion_attitude_submit","inp","mult","fromRotation","cameraRotationForScreenOrientation","Math","PI"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyScreenCounterRotation = exports.Pipeline = void 0;\nconst drawcamera_1 = require(\"./drawcamera\");\nconst gl_matrix_1 = require(\"gl-matrix\");\nconst cameramodel_1 = require(\"./cameramodel\");\nconst drawface_1 = require(\"./drawface\");\nconst drawfaceproject_1 = require(\"./drawfaceproject\");\nconst drawplane_1 = require(\"./drawplane\");\nconst event_1 = require(\"./event\");\nconst loglevel_1 = require(\"./loglevel\");\nlet byId = new Map();\nclass Pipeline {\n    constructor(_client, _impl, _mgr) {\n        this._client = _client;\n        this._impl = _impl;\n        this._mgr = _mgr;\n        this.pendingMessages = [];\n        this.cameraTokens = new Map();\n        this.nextCameraToken = 1;\n        this.tokensInFlight = 0;\n        this.videoTextures = [];\n        this.cameraPixelArrays = [];\n        this.onGLContextReset = new event_1.Event();\n    }\n    static create(client, mgr) {\n        let ret = client.pipeline_create();\n        byId.set(ret, new Pipeline(client, ret, mgr));\n        return ret;\n    }\n    static get(p) {\n        return byId.get(p);\n    }\n    frameUpdate(client) {\n        for (let msg of this.pendingMessages) {\n            client.processMessages(msg);\n            this._mgr.postOutgoingMessage({\n                t: \"buf\",\n                p: this._impl,\n                d: msg\n            }, [msg]);\n        }\n        this.pendingMessages = [];\n        let currentToken = this._client.pipeline_camera_frame_user_data(this._impl);\n        if (!currentToken)\n            return;\n        for (let t of this.cameraTokens) {\n            if (t[0] < currentToken) {\n                if (t[1].texture)\n                    this.videoTextures.push(t[1].texture);\n                this.cameraTokens.delete(t[0]);\n            }\n        }\n    }\n    cameraTokenReturn(tokenId, pixelArray) {\n        this.cameraPixelArrays.push(pixelArray);\n        this.tokensInFlight--;\n    }\n    getVideoTexture() {\n        return this.videoTextures.pop();\n    }\n    destroy() {\n        this._client.pipeline_destroy(this._impl);\n        byId.delete(this._impl);\n    }\n    getCurrentCameraInfo() {\n        let currentToken = this._client.pipeline_camera_frame_user_data(this._impl);\n        if (!currentToken)\n            return undefined;\n        return this.cameraTokens.get(currentToken);\n    }\n    cameraFrameDrawGL(screenWidth, screenHeight, mirror) {\n        if (!this.glContext)\n            return;\n        let token = this.getCurrentCameraInfo();\n        if (!token)\n            return;\n        if (!this._cameraDraw)\n            this._cameraDraw = new drawcamera_1.CameraDraw(this.glContext);\n        this._cameraDraw.drawCameraFrame(screenWidth, screenHeight, token, mirror === true);\n    }\n    glContextLost() {\n        if (this._cameraDraw)\n            this._cameraDraw.dispose();\n        if (this._faceDraw)\n            this._faceDraw.dispose();\n        if (this._faceProjectDraw)\n            this._faceProjectDraw.dispose();\n        delete this._cameraDraw;\n        delete this._faceDraw;\n        delete this._faceProjectDraw;\n        drawplane_1.disposeDrawPlane();\n        this.onGLContextReset.emit();\n        for (let tex of this.videoTextures) {\n            if (this.glContext)\n                this.glContext.deleteTexture(tex);\n        }\n        this.videoTextures = [];\n        for (let info of this.cameraTokens) {\n            if (this.glContext && info[1].texture)\n                this.glContext.deleteTexture(info[1].texture);\n            info[1].texture = undefined;\n        }\n        this.glContext = undefined;\n    }\n    glContextSet(gl, texturePool) {\n        this.glContextLost();\n        this.glContext = gl;\n        texturePool = texturePool || [];\n        for (let i = 0; i < 4; i++) {\n            let tex = texturePool[i] || gl.createTexture();\n            if (tex) {\n                gl.bindTexture(gl.TEXTURE_2D, tex);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                this.videoTextures.push(tex);\n            }\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n    drawFace(projectionMatrix, cameraMatrix, targetMatrix, o) {\n        if (!this.glContext)\n            return;\n        if (!this._faceDraw)\n            this._faceDraw = new drawface_1.FaceDraw(this.glContext);\n        let mat = gl_matrix_1.mat4.create();\n        gl_matrix_1.mat4.multiply(mat, projectionMatrix, cameraMatrix);\n        gl_matrix_1.mat4.multiply(mat, mat, targetMatrix);\n        this._faceDraw.drawFace(mat, o);\n    }\n    drawFaceProject(matrix, vertices, uvMatrix, uvs, indices, texture) {\n        if (!this.glContext)\n            return;\n        if (!this._faceProjectDraw)\n            this._faceProjectDraw = new drawfaceproject_1.FaceDrawProject(this.glContext);\n        this._faceProjectDraw.drawFace(matrix, vertices, uvMatrix, uvs, indices, texture);\n    }\n    cameraFrameTexture() {\n        var _a;\n        return (_a = this.getCurrentCameraInfo()) === null || _a === void 0 ? void 0 : _a.texture;\n    }\n    cameraFrameTextureMatrix(sw, sh, mirror) {\n        let info = this.getCurrentCameraInfo();\n        if (!info)\n            return gl_matrix_1.mat4.create();\n        return drawcamera_1.cameraFrameTextureMatrix(info.dataWidth, info.dataHeight, sw, sh, info.uvTransform, mirror);\n    }\n    cameraFrameUserFacing() {\n        var _a;\n        return ((_a = this.getCurrentCameraInfo()) === null || _a === void 0 ? void 0 : _a.userFacing) || false;\n    }\n    cameraPoseWithAttitude(mirror) {\n        let res = applyScreenCounterRotation(this.getCurrentCameraInfo(), this._client.pipeline_camera_frame_camera_attitude(this._impl));\n        if (mirror) {\n            let scale = gl_matrix_1.mat4.create();\n            gl_matrix_1.mat4.fromScaling(scale, [-1, 1, 1]);\n            gl_matrix_1.mat4.multiply(res, scale, res);\n            gl_matrix_1.mat4.multiply(res, res, scale);\n        }\n        gl_matrix_1.mat4.invert(res, res);\n        return res;\n    }\n    processGL() {\n        if (!this.glContext) {\n            loglevel_1.zcerr(\"no GL context for camera frames - please call pipeline_gl_context_set\");\n            return;\n        }\n        if (!this.currentCameraSource)\n            return;\n        if (this.tokensInFlight > 0) {\n            this.currentCameraSource.getFrame(true);\n            return;\n        }\n        let info = this.currentCameraSource.getFrame(false);\n        if (!info)\n            return;\n        let tokenId = this.nextCameraToken++;\n        this.cameraTokens.set(tokenId, info);\n        let msg = {\n            d: info.data,\n            p: this._impl,\n            width: info.dataWidth,\n            height: info.dataHeight,\n            token: tokenId,\n            userFacing: info.userFacing,\n            t: \"cameraFrameC2S\"\n        };\n        this.tokensInFlight++;\n        this._mgr.postOutgoingMessage(msg, [info.data]);\n    }\n    motionAccelerometerSubmit(timestamp, x, y, z) {\n        this._client.pipeline_motion_accelerometer_submit(this._impl, timestamp, x, y, z);\n    }\n    motionRotationRateSubmit(timestamp, x, y, z) {\n        this._client.pipeline_motion_rotation_rate_submit(this._impl, timestamp, x, y, z);\n    }\n    motionAttitudeSubmit(timestamp, x, y, z) {\n        this._client.pipeline_motion_attitude_submit(this._impl, timestamp, x, y, z);\n    }\n}\nexports.Pipeline = Pipeline;\nfunction applyScreenCounterRotation(info, inp) {\n    let userFacing = false;\n    userFacing = info ? info.userFacing : false;\n    let mult = gl_matrix_1.mat4.create();\n    gl_matrix_1.mat4.fromRotation(mult, cameramodel_1.cameraRotationForScreenOrientation(userFacing) * Math.PI / 180.0, [0, 0, 1]);\n    gl_matrix_1.mat4.multiply(mult, mult, inp);\n    return mult;\n}\nexports.applyScreenCounterRotation = applyScreenCounterRotation;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceLandmarkGroup = void 0;\n\nconst zappar_1 = require(\"@zappar/zappar\");\n\nconst gl_matrix_1 = require(\"gl-matrix\");\n\nconst three_1 = require(\"../three\");\n\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group which attaches content to a known point (landmark) on a face as it moves around in the camera view.\n * Landmarks will remain accurate, even as the user's expression changes.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\n\n\nclass FaceLandmarkGroup extends three_1.THREE.Group {\n  /**\n   * Constructs a new FaceLandmarkGroup.\n   * @param camera - A ZapparThree.Camera.\n   * @param faceTracker - The face tracker which will be used.\n   * @param landmark - The landmark to which the group will be anchored.\n   */\n  constructor(camera, faceTracker, landmark) {\n    super();\n    this.camera = camera;\n    this.faceTracker = faceTracker;\n    this.pose = gl_matrix_1.mat4.create();\n    this.landmark = new zappar_1.FaceLandmark(landmark); // We'll be updating this Group's matrix ourselves from the Zappar library\n\n    this.matrixAutoUpdate = false;\n  }\n\n  updateMatrixWorld(force) {\n    if (!this.currentAnchor || !this.faceTracker.visible.has(this.currentAnchor)) {\n      // No current anchor, or current anchor isn't visible\n      this.currentAnchor = this.faceTracker.visible.values().next().value;\n    }\n\n    if (this.currentAnchor) {\n      this.landmark.updateFromFaceAnchor(this.currentAnchor, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses);\n      gl_matrix_1.mat4.multiply(this.pose, this.currentAnchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses), this.landmark.pose);\n      this.matrix.fromArray(this.pose);\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n    }\n\n    super.updateMatrixWorld(force);\n  }\n  /**\n   * Destroys the face landmark.\n   */\n\n\n  dispose() {\n    this.landmark.destroy();\n  }\n\n}\n\nexports.FaceLandmarkGroup = FaceLandmarkGroup;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/trackers/facelandmarkgroup.js"],"names":["Object","defineProperty","exports","value","FaceLandmarkGroup","zappar_1","require","gl_matrix_1","three_1","camera_1","THREE","Group","constructor","camera","faceTracker","landmark","pose","mat4","create","FaceLandmark","matrixAutoUpdate","updateMatrixWorld","force","currentAnchor","visible","has","values","next","updateFromFaceAnchor","currentMirrorMode","CameraMirrorMode","Poses","multiply","rawPose","matrix","fromArray","decompose","position","quaternion","scale","dispose","destroy"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,iBAAN,SAAgCI,OAAO,CAACE,KAAR,CAAcC,KAA9C,CAAoD;AAChD;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsBC,QAAtB,EAAgC;AACvC;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,IAAL,GAAYT,WAAW,CAACU,IAAZ,CAAiBC,MAAjB,EAAZ;AACA,SAAKH,QAAL,GAAgB,IAAIV,QAAQ,CAACc,YAAb,CAA0BJ,QAA1B,CAAhB,CALuC,CAMvC;;AACA,SAAKK,gBAAL,GAAwB,KAAxB;AACH;;AACDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrB,QAAI,CAAC,KAAKC,aAAN,IAAuB,CAAC,KAAKT,WAAL,CAAiBU,OAAjB,CAAyBC,GAAzB,CAA6B,KAAKF,aAAlC,CAA5B,EAA8E;AAC1E;AACA,WAAKA,aAAL,GAAqB,KAAKT,WAAL,CAAiBU,OAAjB,CAAyBE,MAAzB,GAAkCC,IAAlC,GAAyCxB,KAA9D;AACH;;AACD,QAAI,KAAKoB,aAAT,EAAwB;AACpB,WAAKR,QAAL,CAAca,oBAAd,CAAmC,KAAKL,aAAxC,EAAuD,KAAKV,MAAL,CAAYgB,iBAAZ,KAAkCpB,QAAQ,CAACqB,gBAAT,CAA0BC,KAAnH;AACAxB,MAAAA,WAAW,CAACU,IAAZ,CAAiBe,QAAjB,CAA0B,KAAKhB,IAA/B,EAAqC,KAAKO,aAAL,CAAmBP,IAAnB,CAAwB,KAAKH,MAAL,CAAYoB,OAApC,EAA6C,KAAKpB,MAAL,CAAYgB,iBAAZ,KAAkCpB,QAAQ,CAACqB,gBAAT,CAA0BC,KAAzG,CAArC,EAAsJ,KAAKhB,QAAL,CAAcC,IAApK;AACA,WAAKkB,MAAL,CAAYC,SAAZ,CAAsB,KAAKnB,IAA3B;AACA,WAAKkB,MAAL,CAAYE,SAAZ,CAAsB,KAAKC,QAA3B,EAAqC,KAAKC,UAA1C,EAAsD,KAAKC,KAA3D;AACH;;AACD,UAAMlB,iBAAN,CAAwBC,KAAxB;AACH;AACD;AACJ;AACA;;;AACIkB,EAAAA,OAAO,GAAG;AACN,SAAKzB,QAAL,CAAc0B,OAAd;AACH;;AAlC+C;;AAoCpDvC,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FaceLandmarkGroup = void 0;\nconst zappar_1 = require(\"@zappar/zappar\");\nconst gl_matrix_1 = require(\"gl-matrix\");\nconst three_1 = require(\"../three\");\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group which attaches content to a known point (landmark) on a face as it moves around in the camera view.\n * Landmarks will remain accurate, even as the user's expression changes.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\nclass FaceLandmarkGroup extends three_1.THREE.Group {\n    /**\n     * Constructs a new FaceLandmarkGroup.\n     * @param camera - A ZapparThree.Camera.\n     * @param faceTracker - The face tracker which will be used.\n     * @param landmark - The landmark to which the group will be anchored.\n     */\n    constructor(camera, faceTracker, landmark) {\n        super();\n        this.camera = camera;\n        this.faceTracker = faceTracker;\n        this.pose = gl_matrix_1.mat4.create();\n        this.landmark = new zappar_1.FaceLandmark(landmark);\n        // We'll be updating this Group's matrix ourselves from the Zappar library\n        this.matrixAutoUpdate = false;\n    }\n    updateMatrixWorld(force) {\n        if (!this.currentAnchor || !this.faceTracker.visible.has(this.currentAnchor)) {\n            // No current anchor, or current anchor isn't visible\n            this.currentAnchor = this.faceTracker.visible.values().next().value;\n        }\n        if (this.currentAnchor) {\n            this.landmark.updateFromFaceAnchor(this.currentAnchor, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses);\n            gl_matrix_1.mat4.multiply(this.pose, this.currentAnchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses), this.landmark.pose);\n            this.matrix.fromArray(this.pose);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(force);\n    }\n    /**\n     * Destroys the face landmark.\n     */\n    dispose() {\n        this.landmark.destroy();\n    }\n}\nexports.FaceLandmarkGroup = FaceLandmarkGroup;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceTrackerLoader = void 0;\n/* eslint-disable class-methods-use-this */\n\nconst three_1 = require(\"../three\");\n\nconst defaultpipeline_1 = require(\"../defaultpipeline\");\n/**\n * Loader for face tracking model data.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\n\n\nclass FaceTrackerLoader extends three_1.THREE.Loader {\n  /**\n   * Loads face tracking model data.\n   * @param customModel - A URL to, or ArrayBuffer of, model data.\n   * @param options - A URL or ArrayBuffer of the source mesh data or defines if some face features should be filled with polygons.\n   * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n   * @param onError - Callback which is called if there's an error loading the mesh.\n   * @returns The FaceTracker.\n   */\n  load(customModel, onLoad, onProgress, onError) {\n    const trk = new defaultpipeline_1.FaceTracker();\n    const p = customModel ? trk.loadModel(customModel) : trk.loadDefaultModel();\n    const itemFilename = typeof customModel === \"string\" ? customModel : \"__zappar_threejs_face_tracker_default\";\n    p.then(() => {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n      this.manager.itemEnd(itemFilename);\n    }).catch(_ => {\n      onError === null || onError === void 0 ? void 0 : onError(_);\n      this.manager.itemError(itemFilename);\n      this.manager.itemEnd(itemFilename);\n    });\n    return trk;\n  }\n  /**\n   * @ignore\n   */\n\n\n  parse() {}\n\n}\n\nexports.FaceTrackerLoader = FaceTrackerLoader;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/react-three-example-face-tracking-helmet-1/node_modules/@zappar/zappar-threejs/lib/loaders/facetrackerloader.js"],"names":["Object","defineProperty","exports","value","FaceTrackerLoader","three_1","require","defaultpipeline_1","THREE","Loader","load","customModel","onLoad","onProgress","onError","trk","FaceTracker","p","loadModel","loadDefaultModel","itemFilename","then","manager","itemEnd","catch","_","itemError","parse"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;AACA;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,oBAAD,CAAjC;AACA;AACA;AACA;AACA;;;AACA,MAAMF,iBAAN,SAAgCC,OAAO,CAACG,KAAR,CAAcC,MAA9C,CAAqD;AACjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,IAAI,CAACC,WAAD,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,OAAlC,EAA2C;AAC3C,UAAMC,GAAG,GAAG,IAAIR,iBAAiB,CAACS,WAAtB,EAAZ;AACA,UAAMC,CAAC,GAAGN,WAAW,GAAGI,GAAG,CAACG,SAAJ,CAAcP,WAAd,CAAH,GAAgCI,GAAG,CAACI,gBAAJ,EAArD;AACA,UAAMC,YAAY,GAAG,OAAOT,WAAP,KAAuB,QAAvB,GAAkCA,WAAlC,GAAgD,uCAArE;AACAM,IAAAA,CAAC,CAACI,IAAF,CAAO,MAAM;AACTT,MAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACG,GAAD,CAAtD;AACA,WAAKO,OAAL,CAAaC,OAAb,CAAqBH,YAArB;AACH,KAHD,EAGGI,KAHH,CAGUC,CAAD,IAAO;AACZX,MAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACW,CAAD,CAAzD;AACA,WAAKH,OAAL,CAAaI,SAAb,CAAuBN,YAAvB;AACA,WAAKE,OAAL,CAAaC,OAAb,CAAqBH,YAArB;AACH,KAPD;AAQA,WAAOL,GAAP;AACH;AACD;AACJ;AACA;;;AACIY,EAAAA,KAAK,GAAG,CAAG;;AA1BsC;;AA4BrDzB,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FaceTrackerLoader = void 0;\n/* eslint-disable class-methods-use-this */\nconst three_1 = require(\"../three\");\nconst defaultpipeline_1 = require(\"../defaultpipeline\");\n/**\n * Loader for face tracking model data.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/face-tracking/\n */\nclass FaceTrackerLoader extends three_1.THREE.Loader {\n    /**\n     * Loads face tracking model data.\n     * @param customModel - A URL to, or ArrayBuffer of, model data.\n     * @param options - A URL or ArrayBuffer of the source mesh data or defines if some face features should be filled with polygons.\n     * @param onLoad - Callback which returns the FaceMesh once it's loaded.\n     * @param onError - Callback which is called if there's an error loading the mesh.\n     * @returns The FaceTracker.\n     */\n    load(customModel, onLoad, onProgress, onError) {\n        const trk = new defaultpipeline_1.FaceTracker();\n        const p = customModel ? trk.loadModel(customModel) : trk.loadDefaultModel();\n        const itemFilename = typeof customModel === \"string\" ? customModel : \"__zappar_threejs_face_tracker_default\";\n        p.then(() => {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad(trk);\n            this.manager.itemEnd(itemFilename);\n        }).catch((_) => {\n            onError === null || onError === void 0 ? void 0 : onError(_);\n            this.manager.itemError(itemFilename);\n            this.manager.itemEnd(itemFilename);\n        });\n        return trk;\n    }\n    /**\n     * @ignore\n     */\n    parse() { }\n}\nexports.FaceTrackerLoader = FaceTrackerLoader;\n"]},"metadata":{},"sourceType":"script"}
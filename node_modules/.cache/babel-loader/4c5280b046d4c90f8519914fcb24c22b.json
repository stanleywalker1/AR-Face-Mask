{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstantWorldAnchorGroup = void 0;\n\nconst three_1 = require(\"../three\");\n\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group which attaches content to a point on a surface in front of the user as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/instant-world-tracking/\n */\n\n\nclass InstantWorldAnchorGroup extends three_1.THREE.Group {\n  /**\n   * Constructs a new InstantWorldAnchorGroup.\n   * @param camera - A ZapparThree.Camera.\n   * @param instantTracker - The instant world tracker which will be used.\n   */\n  constructor(camera, instantTracker) {\n    super();\n    this.camera = camera;\n    this.instantTracker = instantTracker; // We'll be updating this Group's matrix ourselves from the Zappar library\n\n    this.matrixAutoUpdate = false;\n  }\n  /**\n   * Sets the point in the user's environment that the anchor tracks from.\n   *\n   * The parameters passed in to this function correspond to the X, Y and Z coordinates (in camera space) of the point to track.\n   * Choosing a position with X and Y coordinates of zero, and a negative Z coordinate,\n   * will select a point on a surface directly in front of the center of the screen.\n   *\n   * @param orientation -  The orientation of the point in space.\n   */\n\n\n  setAnchorPoseFromCameraOffset(x, y, z, orientation) {\n    this.instantTracker.setAnchorPoseFromCameraOffset(x, y, z, orientation);\n  }\n\n  updateMatrixWorld(force) {\n    this.matrix.fromArray(this.instantTracker.anchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses));\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n    super.updateMatrixWorld(force);\n  }\n\n}\n\nexports.InstantWorldAnchorGroup = InstantWorldAnchorGroup;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-threejs/lib/trackers/instantworldanchorgroup.js"],"names":["Object","defineProperty","exports","value","InstantWorldAnchorGroup","three_1","require","camera_1","THREE","Group","constructor","camera","instantTracker","matrixAutoUpdate","setAnchorPoseFromCameraOffset","x","y","z","orientation","updateMatrixWorld","force","matrix","fromArray","anchor","pose","rawPose","currentMirrorMode","CameraMirrorMode","Poses","decompose","position","quaternion","scale"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;AACA;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,OAAO,CAACG,KAAR,CAAcC,KAApD,CAA0D;AACtD;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,cAAT,EAAyB;AAChC;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsBA,cAAtB,CAHgC,CAIhC;;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,6BAA6B,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,WAAV,EAAuB;AAChD,SAAKN,cAAL,CAAoBE,6BAApB,CAAkDC,CAAlD,EAAqDC,CAArD,EAAwDC,CAAxD,EAA2DC,WAA3D;AACH;;AACDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrB,SAAKC,MAAL,CAAYC,SAAZ,CAAsB,KAAKV,cAAL,CAAoBW,MAApB,CAA2BC,IAA3B,CAAgC,KAAKb,MAAL,CAAYc,OAA5C,EAAqD,KAAKd,MAAL,CAAYe,iBAAZ,KAAkCnB,QAAQ,CAACoB,gBAAT,CAA0BC,KAAjH,CAAtB;AACA,SAAKP,MAAL,CAAYQ,SAAZ,CAAsB,KAAKC,QAA3B,EAAqC,KAAKC,UAA1C,EAAsD,KAAKC,KAA3D;AACA,UAAMb,iBAAN,CAAwBC,KAAxB;AACH;;AA7BqD;;AA+B1DlB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstantWorldAnchorGroup = void 0;\nconst three_1 = require(\"../three\");\nconst camera_1 = require(\"../camera\");\n/**\n * A THREE.Group which attaches content to a point on a surface in front of the user as it moves around in the camera view.\n * @see https://docs.zap.works/universal-ar/web-libraries/threejs/instant-world-tracking/\n */\nclass InstantWorldAnchorGroup extends three_1.THREE.Group {\n    /**\n     * Constructs a new InstantWorldAnchorGroup.\n     * @param camera - A ZapparThree.Camera.\n     * @param instantTracker - The instant world tracker which will be used.\n     */\n    constructor(camera, instantTracker) {\n        super();\n        this.camera = camera;\n        this.instantTracker = instantTracker;\n        // We'll be updating this Group's matrix ourselves from the Zappar library\n        this.matrixAutoUpdate = false;\n    }\n    /**\n     * Sets the point in the user's environment that the anchor tracks from.\n     *\n     * The parameters passed in to this function correspond to the X, Y and Z coordinates (in camera space) of the point to track.\n     * Choosing a position with X and Y coordinates of zero, and a negative Z coordinate,\n     * will select a point on a surface directly in front of the center of the screen.\n     *\n     * @param orientation -  The orientation of the point in space.\n     */\n    setAnchorPoseFromCameraOffset(x, y, z, orientation) {\n        this.instantTracker.setAnchorPoseFromCameraOffset(x, y, z, orientation);\n    }\n    updateMatrixWorld(force) {\n        this.matrix.fromArray(this.instantTracker.anchor.pose(this.camera.rawPose, this.camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses));\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        super.updateMatrixWorld(force);\n    }\n}\nexports.InstantWorldAnchorGroup = InstantWorldAnchorGroup;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\nconst PointerLockControls = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    domElement,\n    selector,\n    onChange,\n    onLock,\n    onUnlock,\n    enabled = true,\n    ...props\n  } = _ref;\n  const {\n    camera,\n    ...rest\n  } = props;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const defaultCamera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const raycaster = useThree(state => state.raycaster);\n  const events = useThree(state => state.events);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const [controls] = React.useState(() => new PointerLockControls$1(explCamera));\n  React.useEffect(() => {\n    if (enabled) {\n      controls.connect(explDomElement); // Force events to be centered while PLC is active\n\n      const oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = e => ({\n        offsetX: e.target.width / 2,\n        offsetY: e.target.height / 2\n      });\n\n      return () => {\n        controls.disconnect();\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, controls]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onLock) controls.addEventListener('lock', onLock);\n    if (onUnlock) controls.addEventListener('unlock', onUnlock); // Enforce previous interaction\n\n    const handler = () => controls.lock();\n\n    const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n    elements.forEach(element => element && element.addEventListener('click', handler));\n    return () => {\n      controls.removeEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock);\n      elements.forEach(element => element ? element.removeEventListener('click', handler) : undefined);\n    };\n  }, [onChange, onLock, onUnlock, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\nexport { PointerLockControls };","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@react-three/drei/core/PointerLockControls.js"],"names":["_extends","useThree","React","PointerLockControls","PointerLockControls$1","forwardRef","ref","domElement","selector","onChange","onLock","onUnlock","enabled","props","camera","rest","gl","defaultCamera","state","invalidate","raycaster","events","explCamera","explDomElement","connected","controls","useState","useEffect","connect","oldComputeOffsets","computeOffsets","e","offsetX","target","width","offsetY","height","disconnect","callback","addEventListener","handler","lock","elements","Array","from","document","querySelectorAll","forEach","element","removeEventListener","undefined","createElement","object"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\n\nconst PointerLockControls = /*#__PURE__*/React.forwardRef(({\n  domElement,\n  selector,\n  onChange,\n  onLock,\n  onUnlock,\n  enabled = true,\n  ...props\n}, ref) => {\n  const {\n    camera,\n    ...rest\n  } = props;\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const defaultCamera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const raycaster = useThree(state => state.raycaster);\n  const events = useThree(state => state.events);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const [controls] = React.useState(() => new PointerLockControls$1(explCamera));\n  React.useEffect(() => {\n    if (enabled) {\n      controls.connect(explDomElement); // Force events to be centered while PLC is active\n\n      const oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = e => ({\n        offsetX: e.target.width / 2,\n        offsetY: e.target.height / 2\n      });\n\n      return () => {\n        controls.disconnect();\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, controls]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onLock) controls.addEventListener('lock', onLock);\n    if (onUnlock) controls.addEventListener('unlock', onUnlock); // Enforce previous interaction\n\n    const handler = () => controls.lock();\n\n    const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n    elements.forEach(element => element && element.addEventListener('click', handler));\n    return () => {\n      controls.removeEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock);\n      elements.forEach(element => element ? element.removeEventListener('click', handler) : undefined);\n    };\n  }, [onChange, onLock, onUnlock, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\n\nexport { PointerLockControls };\n"]},"metadata":{},"sourceType":"module"}
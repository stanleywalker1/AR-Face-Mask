{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.launchWorkerServer = exports.messageManager = void 0;\n\nconst ZNM = require(\"./zcv\");\n\nconst zappar_cwrap_1 = require(\"./gen/zappar-cwrap\");\n\nconst zappar_server_1 = require(\"./gen/zappar-server\");\n\nconst messages_1 = require(\"./messages\");\n\nconst gl_matrix_1 = require(\"gl-matrix\");\n\nexports.messageManager = new messages_1.MsgManager();\n\nfunction launchWorkerServer(wasmUrl) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let mod = ZNM.default({\n      locateFile: (path, prefix) => {\n        if (path.endsWith(\"zcv.wasm\")) {\n          return wasmUrl;\n        }\n\n        return prefix + path;\n      },\n      onRuntimeInitialized: () => {\n        let r = zappar_cwrap_1.getRuntimeObject(mod);\n        let server = new zappar_server_1.zappar_server(r, (pipelineId, ab) => {\n          exports.messageManager.postOutgoingMessage({\n            p: pipelineId,\n            t: \"zappar\",\n            d: ab\n          }, [ab]);\n        });\n        exports.messageManager.postOutgoingMessage(\"loaded\", []);\n        exports.messageManager.onIncomingMessage.bind(msg => {\n          var _a;\n\n          switch (msg.t) {\n            case \"zappar\":\n              server.processBuffer(msg.d);\n              exports.messageManager.postOutgoingMessage({\n                t: \"buf\",\n                d: msg.d\n              }, [msg.d]);\n              break;\n\n            case \"buf\":\n              (_a = server.serializersByPipelineId.get(msg.p)) === null || _a === void 0 ? void 0 : _a.bufferReturn(msg.d);\n              break;\n\n            case \"cameraFrameC2S\":\n              let msgt = msg; // PROCESS DATA\n\n              let cameraToDeviceTransform = gl_matrix_1.mat4.create();\n\n              if (msgt.userFacing) {\n                gl_matrix_1.mat4.fromScaling(cameraToDeviceTransform, [-1, 1, -1]);\n              }\n\n              let pipeline = server._pipeline_by_instance.get(msgt.p);\n\n              if (pipeline) {\n                r.pipeline_camera_frame_submit(pipeline, msgt.d, msgt.width, msgt.height, msgt.token, cameraToDeviceTransform);\n                r.pipeline_frame_update(pipeline);\n                server.exploreState();\n              }\n\n              let ret = {\n                token: msgt.token,\n                d: msgt.d,\n                p: msgt.p,\n                t: \"cameraFrameRecycleS2C\"\n              };\n              exports.messageManager.postOutgoingMessage(ret, [msgt.d]);\n              break;\n          }\n        });\n      }\n    });\n  });\n}\n\nexports.launchWorkerServer = launchWorkerServer;\n;","map":{"version":3,"sources":["/Users/StanleyWalker/Desktop/face-mask-demo/AR-Face-Mask/node_modules/@zappar/zappar-cv/lib/worker-server.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","launchWorkerServer","messageManager","ZNM","require","zappar_cwrap_1","zappar_server_1","messages_1","gl_matrix_1","MsgManager","wasmUrl","mod","default","locateFile","path","prefix","endsWith","onRuntimeInitialized","r","getRuntimeObject","server","zappar_server","pipelineId","ab","postOutgoingMessage","p","t","d","onIncomingMessage","bind","msg","_a","processBuffer","serializersByPipelineId","get","bufferReturn","msgt","cameraToDeviceTransform","mat4","create","userFacing","fromScaling","pipeline","_pipeline_by_instance","pipeline_camera_frame_submit","width","height","token","pipeline_frame_update","exploreState","ret"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEf,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAe,OAAO,CAACC,kBAAR,GAA6BD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA3D;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,WAAD,CAA3B;;AACAJ,OAAO,CAACE,cAAR,GAAyB,IAAIK,UAAU,CAACE,UAAf,EAAzB;;AACA,SAASR,kBAAT,CAA4BS,OAA5B,EAAqC;AACjC,SAAO/B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,QAAIgC,GAAG,GAAGR,GAAG,CAACS,OAAJ,CAAY;AAClBC,MAAAA,UAAU,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC1B,YAAID,IAAI,CAACE,QAAL,CAAc,UAAd,CAAJ,EAA+B;AAC3B,iBAAON,OAAP;AACH;;AACD,eAAOK,MAAM,GAAGD,IAAhB;AACH,OANiB;AAOlBG,MAAAA,oBAAoB,EAAE,MAAM;AACxB,YAAIC,CAAC,GAAGb,cAAc,CAACc,gBAAf,CAAgCR,GAAhC,CAAR;AACA,YAAIS,MAAM,GAAG,IAAId,eAAe,CAACe,aAApB,CAAkCH,CAAlC,EAAqC,CAACI,UAAD,EAAaC,EAAb,KAAoB;AAClEvB,UAAAA,OAAO,CAACE,cAAR,CAAuBsB,mBAAvB,CAA2C;AACvCC,YAAAA,CAAC,EAAEH,UADoC;AAEvCI,YAAAA,CAAC,EAAE,QAFoC;AAGvCC,YAAAA,CAAC,EAAEJ;AAHoC,WAA3C,EAIG,CAACA,EAAD,CAJH;AAKH,SANY,CAAb;AAOAvB,QAAAA,OAAO,CAACE,cAAR,CAAuBsB,mBAAvB,CAA2C,QAA3C,EAAqD,EAArD;AACAxB,QAAAA,OAAO,CAACE,cAAR,CAAuB0B,iBAAvB,CAAyCC,IAAzC,CAA+CC,GAAD,IAAS;AACnD,cAAIC,EAAJ;;AACA,kBAAQD,GAAG,CAACJ,CAAZ;AACI,iBAAK,QAAL;AACIN,cAAAA,MAAM,CAACY,aAAP,CAAqBF,GAAG,CAACH,CAAzB;AACA3B,cAAAA,OAAO,CAACE,cAAR,CAAuBsB,mBAAvB,CAA2C;AAAEE,gBAAAA,CAAC,EAAE,KAAL;AAAYC,gBAAAA,CAAC,EAAEG,GAAG,CAACH;AAAnB,eAA3C,EAAmE,CAACG,GAAG,CAACH,CAAL,CAAnE;AACA;;AACJ,iBAAK,KAAL;AACI,eAACI,EAAE,GAAGX,MAAM,CAACa,uBAAP,CAA+BC,GAA/B,CAAmCJ,GAAG,CAACL,CAAvC,CAAN,MAAqD,IAArD,IAA6DM,EAAE,KAAK,KAAK,CAAzE,GAA6E,KAAK,CAAlF,GAAsFA,EAAE,CAACI,YAAH,CAAgBL,GAAG,CAACH,CAApB,CAAtF;AACA;;AACJ,iBAAK,gBAAL;AACI,kBAAIS,IAAI,GAAGN,GAAX,CADJ,CAEI;;AACA,kBAAIO,uBAAuB,GAAG7B,WAAW,CAAC8B,IAAZ,CAAiBC,MAAjB,EAA9B;;AACA,kBAAIH,IAAI,CAACI,UAAT,EAAqB;AACjBhC,gBAAAA,WAAW,CAAC8B,IAAZ,CAAiBG,WAAjB,CAA6BJ,uBAA7B,EAAsD,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAtD;AACH;;AACD,kBAAIK,QAAQ,GAAGtB,MAAM,CAACuB,qBAAP,CAA6BT,GAA7B,CAAiCE,IAAI,CAACX,CAAtC,CAAf;;AACA,kBAAIiB,QAAJ,EAAc;AACVxB,gBAAAA,CAAC,CAAC0B,4BAAF,CAA+BF,QAA/B,EAAyCN,IAAI,CAACT,CAA9C,EAAiDS,IAAI,CAACS,KAAtD,EAA6DT,IAAI,CAACU,MAAlE,EAA0EV,IAAI,CAACW,KAA/E,EAAsFV,uBAAtF;AACAnB,gBAAAA,CAAC,CAAC8B,qBAAF,CAAwBN,QAAxB;AACAtB,gBAAAA,MAAM,CAAC6B,YAAP;AACH;;AACD,kBAAIC,GAAG,GAAG;AACNH,gBAAAA,KAAK,EAAEX,IAAI,CAACW,KADN;AAENpB,gBAAAA,CAAC,EAAES,IAAI,CAACT,CAFF;AAGNF,gBAAAA,CAAC,EAAEW,IAAI,CAACX,CAHF;AAINC,gBAAAA,CAAC,EAAE;AAJG,eAAV;AAMA1B,cAAAA,OAAO,CAACE,cAAR,CAAuBsB,mBAAvB,CAA2C0B,GAA3C,EAAgD,CAACd,IAAI,CAACT,CAAN,CAAhD;AACA;AA5BR;AA8BH,SAhCD;AAiCH;AAlDiB,KAAZ,CAAV;AAoDH,GArDe,CAAhB;AAsDH;;AACD3B,OAAO,CAACC,kBAAR,GAA6BA,kBAA7B;AACA","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.launchWorkerServer = exports.messageManager = void 0;\nconst ZNM = require(\"./zcv\");\nconst zappar_cwrap_1 = require(\"./gen/zappar-cwrap\");\nconst zappar_server_1 = require(\"./gen/zappar-server\");\nconst messages_1 = require(\"./messages\");\nconst gl_matrix_1 = require(\"gl-matrix\");\nexports.messageManager = new messages_1.MsgManager();\nfunction launchWorkerServer(wasmUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let mod = ZNM.default({\n            locateFile: (path, prefix) => {\n                if (path.endsWith(\"zcv.wasm\")) {\n                    return wasmUrl;\n                }\n                return prefix + path;\n            },\n            onRuntimeInitialized: () => {\n                let r = zappar_cwrap_1.getRuntimeObject(mod);\n                let server = new zappar_server_1.zappar_server(r, (pipelineId, ab) => {\n                    exports.messageManager.postOutgoingMessage({\n                        p: pipelineId,\n                        t: \"zappar\",\n                        d: ab\n                    }, [ab]);\n                });\n                exports.messageManager.postOutgoingMessage(\"loaded\", []);\n                exports.messageManager.onIncomingMessage.bind((msg) => {\n                    var _a;\n                    switch (msg.t) {\n                        case \"zappar\":\n                            server.processBuffer(msg.d);\n                            exports.messageManager.postOutgoingMessage({ t: \"buf\", d: msg.d }, [msg.d]);\n                            break;\n                        case \"buf\":\n                            (_a = server.serializersByPipelineId.get(msg.p)) === null || _a === void 0 ? void 0 : _a.bufferReturn(msg.d);\n                            break;\n                        case \"cameraFrameC2S\":\n                            let msgt = msg;\n                            // PROCESS DATA\n                            let cameraToDeviceTransform = gl_matrix_1.mat4.create();\n                            if (msgt.userFacing) {\n                                gl_matrix_1.mat4.fromScaling(cameraToDeviceTransform, [-1, 1, -1]);\n                            }\n                            let pipeline = server._pipeline_by_instance.get(msgt.p);\n                            if (pipeline) {\n                                r.pipeline_camera_frame_submit(pipeline, msgt.d, msgt.width, msgt.height, msgt.token, cameraToDeviceTransform);\n                                r.pipeline_frame_update(pipeline);\n                                server.exploreState();\n                            }\n                            let ret = {\n                                token: msgt.token,\n                                d: msgt.d,\n                                p: msgt.p,\n                                t: \"cameraFrameRecycleS2C\"\n                            };\n                            exports.messageManager.postOutgoingMessage(ret, [msgt.d]);\n                            break;\n                    }\n                });\n            }\n        });\n    });\n}\nexports.launchWorkerServer = launchWorkerServer;\n;\n"]},"metadata":{},"sourceType":"script"}
import { zappar_pipeline_t } from "./gen/zappar";
import { zappar_cwrap } from "./gen/zappar-native";
import { zappar_client } from "./gen/zappar-client";
import { MsgManager } from "./messages";
import { mat4 } from "gl-matrix";
import { Source, CameraFrameInfo } from "./source";
import { FaceMesh } from "./facemesh";
import { Event } from "./event";
export declare class Pipeline {
    private _client;
    private _impl;
    private _mgr;
    currentCameraSource: Source | undefined;
    pendingMessages: any[];
    private cameraTokens;
    private nextCameraToken;
    private tokensInFlight;
    glContext: WebGLRenderingContext | undefined;
    private videoTextures;
    cameraPixelArrays: ArrayBuffer[];
    private _cameraDraw;
    private _faceDraw;
    private _faceProjectDraw;
    onGLContextReset: Event;
    static create(client: zappar_cwrap, mgr: MsgManager): zappar_pipeline_t;
    static get(p: zappar_pipeline_t): Pipeline | undefined;
    private constructor();
    frameUpdate(client: zappar_client): void;
    cameraTokenReturn(tokenId: number, pixelArray: ArrayBuffer): void;
    getVideoTexture(): WebGLTexture | undefined;
    destroy(): void;
    getCurrentCameraInfo(): CameraFrameInfo | undefined;
    cameraFrameDrawGL(screenWidth: number, screenHeight: number, mirror?: boolean): void;
    glContextLost(): void;
    glContextSet(gl: WebGLRenderingContext, texturePool?: WebGLTexture[]): void;
    drawFace(projectionMatrix: Float32Array, cameraMatrix: Float32Array, targetMatrix: Float32Array, o: FaceMesh): void;
    drawFaceProject(matrix: Float32Array, vertices: Float32Array, uvMatrix: Float32Array, uvs: Float32Array, indices: Uint16Array, texture: WebGLTexture): void;
    cameraFrameTexture(): WebGLTexture | undefined;
    cameraFrameTextureMatrix(sw: number, sh: number, mirror: boolean): Float32Array;
    cameraFrameUserFacing(): boolean;
    cameraPoseWithAttitude(mirror: boolean): Float32Array;
    processGL(): void;
    motionAccelerometerSubmit(timestamp: number, x: number, y: number, z: number): void;
    motionRotationRateSubmit(timestamp: number, x: number, y: number, z: number): void;
    motionAttitudeSubmit(timestamp: number, x: number, y: number, z: number): void;
}
export declare function applyScreenCounterRotation(info: CameraFrameInfo | undefined, inp: Float32Array): mat4;

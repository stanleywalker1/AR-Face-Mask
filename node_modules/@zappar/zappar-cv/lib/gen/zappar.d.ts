import { barcode_format_t } from "./zappar-native";
export { barcode_format_t } from "./zappar-native";
import { face_landmark_name_t } from "./zappar-native";
export { face_landmark_name_t } from "./zappar-native";
import { instant_world_tracker_transform_orientation_t } from "./zappar-native";
export { instant_world_tracker_transform_orientation_t } from "./zappar-native";
import { log_level_t } from "./zappar-native";
export { log_level_t } from "./zappar-native";
export declare type zappar_pipeline_t = number & {
    _: 'zappar_pipeline_t';
};
export declare type zappar_camera_source_t = number & {
    _: 'zappar_camera_source_t';
};
export declare type zappar_image_tracker_t = number & {
    _: 'zappar_image_tracker_t';
};
export declare type zappar_face_tracker_t = number & {
    _: 'zappar_face_tracker_t';
};
export declare type zappar_face_mesh_t = number & {
    _: 'zappar_face_mesh_t';
};
export declare type zappar_face_landmark_t = number & {
    _: 'zappar_face_landmark_t';
};
export declare type zappar_barcode_finder_t = number & {
    _: 'zappar_barcode_finder_t';
};
export declare type zappar_instant_world_tracker_t = number & {
    _: 'zappar_instant_world_tracker_t';
};
export interface zappar {
    loaded(): boolean;
    camera_default_device_id(userFacing: boolean): string;
    projection_matrix_from_camera_model(model: Float32Array, renderWidth: number, renderHeight: number): Float32Array;
    projection_matrix_from_camera_model_ext(model: Float32Array, renderWidth: number, renderHeight: number, zNear: number, zFar: number): Float32Array;
    log_level(): log_level_t;
    log_level_set(level: log_level_t): void;
    permission_request_ui(): void;
    permission_denied_ui(): void;
    permission_request_all(): void;
    permission_request_camera(): void;
    permission_request_motion(): void;
    permission_granted_all(): boolean;
    permission_granted_camera(): boolean;
    permission_granted_motion(): boolean;
    permission_denied_any(): boolean;
    permission_denied_camera(): boolean;
    permission_denied_motion(): boolean;
    analytics_project_id_set(id: string): void;
    pipeline_create(): zappar_pipeline_t;
    pipeline_destroy(o: zappar_pipeline_t): void;
    pipeline_camera_frame_upload_gl(o: zappar_pipeline_t): void;
    pipeline_camera_frame_texture_gl(o: zappar_pipeline_t): WebGLTexture | undefined;
    pipeline_camera_frame_texture_matrix(o: zappar_pipeline_t, renderWidth: number, renderHeight: number, mirror: boolean): Float32Array;
    pipeline_process_gl(o: zappar_pipeline_t): void;
    pipeline_frame_update(o: zappar_pipeline_t): void;
    pipeline_frame_number(o: zappar_pipeline_t): number;
    pipeline_camera_model(o: zappar_pipeline_t): Float32Array;
    pipeline_camera_pose_default(o: zappar_pipeline_t): Float32Array;
    pipeline_camera_pose_with_attitude(o: zappar_pipeline_t, mirror: boolean): Float32Array;
    pipeline_camera_pose_with_origin(o: zappar_pipeline_t, pose: Float32Array): Float32Array;
    pipeline_camera_frame_user_data(o: zappar_pipeline_t): number;
    pipeline_camera_frame_submit(o: zappar_pipeline_t, data: ArrayBuffer, width: number, height: number, user_data: number, camera_to_device_transform: Float32Array): void;
    pipeline_camera_frame_camera_attitude(o: zappar_pipeline_t): Float32Array;
    pipeline_camera_frame_user_facing(o: zappar_pipeline_t): boolean;
    pipeline_motion_accelerometer_submit(o: zappar_pipeline_t, time: number, x: number, y: number, z: number): void;
    pipeline_motion_rotation_rate_submit(o: zappar_pipeline_t, time: number, x: number, y: number, z: number): void;
    pipeline_motion_attitude_submit(o: zappar_pipeline_t, time: number, x: number, y: number, z: number): void;
    camera_source_create(pipeline: zappar_pipeline_t, device_id: string): zappar_camera_source_t;
    camera_source_destroy(o: zappar_camera_source_t): void;
    camera_source_start(o: zappar_camera_source_t): void;
    camera_source_pause(o: zappar_camera_source_t): void;
    image_tracker_create(pipeline: zappar_pipeline_t): zappar_image_tracker_t;
    image_tracker_destroy(o: zappar_image_tracker_t): void;
    image_tracker_target_load_from_memory(o: zappar_image_tracker_t, data: ArrayBuffer): void;
    image_tracker_target_loaded_version(o: zappar_image_tracker_t): number;
    image_tracker_target_count(o: zappar_image_tracker_t): number;
    image_tracker_enabled(o: zappar_image_tracker_t): boolean;
    image_tracker_enabled_set(o: zappar_image_tracker_t, enabled: boolean): void;
    image_tracker_anchor_count(o: zappar_image_tracker_t): number;
    image_tracker_anchor_id(o: zappar_image_tracker_t, indx: number): string;
    image_tracker_anchor_pose_raw(o: zappar_image_tracker_t, indx: number): Float32Array;
    image_tracker_anchor_pose_camera_relative(o: zappar_image_tracker_t, indx: number, mirror: boolean): Float32Array;
    image_tracker_anchor_pose(o: zappar_image_tracker_t, indx: number, camera_pose: Float32Array, mirror: boolean): Float32Array;
    face_tracker_create(pipeline: zappar_pipeline_t): zappar_face_tracker_t;
    face_tracker_destroy(o: zappar_face_tracker_t): void;
    face_tracker_model_load_from_memory(o: zappar_face_tracker_t, data: ArrayBuffer): void;
    face_tracker_model_loaded_version(o: zappar_face_tracker_t): number;
    face_tracker_enabled_set(o: zappar_face_tracker_t, enabled: boolean): void;
    face_tracker_enabled(o: zappar_face_tracker_t): boolean;
    face_tracker_max_faces_set(o: zappar_face_tracker_t, num: number): void;
    face_tracker_max_faces(o: zappar_face_tracker_t): number;
    face_tracker_anchor_count(o: zappar_face_tracker_t): number;
    face_tracker_anchor_id(o: zappar_face_tracker_t, indx: number): string;
    face_tracker_anchor_pose_raw(o: zappar_face_tracker_t, indx: number): Float32Array;
    face_tracker_anchor_pose_camera_relative(o: zappar_face_tracker_t, indx: number, mirror: boolean): Float32Array;
    face_tracker_anchor_pose(o: zappar_face_tracker_t, indx: number, camera_pose: Float32Array, mirror: boolean): Float32Array;
    face_tracker_anchor_identity_coefficients(o: zappar_face_tracker_t, indx: number): Float32Array;
    face_tracker_anchor_expression_coefficients(o: zappar_face_tracker_t, indx: number): Float32Array;
    face_mesh_create(): zappar_face_mesh_t;
    face_mesh_destroy(o: zappar_face_mesh_t): void;
    face_mesh_load_from_memory(o: zappar_face_mesh_t, data: ArrayBuffer, fill_mouth: boolean, fill_eye_l: boolean, fill_eye_r: boolean, fill_neck: boolean): void;
    face_mesh_loaded_version(o: zappar_face_mesh_t): number;
    face_mesh_update(o: zappar_face_mesh_t, identity: Float32Array, expression: Float32Array, mirrored: boolean): void;
    face_mesh_indices_size(o: zappar_face_mesh_t): number;
    face_mesh_indices(o: zappar_face_mesh_t): Uint16Array;
    face_mesh_vertices_size(o: zappar_face_mesh_t): number;
    face_mesh_vertices(o: zappar_face_mesh_t): Float32Array;
    face_mesh_normals_size(o: zappar_face_mesh_t): number;
    face_mesh_normals(o: zappar_face_mesh_t): Float32Array;
    face_mesh_uvs_size(o: zappar_face_mesh_t): number;
    face_mesh_uvs(o: zappar_face_mesh_t): Float32Array;
    face_landmark_create(landmark: face_landmark_name_t): zappar_face_landmark_t;
    face_landmark_destroy(o: zappar_face_landmark_t): void;
    face_landmark_update(o: zappar_face_landmark_t, identity: Float32Array, expression: Float32Array, mirrored: boolean): void;
    face_landmark_anchor_pose(o: zappar_face_landmark_t): Float32Array;
    barcode_finder_create(pipeline: zappar_pipeline_t): zappar_barcode_finder_t;
    barcode_finder_destroy(o: zappar_barcode_finder_t): void;
    barcode_finder_enabled_set(o: zappar_barcode_finder_t, enabled: boolean): void;
    barcode_finder_enabled(o: zappar_barcode_finder_t): boolean;
    barcode_finder_found_number(o: zappar_barcode_finder_t): number;
    barcode_finder_found_text(o: zappar_barcode_finder_t, indx: number): string;
    barcode_finder_found_format(o: zappar_barcode_finder_t, indx: number): barcode_format_t;
    barcode_finder_formats(o: zappar_barcode_finder_t): barcode_format_t;
    barcode_finder_formats_set(o: zappar_barcode_finder_t, f: barcode_format_t): void;
    instant_world_tracker_create(pipeline: zappar_pipeline_t): zappar_instant_world_tracker_t;
    instant_world_tracker_destroy(o: zappar_instant_world_tracker_t): void;
    instant_world_tracker_enabled_set(o: zappar_instant_world_tracker_t, enabled: boolean): void;
    instant_world_tracker_enabled(o: zappar_instant_world_tracker_t): boolean;
    instant_world_tracker_anchor_pose_raw(o: zappar_instant_world_tracker_t): Float32Array;
    instant_world_tracker_anchor_pose_camera_relative(o: zappar_instant_world_tracker_t, mirror: boolean): Float32Array;
    instant_world_tracker_anchor_pose(o: zappar_instant_world_tracker_t, camera_pose: Float32Array, mirror: boolean): Float32Array;
    instant_world_tracker_anchor_pose_set_from_camera_offset(o: zappar_instant_world_tracker_t, x: number, y: number, z: number, orientation: instant_world_tracker_transform_orientation_t): void;
}
